
FreeRTOS_STMCube_IDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c60  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08006df0  08006df0  00007df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f30  08006f30  00008014  2**0
                  CONTENTS
  4 .ARM          00000008  08006f30  08006f30  00007f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f38  08006f38  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f38  08006f38  00007f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f3c  08006f3c  00007f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08006f40  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008014  2**0
                  CONTENTS
 10 .bss          00012e9c  20000014  20000014  00008014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012eb0  20012eb0  00008014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000150f8  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032f1  00000000  00000000  0001d13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e0  00000000  00000000  00020430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eb1  00000000  00000000  00021710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002306f  00000000  00000000  000225c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001746c  00000000  00000000  00045630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da4f0  00000000  00000000  0005ca9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00136f8c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ed8  00000000  00000000  00136fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0013bea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006dd8 	.word	0x08006dd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08006dd8 	.word	0x08006dd8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000204:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000208:	f000 b96a 	b.w	80004e0 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9d08      	ldr	r5, [sp, #32]
 800022a:	460c      	mov	r4, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14e      	bne.n	80002ce <__udivmoddi4+0xaa>
 8000230:	4694      	mov	ip, r2
 8000232:	458c      	cmp	ip, r1
 8000234:	4686      	mov	lr, r0
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	d962      	bls.n	8000302 <__udivmoddi4+0xde>
 800023c:	b14a      	cbz	r2, 8000252 <__udivmoddi4+0x2e>
 800023e:	f1c2 0320 	rsb	r3, r2, #32
 8000242:	4091      	lsls	r1, r2
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	fa0c fc02 	lsl.w	ip, ip, r2
 800024c:	4319      	orrs	r1, r3
 800024e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000252:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000256:	fa1f f68c 	uxth.w	r6, ip
 800025a:	fbb1 f4f7 	udiv	r4, r1, r7
 800025e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000262:	fb07 1114 	mls	r1, r7, r4, r1
 8000266:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026a:	fb04 f106 	mul.w	r1, r4, r6
 800026e:	4299      	cmp	r1, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x64>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800027a:	f080 8112 	bcs.w	80004a2 <__udivmoddi4+0x27e>
 800027e:	4299      	cmp	r1, r3
 8000280:	f240 810f 	bls.w	80004a2 <__udivmoddi4+0x27e>
 8000284:	3c02      	subs	r4, #2
 8000286:	4463      	add	r3, ip
 8000288:	1a59      	subs	r1, r3, r1
 800028a:	fa1f f38e 	uxth.w	r3, lr
 800028e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000292:	fb07 1110 	mls	r1, r7, r0, r1
 8000296:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029a:	fb00 f606 	mul.w	r6, r0, r6
 800029e:	429e      	cmp	r6, r3
 80002a0:	d90a      	bls.n	80002b8 <__udivmoddi4+0x94>
 80002a2:	eb1c 0303 	adds.w	r3, ip, r3
 80002a6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002aa:	f080 80fc 	bcs.w	80004a6 <__udivmoddi4+0x282>
 80002ae:	429e      	cmp	r6, r3
 80002b0:	f240 80f9 	bls.w	80004a6 <__udivmoddi4+0x282>
 80002b4:	4463      	add	r3, ip
 80002b6:	3802      	subs	r0, #2
 80002b8:	1b9b      	subs	r3, r3, r6
 80002ba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002be:	2100      	movs	r1, #0
 80002c0:	b11d      	cbz	r5, 80002ca <__udivmoddi4+0xa6>
 80002c2:	40d3      	lsrs	r3, r2
 80002c4:	2200      	movs	r2, #0
 80002c6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d905      	bls.n	80002de <__udivmoddi4+0xba>
 80002d2:	b10d      	cbz	r5, 80002d8 <__udivmoddi4+0xb4>
 80002d4:	e9c5 0100 	strd	r0, r1, [r5]
 80002d8:	2100      	movs	r1, #0
 80002da:	4608      	mov	r0, r1
 80002dc:	e7f5      	b.n	80002ca <__udivmoddi4+0xa6>
 80002de:	fab3 f183 	clz	r1, r3
 80002e2:	2900      	cmp	r1, #0
 80002e4:	d146      	bne.n	8000374 <__udivmoddi4+0x150>
 80002e6:	42a3      	cmp	r3, r4
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xcc>
 80002ea:	4290      	cmp	r0, r2
 80002ec:	f0c0 80f0 	bcc.w	80004d0 <__udivmoddi4+0x2ac>
 80002f0:	1a86      	subs	r6, r0, r2
 80002f2:	eb64 0303 	sbc.w	r3, r4, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	d0e6      	beq.n	80002ca <__udivmoddi4+0xa6>
 80002fc:	e9c5 6300 	strd	r6, r3, [r5]
 8000300:	e7e3      	b.n	80002ca <__udivmoddi4+0xa6>
 8000302:	2a00      	cmp	r2, #0
 8000304:	f040 8090 	bne.w	8000428 <__udivmoddi4+0x204>
 8000308:	eba1 040c 	sub.w	r4, r1, ip
 800030c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000310:	fa1f f78c 	uxth.w	r7, ip
 8000314:	2101      	movs	r1, #1
 8000316:	fbb4 f6f8 	udiv	r6, r4, r8
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb08 4416 	mls	r4, r8, r6, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb07 f006 	mul.w	r0, r7, r6
 800032a:	4298      	cmp	r0, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x11c>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x11a>
 8000338:	4298      	cmp	r0, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2b4>
 800033e:	4626      	mov	r6, r4
 8000340:	1a1c      	subs	r4, r3, r0
 8000342:	fa1f f38e 	uxth.w	r3, lr
 8000346:	fbb4 f0f8 	udiv	r0, r4, r8
 800034a:	fb08 4410 	mls	r4, r8, r0, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb00 f707 	mul.w	r7, r0, r7
 8000356:	429f      	cmp	r7, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x148>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x146>
 8000364:	429f      	cmp	r7, r3
 8000366:	f200 80b0 	bhi.w	80004ca <__udivmoddi4+0x2a6>
 800036a:	4620      	mov	r0, r4
 800036c:	1bdb      	subs	r3, r3, r7
 800036e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0x9c>
 8000374:	f1c1 0620 	rsb	r6, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 f706 	lsr.w	r7, r2, r6
 800037e:	431f      	orrs	r7, r3
 8000380:	fa20 fc06 	lsr.w	ip, r0, r6
 8000384:	fa04 f301 	lsl.w	r3, r4, r1
 8000388:	ea43 030c 	orr.w	r3, r3, ip
 800038c:	40f4      	lsrs	r4, r6
 800038e:	fa00 f801 	lsl.w	r8, r0, r1
 8000392:	0c38      	lsrs	r0, r7, #16
 8000394:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000398:	fbb4 fef0 	udiv	lr, r4, r0
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	fb00 441e 	mls	r4, r0, lr, r4
 80003a4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a8:	fb0e f90c 	mul.w	r9, lr, ip
 80003ac:	45a1      	cmp	r9, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	d90a      	bls.n	80003ca <__udivmoddi4+0x1a6>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ba:	f080 8084 	bcs.w	80004c6 <__udivmoddi4+0x2a2>
 80003be:	45a1      	cmp	r9, r4
 80003c0:	f240 8081 	bls.w	80004c6 <__udivmoddi4+0x2a2>
 80003c4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	eba4 0409 	sub.w	r4, r4, r9
 80003ce:	fa1f f983 	uxth.w	r9, r3
 80003d2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d6:	fb00 4413 	mls	r4, r0, r3, r4
 80003da:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003de:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x1d2>
 80003e6:	193c      	adds	r4, r7, r4
 80003e8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003ec:	d267      	bcs.n	80004be <__udivmoddi4+0x29a>
 80003ee:	45a4      	cmp	ip, r4
 80003f0:	d965      	bls.n	80004be <__udivmoddi4+0x29a>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003fa:	fba0 9302 	umull	r9, r3, r0, r2
 80003fe:	eba4 040c 	sub.w	r4, r4, ip
 8000402:	429c      	cmp	r4, r3
 8000404:	46ce      	mov	lr, r9
 8000406:	469c      	mov	ip, r3
 8000408:	d351      	bcc.n	80004ae <__udivmoddi4+0x28a>
 800040a:	d04e      	beq.n	80004aa <__udivmoddi4+0x286>
 800040c:	b155      	cbz	r5, 8000424 <__udivmoddi4+0x200>
 800040e:	ebb8 030e 	subs.w	r3, r8, lr
 8000412:	eb64 040c 	sbc.w	r4, r4, ip
 8000416:	fa04 f606 	lsl.w	r6, r4, r6
 800041a:	40cb      	lsrs	r3, r1
 800041c:	431e      	orrs	r6, r3
 800041e:	40cc      	lsrs	r4, r1
 8000420:	e9c5 6400 	strd	r6, r4, [r5]
 8000424:	2100      	movs	r1, #0
 8000426:	e750      	b.n	80002ca <__udivmoddi4+0xa6>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f103 	lsr.w	r1, r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa24 f303 	lsr.w	r3, r4, r3
 8000438:	4094      	lsls	r4, r2
 800043a:	430c      	orrs	r4, r1
 800043c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000440:	fa00 fe02 	lsl.w	lr, r0, r2
 8000444:	fa1f f78c 	uxth.w	r7, ip
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3110 	mls	r1, r8, r0, r3
 8000450:	0c23      	lsrs	r3, r4, #16
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f107 	mul.w	r1, r0, r7
 800045a:	4299      	cmp	r1, r3
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x24c>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000466:	d22c      	bcs.n	80004c2 <__udivmoddi4+0x29e>
 8000468:	4299      	cmp	r1, r3
 800046a:	d92a      	bls.n	80004c2 <__udivmoddi4+0x29e>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	b2a4      	uxth	r4, r4
 8000474:	fbb3 f1f8 	udiv	r1, r3, r8
 8000478:	fb08 3311 	mls	r3, r8, r1, r3
 800047c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000480:	fb01 f307 	mul.w	r3, r1, r7
 8000484:	42a3      	cmp	r3, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x276>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000490:	d213      	bcs.n	80004ba <__udivmoddi4+0x296>
 8000492:	42a3      	cmp	r3, r4
 8000494:	d911      	bls.n	80004ba <__udivmoddi4+0x296>
 8000496:	3902      	subs	r1, #2
 8000498:	4464      	add	r4, ip
 800049a:	1ae4      	subs	r4, r4, r3
 800049c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a0:	e739      	b.n	8000316 <__udivmoddi4+0xf2>
 80004a2:	4604      	mov	r4, r0
 80004a4:	e6f0      	b.n	8000288 <__udivmoddi4+0x64>
 80004a6:	4608      	mov	r0, r1
 80004a8:	e706      	b.n	80002b8 <__udivmoddi4+0x94>
 80004aa:	45c8      	cmp	r8, r9
 80004ac:	d2ae      	bcs.n	800040c <__udivmoddi4+0x1e8>
 80004ae:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7a8      	b.n	800040c <__udivmoddi4+0x1e8>
 80004ba:	4631      	mov	r1, r6
 80004bc:	e7ed      	b.n	800049a <__udivmoddi4+0x276>
 80004be:	4603      	mov	r3, r0
 80004c0:	e799      	b.n	80003f6 <__udivmoddi4+0x1d2>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e7d4      	b.n	8000470 <__udivmoddi4+0x24c>
 80004c6:	46d6      	mov	lr, sl
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1a6>
 80004ca:	4463      	add	r3, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e74d      	b.n	800036c <__udivmoddi4+0x148>
 80004d0:	4606      	mov	r6, r0
 80004d2:	4623      	mov	r3, r4
 80004d4:	4608      	mov	r0, r1
 80004d6:	e70f      	b.n	80002f8 <__udivmoddi4+0xd4>
 80004d8:	3e02      	subs	r6, #2
 80004da:	4463      	add	r3, ip
 80004dc:	e730      	b.n	8000340 <__udivmoddi4+0x11c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ea:	f000 fe9d 	bl	8001228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ee:	f000 f8ad 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f2:	f000 f967 	bl	80007c4 <MX_GPIO_Init>
  MX_RTC_Init();
 80004f6:	f000 f915 	bl	8000724 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80004fa:	f000 f939 	bl	8000770 <MX_USART2_UART_Init>
  //RTC task
  //Print task
  //Command handling task
  //2 Queues - input data queue and print queue

  status = xTaskCreate(Menu_Task_Handler, "Menu_Task", 200, NULL, 2, &Menu_Task_Handle);
 80004fe:	4b40      	ldr	r3, [pc, #256]	@ (8000600 <main+0x11c>)
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	2302      	movs	r3, #2
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	2300      	movs	r3, #0
 8000508:	22c8      	movs	r2, #200	@ 0xc8
 800050a:	493e      	ldr	r1, [pc, #248]	@ (8000604 <main+0x120>)
 800050c:	483e      	ldr	r0, [pc, #248]	@ (8000608 <main+0x124>)
 800050e:	f004 fa15 	bl	800493c <xTaskCreate>
 8000512:	60f8      	str	r0, [r7, #12]


  if(status == pdPASS)
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d10a      	bne.n	8000530 <main+0x4c>
  {
  	  status = xTaskCreate(LED_Task_Handler, "LED_Task", 200, NULL, 2, &LED_Task_Handle);
 800051a:	4b3c      	ldr	r3, [pc, #240]	@ (800060c <main+0x128>)
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	2302      	movs	r3, #2
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2300      	movs	r3, #0
 8000524:	22c8      	movs	r2, #200	@ 0xc8
 8000526:	493a      	ldr	r1, [pc, #232]	@ (8000610 <main+0x12c>)
 8000528:	483a      	ldr	r0, [pc, #232]	@ (8000614 <main+0x130>)
 800052a:	f004 fa07 	bl	800493c <xTaskCreate>
 800052e:	60f8      	str	r0, [r7, #12]
  }

  if(status == pdPASS)
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d10a      	bne.n	800054c <main+0x68>
  {
	  status = xTaskCreate(RTC_Task_Handler, "RTC_Task", 200, NULL, 2, &RTC_Task_Handle);
 8000536:	4b38      	ldr	r3, [pc, #224]	@ (8000618 <main+0x134>)
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2302      	movs	r3, #2
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2300      	movs	r3, #0
 8000540:	22c8      	movs	r2, #200	@ 0xc8
 8000542:	4936      	ldr	r1, [pc, #216]	@ (800061c <main+0x138>)
 8000544:	4836      	ldr	r0, [pc, #216]	@ (8000620 <main+0x13c>)
 8000546:	f004 f9f9 	bl	800493c <xTaskCreate>
 800054a:	60f8      	str	r0, [r7, #12]
  }

  if(status == pdPASS)
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d10a      	bne.n	8000568 <main+0x84>
  {
	  status = xTaskCreate(Print_Task_Handler, "Print_Task", 200, NULL, 2, &Print_Task_Handle);
 8000552:	4b34      	ldr	r3, [pc, #208]	@ (8000624 <main+0x140>)
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2302      	movs	r3, #2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	22c8      	movs	r2, #200	@ 0xc8
 800055e:	4932      	ldr	r1, [pc, #200]	@ (8000628 <main+0x144>)
 8000560:	4832      	ldr	r0, [pc, #200]	@ (800062c <main+0x148>)
 8000562:	f004 f9eb 	bl	800493c <xTaskCreate>
 8000566:	60f8      	str	r0, [r7, #12]
  }

  if(status == pdPASS)
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d10a      	bne.n	8000584 <main+0xa0>
  {
	  status = xTaskCreate(Command_Task_Handler, "CMD_Task", 200, NULL, 2, &Command_Task_Handle);
 800056e:	4b30      	ldr	r3, [pc, #192]	@ (8000630 <main+0x14c>)
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2302      	movs	r3, #2
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2300      	movs	r3, #0
 8000578:	22c8      	movs	r2, #200	@ 0xc8
 800057a:	492e      	ldr	r1, [pc, #184]	@ (8000634 <main+0x150>)
 800057c:	482e      	ldr	r0, [pc, #184]	@ (8000638 <main+0x154>)
 800057e:	f004 f9dd 	bl	800493c <xTaskCreate>
 8000582:	60f8      	str	r0, [r7, #12]
  }

  input_data_queue =  xQueueCreate(10U, sizeof(char));
 8000584:	2200      	movs	r2, #0
 8000586:	2101      	movs	r1, #1
 8000588:	200a      	movs	r0, #10
 800058a:	f003 fc85 	bl	8003e98 <xQueueGenericCreate>
 800058e:	4603      	mov	r3, r0
 8000590:	4a2a      	ldr	r2, [pc, #168]	@ (800063c <main+0x158>)
 8000592:	6013      	str	r3, [r2, #0]
  configASSERT(input_data_queue != NULL);
 8000594:	4b29      	ldr	r3, [pc, #164]	@ (800063c <main+0x158>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d10b      	bne.n	80005b4 <main+0xd0>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800059c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005a0:	f383 8811 	msr	BASEPRI, r3
 80005a4:	f3bf 8f6f 	isb	sy
 80005a8:	f3bf 8f4f 	dsb	sy
 80005ac:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <main+0xcc>

  /*in this queue, we send pointer to the string or pointer to the msg*/
  /**/
  print_queue =  xQueueCreate(10U, sizeof(size_t));
 80005b4:	2200      	movs	r2, #0
 80005b6:	2104      	movs	r1, #4
 80005b8:	200a      	movs	r0, #10
 80005ba:	f003 fc6d 	bl	8003e98 <xQueueGenericCreate>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a1f      	ldr	r2, [pc, #124]	@ (8000640 <main+0x15c>)
 80005c2:	6013      	str	r3, [r2, #0]
  configASSERT(print_queue != NULL);
 80005c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000640 <main+0x15c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d10b      	bne.n	80005e4 <main+0x100>
        __asm volatile
 80005cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005d0:	f383 8811 	msr	BASEPRI, r3
 80005d4:	f3bf 8f6f 	isb	sy
 80005d8:	f3bf 8f4f 	dsb	sy
 80005dc:	607b      	str	r3, [r7, #4]
    }
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <main+0xfc>

  HAL_UART_Receive_IT(&huart2, &user_data, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	4917      	ldr	r1, [pc, #92]	@ (8000644 <main+0x160>)
 80005e8:	4817      	ldr	r0, [pc, #92]	@ (8000648 <main+0x164>)
 80005ea:	f002 fbb8 	bl	8002d5e <HAL_UART_Receive_IT>

  if(status == pdPASS)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d102      	bne.n	80005fa <main+0x116>
  {
  	  vTaskStartScheduler();
 80005f4:	f004 fb20 	bl	8004c38 <vTaskStartScheduler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	e7fd      	b.n	80005fa <main+0x116>
 80005fe:	bf00      	nop
 8000600:	20000098 	.word	0x20000098
 8000604:	08006df0 	.word	0x08006df0
 8000608:	08000e01 	.word	0x08000e01
 800060c:	2000009c 	.word	0x2000009c
 8000610:	08006dfc 	.word	0x08006dfc
 8000614:	08000ed9 	.word	0x08000ed9
 8000618:	200000a0 	.word	0x200000a0
 800061c:	08006e08 	.word	0x08006e08
 8000620:	08001071 	.word	0x08001071
 8000624:	200000a4 	.word	0x200000a4
 8000628:	08006e14 	.word	0x08006e14
 800062c:	0800107d 	.word	0x0800107d
 8000630:	200000a8 	.word	0x200000a8
 8000634:	08006e20 	.word	0x08006e20
 8000638:	080010bd 	.word	0x080010bd
 800063c:	200000b0 	.word	0x200000b0
 8000640:	200000b4 	.word	0x200000b4
 8000644:	200000ac 	.word	0x200000ac
 8000648:	20000050 	.word	0x20000050

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	@ 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2230      	movs	r2, #48	@ 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f006 fb82 	bl	8006d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	4b29      	ldr	r3, [pc, #164]	@ (800071c <SystemClock_Config+0xd0>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000678:	4a28      	ldr	r2, [pc, #160]	@ (800071c <SystemClock_Config+0xd0>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000680:	4b26      	ldr	r3, [pc, #152]	@ (800071c <SystemClock_Config+0xd0>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b23      	ldr	r3, [pc, #140]	@ (8000720 <SystemClock_Config+0xd4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a22      	ldr	r2, [pc, #136]	@ (8000720 <SystemClock_Config+0xd4>)
 8000696:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b20      	ldr	r3, [pc, #128]	@ (8000720 <SystemClock_Config+0xd4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006a8:	230a      	movs	r3, #10
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2310      	movs	r3, #16
 80006b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006c4:	2332      	movs	r3, #50	@ 0x32
 80006c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006cc:	2307      	movs	r3, #7
 80006ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 f913 	bl	8001900 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006e0:	f000 fa28 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f001 fb74 	bl	8001df0 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800070e:	f000 fa11 	bl	8000b34 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	@ 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_RTC_Init+0x44>)
 800072a:	4a10      	ldr	r2, [pc, #64]	@ (800076c <MX_RTC_Init+0x48>)
 800072c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_RTC_Init+0x44>)
 8000730:	2240      	movs	r2, #64	@ 0x40
 8000732:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_RTC_Init+0x44>)
 8000736:	227f      	movs	r2, #127	@ 0x7f
 8000738:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800073a:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <MX_RTC_Init+0x44>)
 800073c:	22ff      	movs	r2, #255	@ 0xff
 800073e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000740:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_RTC_Init+0x44>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <MX_RTC_Init+0x44>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_RTC_Init+0x44>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_RTC_Init+0x44>)
 8000754:	f001 fe80 	bl	8002458 <HAL_RTC_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800075e:	f000 f9e9 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000030 	.word	0x20000030
 800076c:	40002800 	.word	0x40002800

08000770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000774:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000776:	4a12      	ldr	r2, [pc, #72]	@ (80007c0 <MX_USART2_UART_Init+0x50>)
 8000778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077a:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_USART2_UART_Init+0x4c>)
 80007a8:	f002 f9fe 	bl	8002ba8 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007b2:	f000 f9bf 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000050 	.word	0x20000050
 80007c0:	40004400 	.word	0x40004400

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	@ 0x30
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
 80007de:	4ba2      	ldr	r3, [pc, #648]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4aa1      	ldr	r2, [pc, #644]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 80007e4:	f043 0310 	orr.w	r3, r3, #16
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b9f      	ldr	r3, [pc, #636]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0310 	and.w	r3, r3, #16
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	4b9b      	ldr	r3, [pc, #620]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a9a      	ldr	r2, [pc, #616]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b98      	ldr	r3, [pc, #608]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b94      	ldr	r3, [pc, #592]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a93      	ldr	r2, [pc, #588]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 800081c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b91      	ldr	r3, [pc, #580]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	4b8d      	ldr	r3, [pc, #564]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a8c      	ldr	r2, [pc, #560]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b8a      	ldr	r3, [pc, #552]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b86      	ldr	r3, [pc, #536]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a85      	ldr	r2, [pc, #532]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b83      	ldr	r3, [pc, #524]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b7f      	ldr	r3, [pc, #508]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a7e      	ldr	r2, [pc, #504]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 8000870:	f043 0308 	orr.w	r3, r3, #8
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b7c      	ldr	r3, [pc, #496]	@ (8000a68 <MX_GPIO_Init+0x2a4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0308 	and.w	r3, r3, #8
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2108      	movs	r1, #8
 8000886:	4879      	ldr	r0, [pc, #484]	@ (8000a6c <MX_GPIO_Init+0x2a8>)
 8000888:	f001 f820 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2101      	movs	r1, #1
 8000890:	4877      	ldr	r0, [pc, #476]	@ (8000a70 <MX_GPIO_Init+0x2ac>)
 8000892:	f001 f81b 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000896:	2200      	movs	r2, #0
 8000898:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800089c:	4875      	ldr	r0, [pc, #468]	@ (8000a74 <MX_GPIO_Init+0x2b0>)
 800089e:	f001 f815 	bl	80018cc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008a2:	2308      	movs	r3, #8
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	486c      	ldr	r0, [pc, #432]	@ (8000a6c <MX_GPIO_Init+0x2a8>)
 80008ba:	f000 fe6b 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008be:	2301      	movs	r3, #1
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4866      	ldr	r0, [pc, #408]	@ (8000a70 <MX_GPIO_Init+0x2ac>)
 80008d6:	f000 fe5d 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008da:	2308      	movs	r3, #8
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ea:	2305      	movs	r3, #5
 80008ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	485e      	ldr	r0, [pc, #376]	@ (8000a70 <MX_GPIO_Init+0x2ac>)
 80008f6:	f000 fe4d 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008fe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	485a      	ldr	r0, [pc, #360]	@ (8000a78 <MX_GPIO_Init+0x2b4>)
 8000910:	f000 fe40 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000914:	2310      	movs	r3, #16
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000924:	2306      	movs	r3, #6
 8000926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4852      	ldr	r0, [pc, #328]	@ (8000a78 <MX_GPIO_Init+0x2b4>)
 8000930:	f000 fe30 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000934:	23e0      	movs	r3, #224	@ 0xe0
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000944:	2305      	movs	r3, #5
 8000946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	484a      	ldr	r0, [pc, #296]	@ (8000a78 <MX_GPIO_Init+0x2b4>)
 8000950:	f000 fe20 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000954:	2304      	movs	r3, #4
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4845      	ldr	r0, [pc, #276]	@ (8000a7c <MX_GPIO_Init+0x2b8>)
 8000968:	f000 fe14 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800096c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800097e:	2305      	movs	r3, #5
 8000980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	483c      	ldr	r0, [pc, #240]	@ (8000a7c <MX_GPIO_Init+0x2b8>)
 800098a:	f000 fe03 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800098e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000992:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	4833      	ldr	r0, [pc, #204]	@ (8000a74 <MX_GPIO_Init+0x2b0>)
 80009a8:	f000 fdf4 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009ac:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009be:	2306      	movs	r3, #6
 80009c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4829      	ldr	r0, [pc, #164]	@ (8000a70 <MX_GPIO_Init+0x2ac>)
 80009ca:	f000 fde3 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4825      	ldr	r0, [pc, #148]	@ (8000a78 <MX_GPIO_Init+0x2b4>)
 80009e4:	f000 fdd6 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009e8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009fa:	230a      	movs	r3, #10
 80009fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	481c      	ldr	r0, [pc, #112]	@ (8000a78 <MX_GPIO_Init+0x2b4>)
 8000a06:	f000 fdc5 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a0a:	2320      	movs	r3, #32
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4815      	ldr	r0, [pc, #84]	@ (8000a74 <MX_GPIO_Init+0x2b0>)
 8000a1e:	f000 fdb9 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a22:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a28:	2312      	movs	r3, #18
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a34:	2304      	movs	r3, #4
 8000a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480f      	ldr	r0, [pc, #60]	@ (8000a7c <MX_GPIO_Init+0x2b8>)
 8000a40:	f000 fda8 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a48:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4804      	ldr	r0, [pc, #16]	@ (8000a6c <MX_GPIO_Init+0x2a8>)
 8000a5a:	f000 fd9b 	bl	8001594 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a5e:	bf00      	nop
 8000a60:	3730      	adds	r7, #48	@ 0x30
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40020800 	.word	0x40020800
 8000a74:	40020c00 	.word	0x40020c00
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40020400 	.word	0x40020400

08000a80 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af02      	add	r7, sp, #8
 8000a86:	6078      	str	r0, [r7, #4]
	uint8_t dummy;
	if(pdFALSE == xQueueIsQueueFullFromISR(input_data_queue))
 8000a88:	4b1d      	ldr	r3, [pc, #116]	@ (8000b00 <HAL_UART_RxCpltCallback+0x80>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f003 fea9 	bl	80047e4 <xQueueIsQueueFullFromISR>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d107      	bne.n	8000aa8 <HAL_UART_RxCpltCallback+0x28>
	{
		/*Queue is not full */
		 xQueueSendFromISR(input_data_queue, (void *)&user_data, NULL);
 8000a98:	4b19      	ldr	r3, [pc, #100]	@ (8000b00 <HAL_UART_RxCpltCallback+0x80>)
 8000a9a:	6818      	ldr	r0, [r3, #0]
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	4918      	ldr	r1, [pc, #96]	@ (8000b04 <HAL_UART_RxCpltCallback+0x84>)
 8000aa2:	f003 fb6d 	bl	8004180 <xQueueGenericSendFromISR>
 8000aa6:	e012      	b.n	8000ace <HAL_UART_RxCpltCallback+0x4e>

	}else{
		/*Queue is full */
		if(user_data == '\r')
 8000aa8:	4b16      	ldr	r3, [pc, #88]	@ (8000b04 <HAL_UART_RxCpltCallback+0x84>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b0d      	cmp	r3, #13
 8000aae:	d10e      	bne.n	8000ace <HAL_UART_RxCpltCallback+0x4e>
		{
			xQueueReceiveFromISR(input_data_queue, &dummy, NULL);
 8000ab0:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <HAL_UART_RxCpltCallback+0x80>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f107 010f 	add.w	r1, r7, #15
 8000ab8:	2200      	movs	r2, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f003 fcf0 	bl	80044a0 <xQueueReceiveFromISR>
			xQueueSendFromISR(input_data_queue, (void *)&user_data, NULL);
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <HAL_UART_RxCpltCallback+0x80>)
 8000ac2:	6818      	ldr	r0, [r3, #0]
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	490e      	ldr	r1, [pc, #56]	@ (8000b04 <HAL_UART_RxCpltCallback+0x84>)
 8000aca:	f003 fb59 	bl	8004180 <xQueueGenericSendFromISR>
		}
	}

	if(user_data == '\r')
 8000ace:	4b0d      	ldr	r3, [pc, #52]	@ (8000b04 <HAL_UART_RxCpltCallback+0x84>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b0d      	cmp	r3, #13
 8000ad4:	d10a      	bne.n	8000aec <HAL_UART_RxCpltCallback+0x6c>
	{
		xTaskNotifyFromISR(Command_Task_Handle, 0, eNoAction, NULL);
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <HAL_UART_RxCpltCallback+0x88>)
 8000ad8:	6818      	ldr	r0, [r3, #0]
 8000ada:	2300      	movs	r3, #0
 8000adc:	9301      	str	r3, [sp, #4]
 8000ade:	2300      	movs	r3, #0
 8000ae0:	9300      	str	r3, [sp, #0]
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	f005 f870 	bl	8005bcc <xTaskGenericNotifyFromISR>
	}


	HAL_UART_Receive_IT(&huart2, (uint8_t *)&user_data, 1);
 8000aec:	2201      	movs	r2, #1
 8000aee:	4905      	ldr	r1, [pc, #20]	@ (8000b04 <HAL_UART_RxCpltCallback+0x84>)
 8000af0:	4806      	ldr	r0, [pc, #24]	@ (8000b0c <HAL_UART_RxCpltCallback+0x8c>)
 8000af2:	f002 f934 	bl	8002d5e <HAL_UART_Receive_IT>
}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200000b0 	.word	0x200000b0
 8000b04:	200000ac 	.word	0x200000ac
 8000b08:	200000a8 	.word	0x200000a8
 8000b0c:	20000050 	.word	0x20000050

08000b10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a04      	ldr	r2, [pc, #16]	@ (8000b30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d101      	bne.n	8000b26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b22:	f000 fba3 	bl	800126c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40001000 	.word	0x40001000

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <Error_Handler+0x8>

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b56:	4b0d      	ldr	r3, [pc, #52]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6a:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800

08000b90 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b98:	f107 0308 	add.w	r3, r7, #8
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a0c      	ldr	r2, [pc, #48]	@ (8000bdc <HAL_RTC_MspInit+0x4c>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d111      	bne.n	8000bd4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000bb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bb8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f001 fb68 	bl	8002294 <HAL_RCCEx_PeriphCLKConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000bca:	f7ff ffb3 	bl	8000b34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bce:	4b04      	ldr	r3, [pc, #16]	@ (8000be0 <HAL_RTC_MspInit+0x50>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000bd4:	bf00      	nop
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40002800 	.word	0x40002800
 8000be0:	42470e3c 	.word	0x42470e3c

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	@ 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a1d      	ldr	r2, [pc, #116]	@ (8000c78 <HAL_UART_MspInit+0x94>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d133      	bne.n	8000c6e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <HAL_UART_MspInit+0x98>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000c7c <HAL_UART_MspInit+0x98>)
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c16:	4b19      	ldr	r3, [pc, #100]	@ (8000c7c <HAL_UART_MspInit+0x98>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <HAL_UART_MspInit+0x98>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	4a14      	ldr	r2, [pc, #80]	@ (8000c7c <HAL_UART_MspInit+0x98>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c32:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <HAL_UART_MspInit+0x98>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c3e:	230c      	movs	r3, #12
 8000c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c4e:	2307      	movs	r3, #7
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4809      	ldr	r0, [pc, #36]	@ (8000c80 <HAL_UART_MspInit+0x9c>)
 8000c5a:	f000 fc9b 	bl	8001594 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2107      	movs	r1, #7
 8000c62:	2026      	movs	r0, #38	@ 0x26
 8000c64:	f000 fbda 	bl	800141c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c68:	2026      	movs	r0, #38	@ 0x26
 8000c6a:	f000 fbf3 	bl	8001454 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c6e:	bf00      	nop
 8000c70:	3728      	adds	r7, #40	@ 0x28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40004400 	.word	0x40004400
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020000 	.word	0x40020000

08000c84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08e      	sub	sp, #56	@ 0x38
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	4b33      	ldr	r3, [pc, #204]	@ (8000d68 <HAL_InitTick+0xe4>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9c:	4a32      	ldr	r2, [pc, #200]	@ (8000d68 <HAL_InitTick+0xe4>)
 8000c9e:	f043 0310 	orr.w	r3, r3, #16
 8000ca2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca4:	4b30      	ldr	r3, [pc, #192]	@ (8000d68 <HAL_InitTick+0xe4>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca8:	f003 0310 	and.w	r3, r3, #16
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cb0:	f107 0210 	add.w	r2, r7, #16
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4611      	mov	r1, r2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 fab8 	bl	8002230 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cc0:	6a3b      	ldr	r3, [r7, #32]
 8000cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d103      	bne.n	8000cd2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cca:	f001 fa89 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
 8000cce:	6378      	str	r0, [r7, #52]	@ 0x34
 8000cd0:	e004      	b.n	8000cdc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cd2:	f001 fa85 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cde:	4a23      	ldr	r2, [pc, #140]	@ (8000d6c <HAL_InitTick+0xe8>)
 8000ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce4:	0c9b      	lsrs	r3, r3, #18
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cea:	4b21      	ldr	r3, [pc, #132]	@ (8000d70 <HAL_InitTick+0xec>)
 8000cec:	4a21      	ldr	r2, [pc, #132]	@ (8000d74 <HAL_InitTick+0xf0>)
 8000cee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d70 <HAL_InitTick+0xec>)
 8000cf2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cf6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d70 <HAL_InitTick+0xec>)
 8000cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cfc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000d70 <HAL_InitTick+0xec>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d04:	4b1a      	ldr	r3, [pc, #104]	@ (8000d70 <HAL_InitTick+0xec>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0a:	4b19      	ldr	r3, [pc, #100]	@ (8000d70 <HAL_InitTick+0xec>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d10:	4817      	ldr	r0, [pc, #92]	@ (8000d70 <HAL_InitTick+0xec>)
 8000d12:	f001 fca7 	bl	8002664 <HAL_TIM_Base_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000d1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d11b      	bne.n	8000d5c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d24:	4812      	ldr	r0, [pc, #72]	@ (8000d70 <HAL_InitTick+0xec>)
 8000d26:	f001 fcf7 	bl	8002718 <HAL_TIM_Base_Start_IT>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000d30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d111      	bne.n	8000d5c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d38:	2036      	movs	r0, #54	@ 0x36
 8000d3a:	f000 fb8b 	bl	8001454 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b0f      	cmp	r3, #15
 8000d42:	d808      	bhi.n	8000d56 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d44:	2200      	movs	r2, #0
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	2036      	movs	r0, #54	@ 0x36
 8000d4a:	f000 fb67 	bl	800141c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d78 <HAL_InitTick+0xf4>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	e002      	b.n	8000d5c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3738      	adds	r7, #56	@ 0x38
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	431bde83 	.word	0x431bde83
 8000d70:	200000bc 	.word	0x200000bc
 8000d74:	40001000 	.word	0x40001000
 8000d78:	20000004 	.word	0x20000004

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <NMI_Handler+0x4>

08000d84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <HardFault_Handler+0x4>

08000d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <MemManage_Handler+0x4>

08000d94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000db8:	4802      	ldr	r0, [pc, #8]	@ (8000dc4 <USART2_IRQHandler+0x10>)
 8000dba:	f001 fff5 	bl	8002da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000050 	.word	0x20000050

08000dc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dcc:	4802      	ldr	r0, [pc, #8]	@ (8000dd8 <TIM6_DAC_IRQHandler+0x10>)
 8000dce:	f001 fd13 	bl	80027f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200000bc 	.word	0x200000bc

08000ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <SystemInit+0x20>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000de6:	4a05      	ldr	r2, [pc, #20]	@ (8000dfc <SystemInit+0x20>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <Menu_Task_Handler>:
 */

#include "main.h"

void Menu_Task_Handler(void *param)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	@ 0x28
 8000e04:	af02      	add	r7, sp, #8
 8000e06:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	uint32_t cmd_addr;
	command_t *cmd;
	uint8_t val;
	const char *print_msg = "\r\n=======menu======\r\n"
 8000e08:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec0 <Menu_Task_Handler+0xc0>)
 8000e0a:	60fb      	str	r3, [r7, #12]
							"LED Effect         :0\r\n"
							"Date and Time      :1\r\n"
							"Exit               :2\r\n"
							"Enter Your Choice  :";
	const char *invalid_msg = "Invalid Input\r\n";
 8000e0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec4 <Menu_Task_Handler+0xc4>)
 8000e0e:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		xQueueSend(print_queue, &print_msg, 0);
 8000e10:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec8 <Menu_Task_Handler+0xc8>)
 8000e12:	6818      	ldr	r0, [r3, #0]
 8000e14:	f107 010c 	add.w	r1, r7, #12
 8000e18:	2300      	movs	r3, #0
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f003 f8ae 	bl	8003f7c <xQueueGenericSend>
		status = xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e28:	9200      	str	r2, [sp, #0]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f004 fd26 	bl	8005880 <xTaskGenericNotifyWait>
 8000e34:	61f8      	str	r0, [r7, #28]
		cmd = (command_t *)cmd_addr;
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	61bb      	str	r3, [r7, #24]
		if(status == pdTRUE)
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d1e7      	bne.n	8000e10 <Menu_Task_Handler+0x10>
		{
			if(cmd->len == 1)
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	7a9b      	ldrb	r3, [r3, #10]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d130      	bne.n	8000eaa <Menu_Task_Handler+0xaa>
			{
				val = cmd->value[0] - 48;
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	3b30      	subs	r3, #48	@ 0x30
 8000e4e:	75fb      	strb	r3, [r7, #23]
				switch(val)
 8000e50:	7dfb      	ldrb	r3, [r7, #23]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d032      	beq.n	8000ebc <Menu_Task_Handler+0xbc>
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	dc1e      	bgt.n	8000e98 <Menu_Task_Handler+0x98>
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d002      	beq.n	8000e64 <Menu_Task_Handler+0x64>
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d00d      	beq.n	8000e7e <Menu_Task_Handler+0x7e>
 8000e62:	e019      	b.n	8000e98 <Menu_Task_Handler+0x98>
				{
					case 0:
						e_state = led_effect;
 8000e64:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <Menu_Task_Handler+0xcc>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]
						xTaskNotify(LED_Task_Handle, 0, eNoAction);
 8000e6a:	4b19      	ldr	r3, [pc, #100]	@ (8000ed0 <Menu_Task_Handler+0xd0>)
 8000e6c:	6818      	ldr	r0, [r3, #0]
 8000e6e:	2300      	movs	r3, #0
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	2300      	movs	r3, #0
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	f004 fd82 	bl	8005980 <xTaskGenericNotify>
						break;
 8000e7c:	e01f      	b.n	8000ebe <Menu_Task_Handler+0xbe>
					case 1:
						e_state = rtc_report;
 8000e7e:	4b13      	ldr	r3, [pc, #76]	@ (8000ecc <Menu_Task_Handler+0xcc>)
 8000e80:	2205      	movs	r2, #5
 8000e82:	701a      	strb	r2, [r3, #0]
						xTaskNotify(RTC_Task_Handle, 0, eNoAction);
 8000e84:	4b13      	ldr	r3, [pc, #76]	@ (8000ed4 <Menu_Task_Handler+0xd4>)
 8000e86:	6818      	ldr	r0, [r3, #0]
 8000e88:	2300      	movs	r3, #0
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	f004 fd75 	bl	8005980 <xTaskGenericNotify>
						break;
 8000e96:	e012      	b.n	8000ebe <Menu_Task_Handler+0xbe>
					case 2:
						break;
					default:
						xQueueSend(print_queue,(void *)&invalid_msg, 0);
 8000e98:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec8 <Menu_Task_Handler+0xc8>)
 8000e9a:	6818      	ldr	r0, [r3, #0]
 8000e9c:	f107 0108 	add.w	r1, r7, #8
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f003 f86a 	bl	8003f7c <xQueueGenericSend>
						continue;
 8000ea8:	e009      	b.n	8000ebe <Menu_Task_Handler+0xbe>
				}
			}
			else
			{
				xQueueSend(print_queue,(void *)&invalid_msg, 0);
 8000eaa:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <Menu_Task_Handler+0xc8>)
 8000eac:	6818      	ldr	r0, [r3, #0]
 8000eae:	f107 0108 	add.w	r1, r7, #8
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f003 f861 	bl	8003f7c <xQueueGenericSend>
 8000eba:	e7a9      	b.n	8000e10 <Menu_Task_Handler+0x10>
						break;
 8000ebc:	bf00      	nop
		xQueueSend(print_queue, &print_msg, 0);
 8000ebe:	e7a7      	b.n	8000e10 <Menu_Task_Handler+0x10>
 8000ec0:	08006e2c 	.word	0x08006e2c
 8000ec4:	08006e9c 	.word	0x08006e9c
 8000ec8:	200000b4 	.word	0x200000b4
 8000ecc:	200000b8 	.word	0x200000b8
 8000ed0:	2000009c 	.word	0x2000009c
 8000ed4:	200000a0 	.word	0x200000a0

08000ed8 <LED_Task_Handler>:
			}
		}
	}
}
void LED_Task_Handler(void *param)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	@ 0x28
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	6078      	str	r0, [r7, #4]
	uint32_t cmd_ptr;
	BaseType_t status;
	command_t *cmd;
	const char *invalid_msg = "Invalid Input\r\n";
 8000ee0:	4b59      	ldr	r3, [pc, #356]	@ (8001048 <LED_Task_Handler+0x170>)
 8000ee2:	613b      	str	r3, [r7, #16]
	const char *print_msg = "\r\n========menu========\r\n"
 8000ee4:	4b59      	ldr	r3, [pc, #356]	@ (800104c <LED_Task_Handler+0x174>)
 8000ee6:	60fb      	str	r3, [r7, #12]
								"none, e1, e2, e3\r\n"
								"Enter Your Choice   :";
	while(1)
	{
		status = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2300      	movs	r3, #0
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f004 fcc3 	bl	8005880 <xTaskGenericNotifyWait>
 8000efa:	61f8      	str	r0, [r7, #28]
		if(status == pdTRUE)
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d1f2      	bne.n	8000ee8 <LED_Task_Handler+0x10>
		{
			xQueueSend(print_queue, &print_msg, 0);
 8000f02:	4b53      	ldr	r3, [pc, #332]	@ (8001050 <LED_Task_Handler+0x178>)
 8000f04:	6818      	ldr	r0, [r3, #0]
 8000f06:	f107 010c 	add.w	r1, r7, #12
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f003 f835 	bl	8003f7c <xQueueGenericSend>
			status = xTaskNotifyWait(0, 0, &cmd_ptr, portMAX_DELAY);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f1a:	9200      	str	r2, [sp, #0]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2000      	movs	r0, #0
 8000f22:	f004 fcad 	bl	8005880 <xTaskGenericNotifyWait>
 8000f26:	61f8      	str	r0, [r7, #28]
			cmd = (command_t *)cmd_ptr;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	61bb      	str	r3, [r7, #24]
			if(cmd->len <= 4)
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	7a9b      	ldrb	r3, [r3, #10]
 8000f30:	2b04      	cmp	r3, #4
 8000f32:	d874      	bhi.n	800101e <LED_Task_Handler+0x146>
			{
				if(!strcmp((char *)cmd->value, "none"))
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	4947      	ldr	r1, [pc, #284]	@ (8001054 <LED_Task_Handler+0x17c>)
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff f951 	bl	80001e0 <strcmp>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d112      	bne.n	8000f6a <LED_Task_Handler+0x92>
				{
					HAL_GPIO_WritePin(GPIOD, RED_LED, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f4a:	4843      	ldr	r0, [pc, #268]	@ (8001058 <LED_Task_Handler+0x180>)
 8000f4c:	f000 fcbe 	bl	80018cc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f56:	4840      	ldr	r0, [pc, #256]	@ (8001058 <LED_Task_Handler+0x180>)
 8000f58:	f000 fcb8 	bl	80018cc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, BLUE_LED, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f62:	483d      	ldr	r0, [pc, #244]	@ (8001058 <LED_Task_Handler+0x180>)
 8000f64:	f000 fcb2 	bl	80018cc <HAL_GPIO_WritePin>
 8000f68:	e061      	b.n	800102e <LED_Task_Handler+0x156>
				}
				else if(!strcmp((char *)cmd->value, "e1"))
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	493b      	ldr	r1, [pc, #236]	@ (800105c <LED_Task_Handler+0x184>)
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff f936 	bl	80001e0 <strcmp>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d112      	bne.n	8000fa0 <LED_Task_Handler+0xc8>
				{
					HAL_GPIO_WritePin(GPIOD, RED_LED, GPIO_PIN_SET);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f80:	4835      	ldr	r0, [pc, #212]	@ (8001058 <LED_Task_Handler+0x180>)
 8000f82:	f000 fca3 	bl	80018cc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f8c:	4832      	ldr	r0, [pc, #200]	@ (8001058 <LED_Task_Handler+0x180>)
 8000f8e:	f000 fc9d 	bl	80018cc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, BLUE_LED, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f98:	482f      	ldr	r0, [pc, #188]	@ (8001058 <LED_Task_Handler+0x180>)
 8000f9a:	f000 fc97 	bl	80018cc <HAL_GPIO_WritePin>
 8000f9e:	e046      	b.n	800102e <LED_Task_Handler+0x156>
					//HAL_GPIO_WritePin(GPIOD, YELLOW_LED, GPIO_PIN_RESET);
				}
				else if(!strcmp((char *)cmd->value, "e2"))
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	492f      	ldr	r1, [pc, #188]	@ (8001060 <LED_Task_Handler+0x188>)
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff f91b 	bl	80001e0 <strcmp>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d112      	bne.n	8000fd6 <LED_Task_Handler+0xfe>
				{
					HAL_GPIO_WritePin(GPIOD, RED_LED, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fb6:	4828      	ldr	r0, [pc, #160]	@ (8001058 <LED_Task_Handler+0x180>)
 8000fb8:	f000 fc88 	bl	80018cc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fc2:	4825      	ldr	r0, [pc, #148]	@ (8001058 <LED_Task_Handler+0x180>)
 8000fc4:	f000 fc82 	bl	80018cc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, BLUE_LED, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fce:	4822      	ldr	r0, [pc, #136]	@ (8001058 <LED_Task_Handler+0x180>)
 8000fd0:	f000 fc7c 	bl	80018cc <HAL_GPIO_WritePin>
 8000fd4:	e02b      	b.n	800102e <LED_Task_Handler+0x156>
					//HAL_GPIO_WritePin(GPIOD, YELLOW_LED, GPIO_PIN_RESET);
				}
				else if(!strcmp((char *)cmd->value, "e3"))
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	4922      	ldr	r1, [pc, #136]	@ (8001064 <LED_Task_Handler+0x18c>)
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff f900 	bl	80001e0 <strcmp>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d112      	bne.n	800100c <LED_Task_Handler+0x134>
				{
					HAL_GPIO_WritePin(GPIOD, RED_LED, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fec:	481a      	ldr	r0, [pc, #104]	@ (8001058 <LED_Task_Handler+0x180>)
 8000fee:	f000 fc6d 	bl	80018cc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, GREEN_LED, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ff8:	4817      	ldr	r0, [pc, #92]	@ (8001058 <LED_Task_Handler+0x180>)
 8000ffa:	f000 fc67 	bl	80018cc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, BLUE_LED, GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001004:	4814      	ldr	r0, [pc, #80]	@ (8001058 <LED_Task_Handler+0x180>)
 8001006:	f000 fc61 	bl	80018cc <HAL_GPIO_WritePin>
 800100a:	e010      	b.n	800102e <LED_Task_Handler+0x156>
					//HAL_GPIO_WritePin(GPIOD, YELLOW_LED, GPIO_PIN_RESET);
				}
				else
				{
					xQueueSend(print_queue,(void *)&invalid_msg, 0);
 800100c:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <LED_Task_Handler+0x178>)
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	f107 0110 	add.w	r1, r7, #16
 8001014:	2300      	movs	r3, #0
 8001016:	2200      	movs	r2, #0
 8001018:	f002 ffb0 	bl	8003f7c <xQueueGenericSend>
 800101c:	e007      	b.n	800102e <LED_Task_Handler+0x156>
				}
			}
			else
			{
				xQueueSend(print_queue,(void *)&invalid_msg, 0);
 800101e:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <LED_Task_Handler+0x178>)
 8001020:	6818      	ldr	r0, [r3, #0]
 8001022:	f107 0110 	add.w	r1, r7, #16
 8001026:	2300      	movs	r3, #0
 8001028:	2200      	movs	r2, #0
 800102a:	f002 ffa7 	bl	8003f7c <xQueueGenericSend>
			}
			e_state = main_menu;
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <LED_Task_Handler+0x190>)
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
			xTaskNotify(Menu_Task_Handle, 0, eNoAction);
 8001034:	4b0d      	ldr	r3, [pc, #52]	@ (800106c <LED_Task_Handler+0x194>)
 8001036:	6818      	ldr	r0, [r3, #0]
 8001038:	2300      	movs	r3, #0
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2300      	movs	r3, #0
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	f004 fc9d 	bl	8005980 <xTaskGenericNotify>
		status = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001046:	e74f      	b.n	8000ee8 <LED_Task_Handler+0x10>
 8001048:	08006e9c 	.word	0x08006e9c
 800104c:	08006eac 	.word	0x08006eac
 8001050:	200000b4 	.word	0x200000b4
 8001054:	08006eec 	.word	0x08006eec
 8001058:	40020c00 	.word	0x40020c00
 800105c:	08006ef4 	.word	0x08006ef4
 8001060:	08006ef8 	.word	0x08006ef8
 8001064:	08006efc 	.word	0x08006efc
 8001068:	200000b8 	.word	0x200000b8
 800106c:	20000098 	.word	0x20000098

08001070 <RTC_Task_Handler>:
		}
	}
}
void RTC_Task_Handler(void *param)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	while(1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <RTC_Task_Handler+0x8>

0800107c <Print_Task_Handler>:
	{

	}
}
void Print_Task_Handler(void *param)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	uint32_t *msg;
	while(1)
	{
		xQueueReceive(print_queue, &msg, portMAX_DELAY);
 8001084:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <Print_Task_Handler+0x38>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f107 010c 	add.w	r1, r7, #12
 800108c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001090:	4618      	mov	r0, r3
 8001092:	f003 f923 	bl	80042dc <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen((char *)msg), HAL_MAX_DELAY);
 8001096:	68fc      	ldr	r4, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff f898 	bl	80001d0 <strlen>
 80010a0:	4603      	mov	r3, r0
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010a8:	4621      	mov	r1, r4
 80010aa:	4803      	ldr	r0, [pc, #12]	@ (80010b8 <Print_Task_Handler+0x3c>)
 80010ac:	f001 fdcc 	bl	8002c48 <HAL_UART_Transmit>
		xQueueReceive(print_queue, &msg, portMAX_DELAY);
 80010b0:	bf00      	nop
 80010b2:	e7e7      	b.n	8001084 <Print_Task_Handler+0x8>
 80010b4:	200000b4 	.word	0x200000b4
 80010b8:	20000050 	.word	0x20000050

080010bc <Command_Task_Handler>:
	}
}
void Command_Task_Handler(void *param)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af02      	add	r7, sp, #8
 80010c2:	6078      	str	r0, [r7, #4]
	command_t cmd;
	BaseType_t status;
	while(1)
	{
		status = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2300      	movs	r3, #0
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	2000      	movs	r0, #0
 80010d2:	f004 fbd5 	bl	8005880 <xTaskGenericNotifyWait>
 80010d6:	6178      	str	r0, [r7, #20]
		if(status == pdTRUE)
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d1f2      	bne.n	80010c4 <Command_Task_Handler+0x8>
		{
			Process_User_Cmd(&cmd);
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f830 	bl	8001148 <Process_User_Cmd>
		status = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80010e8:	e7ec      	b.n	80010c4 <Command_Task_Handler+0x8>
	...

080010ec <Extract_Cmd>:
		}
	}
}
int Extract_Cmd(command_t *cmd_ptr)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	uint8_t item;
	uint8_t i = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	75fb      	strb	r3, [r7, #23]
	BaseType_t status;
	//check if queue is empty
	//if empty return 1 else return 0

	while(item != '\r')
 80010f8:	e012      	b.n	8001120 <Extract_Cmd+0x34>
	{
		status = xQueueReceive(input_data_queue ,(void *)&item, 0);
 80010fa:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <Extract_Cmd+0x58>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f107 010f 	add.w	r1, r7, #15
 8001102:	2200      	movs	r2, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f003 f8e9 	bl	80042dc <xQueueReceive>
 800110a:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE)
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d106      	bne.n	8001120 <Extract_Cmd+0x34>
		{
			cmd_ptr->value[i++] = item;
 8001112:	7dfb      	ldrb	r3, [r7, #23]
 8001114:	1c5a      	adds	r2, r3, #1
 8001116:	75fa      	strb	r2, [r7, #23]
 8001118:	461a      	mov	r2, r3
 800111a:	7bf9      	ldrb	r1, [r7, #15]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	5499      	strb	r1, [r3, r2]
	while(item != '\r')
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	2b0d      	cmp	r3, #13
 8001124:	d1e9      	bne.n	80010fa <Extract_Cmd+0xe>
		}
	}
	cmd_ptr->value[i-1] = '\0';
 8001126:	7dfb      	ldrb	r3, [r7, #23]
 8001128:	3b01      	subs	r3, #1
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	2100      	movs	r1, #0
 800112e:	54d1      	strb	r1, [r2, r3]
	cmd_ptr->len = i-1;
 8001130:	7dfb      	ldrb	r3, [r7, #23]
 8001132:	3b01      	subs	r3, #1
 8001134:	b2da      	uxtb	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	729a      	strb	r2, [r3, #10]
	return 0;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200000b0 	.word	0x200000b0

08001148 <Process_User_Cmd>:

void Process_User_Cmd(command_t *cmd_ptr)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af02      	add	r7, sp, #8
 800114e:	6078      	str	r0, [r7, #4]
	Extract_Cmd(cmd_ptr);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ffcb 	bl	80010ec <Extract_Cmd>
	switch(e_state)
 8001156:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <Process_User_Cmd+0x7c>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b05      	cmp	r3, #5
 800115c:	d82d      	bhi.n	80011ba <Process_User_Cmd+0x72>
 800115e:	a201      	add	r2, pc, #4	@ (adr r2, 8001164 <Process_User_Cmd+0x1c>)
 8001160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001164:	0800117d 	.word	0x0800117d
 8001168:	08001191 	.word	0x08001191
 800116c:	080011b9 	.word	0x080011b9
 8001170:	080011b9 	.word	0x080011b9
 8001174:	080011b9 	.word	0x080011b9
 8001178:	080011a5 	.word	0x080011a5
	{
		case main_menu:
			xTaskNotify(Menu_Task_Handle, (uint32_t)cmd_ptr, eSetValueWithOverwrite);
 800117c:	4b12      	ldr	r3, [pc, #72]	@ (80011c8 <Process_User_Cmd+0x80>)
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	2300      	movs	r3, #0
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2303      	movs	r3, #3
 8001188:	2100      	movs	r1, #0
 800118a:	f004 fbf9 	bl	8005980 <xTaskGenericNotify>
			break;
 800118e:	e014      	b.n	80011ba <Process_User_Cmd+0x72>
		case led_effect:
			xTaskNotify(LED_Task_Handle, (uint32_t)cmd_ptr, eSetValueWithOverwrite);
 8001190:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <Process_User_Cmd+0x84>)
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	2300      	movs	r3, #0
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2303      	movs	r3, #3
 800119c:	2100      	movs	r1, #0
 800119e:	f004 fbef 	bl	8005980 <xTaskGenericNotify>
			break;
 80011a2:	e00a      	b.n	80011ba <Process_User_Cmd+0x72>
		case rtc_time_config:
			break;
		case rtc_date_config:
			break;
		case rtc_report:
			xTaskNotify(RTC_Task_Handle, (uint32_t)cmd_ptr, eSetValueWithOverwrite);
 80011a4:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <Process_User_Cmd+0x88>)
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	2300      	movs	r3, #0
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2303      	movs	r3, #3
 80011b0:	2100      	movs	r1, #0
 80011b2:	f004 fbe5 	bl	8005980 <xTaskGenericNotify>
			break;
 80011b6:	e000      	b.n	80011ba <Process_User_Cmd+0x72>
			break;
 80011b8:	bf00      	nop
	}
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200000b8 	.word	0x200000b8
 80011c8:	20000098 	.word	0x20000098
 80011cc:	2000009c 	.word	0x2000009c
 80011d0:	200000a0 	.word	0x200000a0

080011d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800120c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011d8:	f7ff fe00 	bl	8000ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011dc:	480c      	ldr	r0, [pc, #48]	@ (8001210 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011de:	490d      	ldr	r1, [pc, #52]	@ (8001214 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001218 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001220 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001202:	f005 fdb7 	bl	8006d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001206:	f7ff f96d 	bl	80004e4 <main>
  bx  lr    
 800120a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800120c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001218:	08006f40 	.word	0x08006f40
  ldr r2, =_sbss
 800121c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001220:	20012eb0 	.word	0x20012eb0

08001224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC_IRQHandler>
	...

08001228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800122c:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0d      	ldr	r2, [pc, #52]	@ (8001268 <HAL_Init+0x40>)
 8001232:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001238:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0a      	ldr	r2, [pc, #40]	@ (8001268 <HAL_Init+0x40>)
 800123e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a07      	ldr	r2, [pc, #28]	@ (8001268 <HAL_Init+0x40>)
 800124a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800124e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f8d8 	bl	8001406 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001256:	2000      	movs	r0, #0
 8001258:	f7ff fd14 	bl	8000c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800125c:	f7ff fc70 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023c00 	.word	0x40023c00

0800126c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <HAL_IncTick+0x20>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <HAL_IncTick+0x24>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
 800127c:	4a04      	ldr	r2, [pc, #16]	@ (8001290 <HAL_IncTick+0x24>)
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000008 	.word	0x20000008
 8001290:	20000104 	.word	0x20000104

08001294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return uwTick;
 8001298:	4b03      	ldr	r3, [pc, #12]	@ (80012a8 <HAL_GetTick+0x14>)
 800129a:	681b      	ldr	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000104 	.word	0x20000104

080012ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	@ (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f8:	4b04      	ldr	r3, [pc, #16]	@ (800130c <__NVIC_GetPriorityGrouping+0x18>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	f003 0307 	and.w	r3, r3, #7
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	db0b      	blt.n	800133a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f003 021f 	and.w	r2, r3, #31
 8001328:	4907      	ldr	r1, [pc, #28]	@ (8001348 <__NVIC_EnableIRQ+0x38>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	095b      	lsrs	r3, r3, #5
 8001330:	2001      	movs	r0, #1
 8001332:	fa00 f202 	lsl.w	r2, r0, r2
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000e100 	.word	0xe000e100

0800134c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	db0a      	blt.n	8001376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	b2da      	uxtb	r2, r3
 8001364:	490c      	ldr	r1, [pc, #48]	@ (8001398 <__NVIC_SetPriority+0x4c>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	0112      	lsls	r2, r2, #4
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	440b      	add	r3, r1
 8001370:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001374:	e00a      	b.n	800138c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4908      	ldr	r1, [pc, #32]	@ (800139c <__NVIC_SetPriority+0x50>)
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	3b04      	subs	r3, #4
 8001384:	0112      	lsls	r2, r2, #4
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	440b      	add	r3, r1
 800138a:	761a      	strb	r2, [r3, #24]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000e100 	.word	0xe000e100
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	@ 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f1c3 0307 	rsb	r3, r3, #7
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	bf28      	it	cs
 80013be:	2304      	movcs	r3, #4
 80013c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3304      	adds	r3, #4
 80013c6:	2b06      	cmp	r3, #6
 80013c8:	d902      	bls.n	80013d0 <NVIC_EncodePriority+0x30>
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3b03      	subs	r3, #3
 80013ce:	e000      	b.n	80013d2 <NVIC_EncodePriority+0x32>
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	401a      	ands	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa01 f303 	lsl.w	r3, r1, r3
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	4313      	orrs	r3, r2
         );
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3724      	adds	r7, #36	@ 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ff4c 	bl	80012ac <__NVIC_SetPriorityGrouping>
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
 8001428:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800142e:	f7ff ff61 	bl	80012f4 <__NVIC_GetPriorityGrouping>
 8001432:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	68b9      	ldr	r1, [r7, #8]
 8001438:	6978      	ldr	r0, [r7, #20]
 800143a:	f7ff ffb1 	bl	80013a0 <NVIC_EncodePriority>
 800143e:	4602      	mov	r2, r0
 8001440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ff80 	bl	800134c <__NVIC_SetPriority>
}
 800144c:	bf00      	nop
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ff54 	bl	8001310 <__NVIC_EnableIRQ>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800147e:	f7ff ff09 	bl	8001294 <HAL_GetTick>
 8001482:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d008      	beq.n	80014a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2280      	movs	r2, #128	@ 0x80
 8001494:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e052      	b.n	8001548 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 0216 	bic.w	r2, r2, #22
 80014b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	695a      	ldr	r2, [r3, #20]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d103      	bne.n	80014d2 <HAL_DMA_Abort+0x62>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d007      	beq.n	80014e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0208 	bic.w	r2, r2, #8
 80014e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0201 	bic.w	r2, r2, #1
 80014f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014f2:	e013      	b.n	800151c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014f4:	f7ff fece 	bl	8001294 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b05      	cmp	r3, #5
 8001500:	d90c      	bls.n	800151c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2220      	movs	r2, #32
 8001506:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2203      	movs	r2, #3
 800150c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e015      	b.n	8001548 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1e4      	bne.n	80014f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800152e:	223f      	movs	r2, #63	@ 0x3f
 8001530:	409a      	lsls	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d004      	beq.n	800156e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2280      	movs	r2, #128	@ 0x80
 8001568:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e00c      	b.n	8001588 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2205      	movs	r2, #5
 8001572:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0201 	bic.w	r2, r2, #1
 8001584:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001594:	b480      	push	{r7}
 8001596:	b089      	sub	sp, #36	@ 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
 80015ae:	e16b      	b.n	8001888 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015b0:	2201      	movs	r2, #1
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	f040 815a 	bne.w	8001882 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d005      	beq.n	80015e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d130      	bne.n	8001648 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	2203      	movs	r2, #3
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800161c:	2201      	movs	r2, #1
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	f003 0201 	and.w	r2, r3, #1
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	2b03      	cmp	r3, #3
 8001652:	d017      	beq.n	8001684 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	2203      	movs	r2, #3
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d123      	bne.n	80016d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	08da      	lsrs	r2, r3, #3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3208      	adds	r2, #8
 8001698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800169c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	220f      	movs	r2, #15
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	691a      	ldr	r2, [r3, #16]
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	08da      	lsrs	r2, r3, #3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3208      	adds	r2, #8
 80016d2:	69b9      	ldr	r1, [r7, #24]
 80016d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	2203      	movs	r2, #3
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0203 	and.w	r2, r3, #3
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 80b4 	beq.w	8001882 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	4b60      	ldr	r3, [pc, #384]	@ (80018a0 <HAL_GPIO_Init+0x30c>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001722:	4a5f      	ldr	r2, [pc, #380]	@ (80018a0 <HAL_GPIO_Init+0x30c>)
 8001724:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001728:	6453      	str	r3, [r2, #68]	@ 0x44
 800172a:	4b5d      	ldr	r3, [pc, #372]	@ (80018a0 <HAL_GPIO_Init+0x30c>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001736:	4a5b      	ldr	r2, [pc, #364]	@ (80018a4 <HAL_GPIO_Init+0x310>)
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	089b      	lsrs	r3, r3, #2
 800173c:	3302      	adds	r3, #2
 800173e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	220f      	movs	r2, #15
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a52      	ldr	r2, [pc, #328]	@ (80018a8 <HAL_GPIO_Init+0x314>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d02b      	beq.n	80017ba <HAL_GPIO_Init+0x226>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a51      	ldr	r2, [pc, #324]	@ (80018ac <HAL_GPIO_Init+0x318>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d025      	beq.n	80017b6 <HAL_GPIO_Init+0x222>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a50      	ldr	r2, [pc, #320]	@ (80018b0 <HAL_GPIO_Init+0x31c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d01f      	beq.n	80017b2 <HAL_GPIO_Init+0x21e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a4f      	ldr	r2, [pc, #316]	@ (80018b4 <HAL_GPIO_Init+0x320>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d019      	beq.n	80017ae <HAL_GPIO_Init+0x21a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a4e      	ldr	r2, [pc, #312]	@ (80018b8 <HAL_GPIO_Init+0x324>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d013      	beq.n	80017aa <HAL_GPIO_Init+0x216>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a4d      	ldr	r2, [pc, #308]	@ (80018bc <HAL_GPIO_Init+0x328>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d00d      	beq.n	80017a6 <HAL_GPIO_Init+0x212>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4c      	ldr	r2, [pc, #304]	@ (80018c0 <HAL_GPIO_Init+0x32c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d007      	beq.n	80017a2 <HAL_GPIO_Init+0x20e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4b      	ldr	r2, [pc, #300]	@ (80018c4 <HAL_GPIO_Init+0x330>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d101      	bne.n	800179e <HAL_GPIO_Init+0x20a>
 800179a:	2307      	movs	r3, #7
 800179c:	e00e      	b.n	80017bc <HAL_GPIO_Init+0x228>
 800179e:	2308      	movs	r3, #8
 80017a0:	e00c      	b.n	80017bc <HAL_GPIO_Init+0x228>
 80017a2:	2306      	movs	r3, #6
 80017a4:	e00a      	b.n	80017bc <HAL_GPIO_Init+0x228>
 80017a6:	2305      	movs	r3, #5
 80017a8:	e008      	b.n	80017bc <HAL_GPIO_Init+0x228>
 80017aa:	2304      	movs	r3, #4
 80017ac:	e006      	b.n	80017bc <HAL_GPIO_Init+0x228>
 80017ae:	2303      	movs	r3, #3
 80017b0:	e004      	b.n	80017bc <HAL_GPIO_Init+0x228>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e002      	b.n	80017bc <HAL_GPIO_Init+0x228>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <HAL_GPIO_Init+0x228>
 80017ba:	2300      	movs	r3, #0
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	f002 0203 	and.w	r2, r2, #3
 80017c2:	0092      	lsls	r2, r2, #2
 80017c4:	4093      	lsls	r3, r2
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017cc:	4935      	ldr	r1, [pc, #212]	@ (80018a4 <HAL_GPIO_Init+0x310>)
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	089b      	lsrs	r3, r3, #2
 80017d2:	3302      	adds	r3, #2
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017da:	4b3b      	ldr	r3, [pc, #236]	@ (80018c8 <HAL_GPIO_Init+0x334>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017fe:	4a32      	ldr	r2, [pc, #200]	@ (80018c8 <HAL_GPIO_Init+0x334>)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001804:	4b30      	ldr	r3, [pc, #192]	@ (80018c8 <HAL_GPIO_Init+0x334>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001828:	4a27      	ldr	r2, [pc, #156]	@ (80018c8 <HAL_GPIO_Init+0x334>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800182e:	4b26      	ldr	r3, [pc, #152]	@ (80018c8 <HAL_GPIO_Init+0x334>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001852:	4a1d      	ldr	r2, [pc, #116]	@ (80018c8 <HAL_GPIO_Init+0x334>)
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001858:	4b1b      	ldr	r3, [pc, #108]	@ (80018c8 <HAL_GPIO_Init+0x334>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800187c:	4a12      	ldr	r2, [pc, #72]	@ (80018c8 <HAL_GPIO_Init+0x334>)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3301      	adds	r3, #1
 8001886:	61fb      	str	r3, [r7, #28]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	2b0f      	cmp	r3, #15
 800188c:	f67f ae90 	bls.w	80015b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	3724      	adds	r7, #36	@ 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40013800 	.word	0x40013800
 80018a8:	40020000 	.word	0x40020000
 80018ac:	40020400 	.word	0x40020400
 80018b0:	40020800 	.word	0x40020800
 80018b4:	40020c00 	.word	0x40020c00
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40021400 	.word	0x40021400
 80018c0:	40021800 	.word	0x40021800
 80018c4:	40021c00 	.word	0x40021c00
 80018c8:	40013c00 	.word	0x40013c00

080018cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
 80018d8:	4613      	mov	r3, r2
 80018da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018dc:	787b      	ldrb	r3, [r7, #1]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e2:	887a      	ldrh	r2, [r7, #2]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018e8:	e003      	b.n	80018f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ea:	887b      	ldrh	r3, [r7, #2]
 80018ec:	041a      	lsls	r2, r3, #16
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	619a      	str	r2, [r3, #24]
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e267      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d075      	beq.n	8001a0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800191e:	4b88      	ldr	r3, [pc, #544]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 030c 	and.w	r3, r3, #12
 8001926:	2b04      	cmp	r3, #4
 8001928:	d00c      	beq.n	8001944 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800192a:	4b85      	ldr	r3, [pc, #532]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001932:	2b08      	cmp	r3, #8
 8001934:	d112      	bne.n	800195c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001936:	4b82      	ldr	r3, [pc, #520]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800193e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001942:	d10b      	bne.n	800195c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001944:	4b7e      	ldr	r3, [pc, #504]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d05b      	beq.n	8001a08 <HAL_RCC_OscConfig+0x108>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d157      	bne.n	8001a08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e242      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001964:	d106      	bne.n	8001974 <HAL_RCC_OscConfig+0x74>
 8001966:	4b76      	ldr	r3, [pc, #472]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a75      	ldr	r2, [pc, #468]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 800196c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	e01d      	b.n	80019b0 <HAL_RCC_OscConfig+0xb0>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800197c:	d10c      	bne.n	8001998 <HAL_RCC_OscConfig+0x98>
 800197e:	4b70      	ldr	r3, [pc, #448]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a6f      	ldr	r2, [pc, #444]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001984:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	4b6d      	ldr	r3, [pc, #436]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a6c      	ldr	r2, [pc, #432]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	e00b      	b.n	80019b0 <HAL_RCC_OscConfig+0xb0>
 8001998:	4b69      	ldr	r3, [pc, #420]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a68      	ldr	r2, [pc, #416]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 800199e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b66      	ldr	r3, [pc, #408]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a65      	ldr	r2, [pc, #404]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 80019aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d013      	beq.n	80019e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fc6c 	bl	8001294 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c0:	f7ff fc68 	bl	8001294 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	@ 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e207      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0xc0>
 80019de:	e014      	b.n	8001a0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff fc58 	bl	8001294 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e8:	f7ff fc54 	bl	8001294 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b64      	cmp	r3, #100	@ 0x64
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e1f3      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fa:	4b51      	ldr	r3, [pc, #324]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0xe8>
 8001a06:	e000      	b.n	8001a0a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d063      	beq.n	8001ade <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a16:	4b4a      	ldr	r3, [pc, #296]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00b      	beq.n	8001a3a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a22:	4b47      	ldr	r3, [pc, #284]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d11c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a2e:	4b44      	ldr	r3, [pc, #272]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d116      	bne.n	8001a68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3a:	4b41      	ldr	r3, [pc, #260]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d005      	beq.n	8001a52 <HAL_RCC_OscConfig+0x152>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d001      	beq.n	8001a52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e1c7      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a52:	4b3b      	ldr	r3, [pc, #236]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4937      	ldr	r1, [pc, #220]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a66:	e03a      	b.n	8001ade <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d020      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a70:	4b34      	ldr	r3, [pc, #208]	@ (8001b44 <HAL_RCC_OscConfig+0x244>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a76:	f7ff fc0d 	bl	8001294 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a7e:	f7ff fc09 	bl	8001294 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e1a8      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a90:	4b2b      	ldr	r3, [pc, #172]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9c:	4b28      	ldr	r3, [pc, #160]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	4925      	ldr	r1, [pc, #148]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	600b      	str	r3, [r1, #0]
 8001ab0:	e015      	b.n	8001ade <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ab2:	4b24      	ldr	r3, [pc, #144]	@ (8001b44 <HAL_RCC_OscConfig+0x244>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7ff fbec 	bl	8001294 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac0:	f7ff fbe8 	bl	8001294 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e187      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d036      	beq.n	8001b58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d016      	beq.n	8001b20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001af2:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <HAL_RCC_OscConfig+0x248>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af8:	f7ff fbcc 	bl	8001294 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b00:	f7ff fbc8 	bl	8001294 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e167      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b12:	4b0b      	ldr	r3, [pc, #44]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x200>
 8001b1e:	e01b      	b.n	8001b58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b20:	4b09      	ldr	r3, [pc, #36]	@ (8001b48 <HAL_RCC_OscConfig+0x248>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b26:	f7ff fbb5 	bl	8001294 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b2c:	e00e      	b.n	8001b4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b2e:	f7ff fbb1 	bl	8001294 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d907      	bls.n	8001b4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e150      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
 8001b40:	40023800 	.word	0x40023800
 8001b44:	42470000 	.word	0x42470000
 8001b48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b4c:	4b88      	ldr	r3, [pc, #544]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001b4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1ea      	bne.n	8001b2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 8097 	beq.w	8001c94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b6a:	4b81      	ldr	r3, [pc, #516]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10f      	bne.n	8001b96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	4b7d      	ldr	r3, [pc, #500]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	4a7c      	ldr	r2, [pc, #496]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b86:	4b7a      	ldr	r3, [pc, #488]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b92:	2301      	movs	r3, #1
 8001b94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b96:	4b77      	ldr	r3, [pc, #476]	@ (8001d74 <HAL_RCC_OscConfig+0x474>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d118      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ba2:	4b74      	ldr	r3, [pc, #464]	@ (8001d74 <HAL_RCC_OscConfig+0x474>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a73      	ldr	r2, [pc, #460]	@ (8001d74 <HAL_RCC_OscConfig+0x474>)
 8001ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bae:	f7ff fb71 	bl	8001294 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb6:	f7ff fb6d 	bl	8001294 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e10c      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc8:	4b6a      	ldr	r3, [pc, #424]	@ (8001d74 <HAL_RCC_OscConfig+0x474>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d106      	bne.n	8001bea <HAL_RCC_OscConfig+0x2ea>
 8001bdc:	4b64      	ldr	r3, [pc, #400]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be0:	4a63      	ldr	r2, [pc, #396]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001be8:	e01c      	b.n	8001c24 <HAL_RCC_OscConfig+0x324>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b05      	cmp	r3, #5
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x30c>
 8001bf2:	4b5f      	ldr	r3, [pc, #380]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bf6:	4a5e      	ldr	r2, [pc, #376]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001bf8:	f043 0304 	orr.w	r3, r3, #4
 8001bfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bfe:	4b5c      	ldr	r3, [pc, #368]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c02:	4a5b      	ldr	r2, [pc, #364]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c0a:	e00b      	b.n	8001c24 <HAL_RCC_OscConfig+0x324>
 8001c0c:	4b58      	ldr	r3, [pc, #352]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c10:	4a57      	ldr	r2, [pc, #348]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001c12:	f023 0301 	bic.w	r3, r3, #1
 8001c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c18:	4b55      	ldr	r3, [pc, #340]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c1c:	4a54      	ldr	r2, [pc, #336]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001c1e:	f023 0304 	bic.w	r3, r3, #4
 8001c22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d015      	beq.n	8001c58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2c:	f7ff fb32 	bl	8001294 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c32:	e00a      	b.n	8001c4a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c34:	f7ff fb2e 	bl	8001294 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e0cb      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4a:	4b49      	ldr	r3, [pc, #292]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0ee      	beq.n	8001c34 <HAL_RCC_OscConfig+0x334>
 8001c56:	e014      	b.n	8001c82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c58:	f7ff fb1c 	bl	8001294 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5e:	e00a      	b.n	8001c76 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c60:	f7ff fb18 	bl	8001294 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e0b5      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c76:	4b3e      	ldr	r3, [pc, #248]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1ee      	bne.n	8001c60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c82:	7dfb      	ldrb	r3, [r7, #23]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d105      	bne.n	8001c94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c88:	4b39      	ldr	r3, [pc, #228]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8c:	4a38      	ldr	r2, [pc, #224]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001c8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 80a1 	beq.w	8001de0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c9e:	4b34      	ldr	r3, [pc, #208]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d05c      	beq.n	8001d64 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d141      	bne.n	8001d36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb2:	4b31      	ldr	r3, [pc, #196]	@ (8001d78 <HAL_RCC_OscConfig+0x478>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff faec 	bl	8001294 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7ff fae8 	bl	8001294 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e087      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd2:	4b27      	ldr	r3, [pc, #156]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69da      	ldr	r2, [r3, #28]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cec:	019b      	lsls	r3, r3, #6
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf4:	085b      	lsrs	r3, r3, #1
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	041b      	lsls	r3, r3, #16
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d00:	061b      	lsls	r3, r3, #24
 8001d02:	491b      	ldr	r1, [pc, #108]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d08:	4b1b      	ldr	r3, [pc, #108]	@ (8001d78 <HAL_RCC_OscConfig+0x478>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7ff fac1 	bl	8001294 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d16:	f7ff fabd 	bl	8001294 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e05c      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d28:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0f0      	beq.n	8001d16 <HAL_RCC_OscConfig+0x416>
 8001d34:	e054      	b.n	8001de0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d36:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <HAL_RCC_OscConfig+0x478>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7ff faaa 	bl	8001294 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d44:	f7ff faa6 	bl	8001294 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e045      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x444>
 8001d62:	e03d      	b.n	8001de0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d107      	bne.n	8001d7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e038      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40007000 	.word	0x40007000
 8001d78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dec <HAL_RCC_OscConfig+0x4ec>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d028      	beq.n	8001ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d121      	bne.n	8001ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d11a      	bne.n	8001ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001dac:	4013      	ands	r3, r2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001db2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d111      	bne.n	8001ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc2:	085b      	lsrs	r3, r3, #1
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d107      	bne.n	8001ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d001      	beq.n	8001de0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800

08001df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0cc      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e04:	4b68      	ldr	r3, [pc, #416]	@ (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d90c      	bls.n	8001e2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e12:	4b65      	ldr	r3, [pc, #404]	@ (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1a:	4b63      	ldr	r3, [pc, #396]	@ (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d001      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0b8      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d020      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d005      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e44:	4b59      	ldr	r3, [pc, #356]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	4a58      	ldr	r2, [pc, #352]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e5c:	4b53      	ldr	r3, [pc, #332]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	4a52      	ldr	r2, [pc, #328]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e68:	4b50      	ldr	r3, [pc, #320]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	494d      	ldr	r1, [pc, #308]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d044      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d107      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8e:	4b47      	ldr	r3, [pc, #284]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d119      	bne.n	8001ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e07f      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d003      	beq.n	8001eae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eae:	4b3f      	ldr	r3, [pc, #252]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d109      	bne.n	8001ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e06f      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e067      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ece:	4b37      	ldr	r3, [pc, #220]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f023 0203 	bic.w	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4934      	ldr	r1, [pc, #208]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee0:	f7ff f9d8 	bl	8001294 <HAL_GetTick>
 8001ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee8:	f7ff f9d4 	bl	8001294 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e04f      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	4b2b      	ldr	r3, [pc, #172]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 020c 	and.w	r2, r3, #12
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d1eb      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f10:	4b25      	ldr	r3, [pc, #148]	@ (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d20c      	bcs.n	8001f38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b22      	ldr	r3, [pc, #136]	@ (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f26:	4b20      	ldr	r3, [pc, #128]	@ (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e032      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d008      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f44:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	4916      	ldr	r1, [pc, #88]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d009      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f62:	4b12      	ldr	r3, [pc, #72]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	490e      	ldr	r1, [pc, #56]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f76:	f000 f821 	bl	8001fbc <HAL_RCC_GetSysClockFreq>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	490a      	ldr	r1, [pc, #40]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f88:	5ccb      	ldrb	r3, [r1, r3]
 8001f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f8e:	4a09      	ldr	r2, [pc, #36]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001f92:	4b09      	ldr	r3, [pc, #36]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fe74 	bl	8000c84 <HAL_InitTick>

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023c00 	.word	0x40023c00
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	08006f18 	.word	0x08006f18
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	20000004 	.word	0x20000004

08001fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fc0:	b094      	sub	sp, #80	@ 0x50
 8001fc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fd4:	4b79      	ldr	r3, [pc, #484]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x200>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 030c 	and.w	r3, r3, #12
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d00d      	beq.n	8001ffc <HAL_RCC_GetSysClockFreq+0x40>
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	f200 80e1 	bhi.w	80021a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x34>
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d003      	beq.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001fee:	e0db      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ff0:	4b73      	ldr	r3, [pc, #460]	@ (80021c0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ff2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ff4:	e0db      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ff6:	4b73      	ldr	r3, [pc, #460]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ffa:	e0d8      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ffc:	4b6f      	ldr	r3, [pc, #444]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x200>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002004:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002006:	4b6d      	ldr	r3, [pc, #436]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d063      	beq.n	80020da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002012:	4b6a      	ldr	r3, [pc, #424]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	099b      	lsrs	r3, r3, #6
 8002018:	2200      	movs	r2, #0
 800201a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800201c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800201e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002024:	633b      	str	r3, [r7, #48]	@ 0x30
 8002026:	2300      	movs	r3, #0
 8002028:	637b      	str	r3, [r7, #52]	@ 0x34
 800202a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800202e:	4622      	mov	r2, r4
 8002030:	462b      	mov	r3, r5
 8002032:	f04f 0000 	mov.w	r0, #0
 8002036:	f04f 0100 	mov.w	r1, #0
 800203a:	0159      	lsls	r1, r3, #5
 800203c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002040:	0150      	lsls	r0, r2, #5
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4621      	mov	r1, r4
 8002048:	1a51      	subs	r1, r2, r1
 800204a:	6139      	str	r1, [r7, #16]
 800204c:	4629      	mov	r1, r5
 800204e:	eb63 0301 	sbc.w	r3, r3, r1
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	f04f 0300 	mov.w	r3, #0
 800205c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002060:	4659      	mov	r1, fp
 8002062:	018b      	lsls	r3, r1, #6
 8002064:	4651      	mov	r1, sl
 8002066:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800206a:	4651      	mov	r1, sl
 800206c:	018a      	lsls	r2, r1, #6
 800206e:	4651      	mov	r1, sl
 8002070:	ebb2 0801 	subs.w	r8, r2, r1
 8002074:	4659      	mov	r1, fp
 8002076:	eb63 0901 	sbc.w	r9, r3, r1
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800208a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800208e:	4690      	mov	r8, r2
 8002090:	4699      	mov	r9, r3
 8002092:	4623      	mov	r3, r4
 8002094:	eb18 0303 	adds.w	r3, r8, r3
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	462b      	mov	r3, r5
 800209c:	eb49 0303 	adc.w	r3, r9, r3
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020ae:	4629      	mov	r1, r5
 80020b0:	024b      	lsls	r3, r1, #9
 80020b2:	4621      	mov	r1, r4
 80020b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020b8:	4621      	mov	r1, r4
 80020ba:	024a      	lsls	r2, r1, #9
 80020bc:	4610      	mov	r0, r2
 80020be:	4619      	mov	r1, r3
 80020c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020c2:	2200      	movs	r2, #0
 80020c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80020cc:	f7fe f892 	bl	80001f4 <__aeabi_uldivmod>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4613      	mov	r3, r2
 80020d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020d8:	e058      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020da:	4b38      	ldr	r3, [pc, #224]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x200>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	099b      	lsrs	r3, r3, #6
 80020e0:	2200      	movs	r2, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	4611      	mov	r1, r2
 80020e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020ea:	623b      	str	r3, [r7, #32]
 80020ec:	2300      	movs	r3, #0
 80020ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80020f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020f4:	4642      	mov	r2, r8
 80020f6:	464b      	mov	r3, r9
 80020f8:	f04f 0000 	mov.w	r0, #0
 80020fc:	f04f 0100 	mov.w	r1, #0
 8002100:	0159      	lsls	r1, r3, #5
 8002102:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002106:	0150      	lsls	r0, r2, #5
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4641      	mov	r1, r8
 800210e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002112:	4649      	mov	r1, r9
 8002114:	eb63 0b01 	sbc.w	fp, r3, r1
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	f04f 0300 	mov.w	r3, #0
 8002120:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002124:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002128:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800212c:	ebb2 040a 	subs.w	r4, r2, sl
 8002130:	eb63 050b 	sbc.w	r5, r3, fp
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	00eb      	lsls	r3, r5, #3
 800213e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002142:	00e2      	lsls	r2, r4, #3
 8002144:	4614      	mov	r4, r2
 8002146:	461d      	mov	r5, r3
 8002148:	4643      	mov	r3, r8
 800214a:	18e3      	adds	r3, r4, r3
 800214c:	603b      	str	r3, [r7, #0]
 800214e:	464b      	mov	r3, r9
 8002150:	eb45 0303 	adc.w	r3, r5, r3
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002162:	4629      	mov	r1, r5
 8002164:	028b      	lsls	r3, r1, #10
 8002166:	4621      	mov	r1, r4
 8002168:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800216c:	4621      	mov	r1, r4
 800216e:	028a      	lsls	r2, r1, #10
 8002170:	4610      	mov	r0, r2
 8002172:	4619      	mov	r1, r3
 8002174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002176:	2200      	movs	r2, #0
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	61fa      	str	r2, [r7, #28]
 800217c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002180:	f7fe f838 	bl	80001f4 <__aeabi_uldivmod>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4613      	mov	r3, r2
 800218a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800218c:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x200>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	0c1b      	lsrs	r3, r3, #16
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	3301      	adds	r3, #1
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800219c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800219e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021a6:	e002      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021a8:	4b05      	ldr	r3, [pc, #20]	@ (80021c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80021aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3750      	adds	r7, #80	@ 0x50
 80021b4:	46bd      	mov	sp, r7
 80021b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	00f42400 	.word	0x00f42400
 80021c4:	007a1200 	.word	0x007a1200

080021c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021cc:	4b03      	ldr	r3, [pc, #12]	@ (80021dc <HAL_RCC_GetHCLKFreq+0x14>)
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000000 	.word	0x20000000

080021e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021e4:	f7ff fff0 	bl	80021c8 <HAL_RCC_GetHCLKFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	0a9b      	lsrs	r3, r3, #10
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	4903      	ldr	r1, [pc, #12]	@ (8002204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40023800 	.word	0x40023800
 8002204:	08006f28 	.word	0x08006f28

08002208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800220c:	f7ff ffdc 	bl	80021c8 <HAL_RCC_GetHCLKFreq>
 8002210:	4602      	mov	r2, r0
 8002212:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	0b5b      	lsrs	r3, r3, #13
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	4903      	ldr	r1, [pc, #12]	@ (800222c <HAL_RCC_GetPCLK2Freq+0x24>)
 800221e:	5ccb      	ldrb	r3, [r1, r3]
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002224:	4618      	mov	r0, r3
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40023800 	.word	0x40023800
 800222c:	08006f28 	.word	0x08006f28

08002230 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	220f      	movs	r2, #15
 800223e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002240:	4b12      	ldr	r3, [pc, #72]	@ (800228c <HAL_RCC_GetClockConfig+0x5c>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 0203 	and.w	r2, r3, #3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800224c:	4b0f      	ldr	r3, [pc, #60]	@ (800228c <HAL_RCC_GetClockConfig+0x5c>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002258:	4b0c      	ldr	r3, [pc, #48]	@ (800228c <HAL_RCC_GetClockConfig+0x5c>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002264:	4b09      	ldr	r3, [pc, #36]	@ (800228c <HAL_RCC_GetClockConfig+0x5c>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	08db      	lsrs	r3, r3, #3
 800226a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002272:	4b07      	ldr	r3, [pc, #28]	@ (8002290 <HAL_RCC_GetClockConfig+0x60>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0207 	and.w	r2, r3, #7
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	601a      	str	r2, [r3, #0]
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800
 8002290:	40023c00 	.word	0x40023c00

08002294 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d105      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d035      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80022bc:	4b62      	ldr	r3, [pc, #392]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80022c2:	f7fe ffe7 	bl	8001294 <HAL_GetTick>
 80022c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022c8:	e008      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022ca:	f7fe ffe3 	bl	8001294 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e0b0      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022dc:	4b5b      	ldr	r3, [pc, #364]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1f0      	bne.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	019a      	lsls	r2, r3, #6
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	071b      	lsls	r3, r3, #28
 80022f4:	4955      	ldr	r1, [pc, #340]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80022fc:	4b52      	ldr	r3, [pc, #328]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80022fe:	2201      	movs	r2, #1
 8002300:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002302:	f7fe ffc7 	bl	8001294 <HAL_GetTick>
 8002306:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002308:	e008      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800230a:	f7fe ffc3 	bl	8001294 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e090      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800231c:	4b4b      	ldr	r3, [pc, #300]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 8083 	beq.w	800243c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	4b44      	ldr	r3, [pc, #272]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	4a43      	ldr	r2, [pc, #268]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002344:	6413      	str	r3, [r2, #64]	@ 0x40
 8002346:	4b41      	ldr	r3, [pc, #260]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002352:	4b3f      	ldr	r3, [pc, #252]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a3e      	ldr	r2, [pc, #248]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800235c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800235e:	f7fe ff99 	bl	8001294 <HAL_GetTick>
 8002362:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002364:	e008      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002366:	f7fe ff95 	bl	8001294 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e062      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002378:	4b35      	ldr	r3, [pc, #212]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002384:	4b31      	ldr	r3, [pc, #196]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002388:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800238c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d02f      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d028      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023a2:	4b2a      	ldr	r3, [pc, #168]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80023a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023ac:	4b29      	ldr	r3, [pc, #164]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023b2:	4b28      	ldr	r3, [pc, #160]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80023b8:	4a24      	ldr	r2, [pc, #144]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80023be:	4b23      	ldr	r3, [pc, #140]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80023c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d114      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80023ca:	f7fe ff63 	bl	8001294 <HAL_GetTick>
 80023ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d0:	e00a      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d2:	f7fe ff5f 	bl	8001294 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e02a      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e8:	4b18      	ldr	r3, [pc, #96]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80023ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0ee      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002400:	d10d      	bne.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002402:	4b12      	ldr	r3, [pc, #72]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002412:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002416:	490d      	ldr	r1, [pc, #52]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002418:	4313      	orrs	r3, r2
 800241a:	608b      	str	r3, [r1, #8]
 800241c:	e005      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800241e:	4b0b      	ldr	r3, [pc, #44]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	4a0a      	ldr	r2, [pc, #40]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002424:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002428:	6093      	str	r3, [r2, #8]
 800242a:	4b08      	ldr	r3, [pc, #32]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800242c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002436:	4905      	ldr	r1, [pc, #20]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002438:	4313      	orrs	r3, r2
 800243a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	42470068 	.word	0x42470068
 800244c:	40023800 	.word	0x40023800
 8002450:	40007000 	.word	0x40007000
 8002454:	42470e40 	.word	0x42470e40

08002458 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e073      	b.n	8002556 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	7f5b      	ldrb	r3, [r3, #29]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d105      	bne.n	8002484 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fe fb86 	bl	8000b90 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b10      	cmp	r3, #16
 8002496:	d055      	beq.n	8002544 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	22ca      	movs	r2, #202	@ 0xca
 800249e:	625a      	str	r2, [r3, #36]	@ 0x24
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2253      	movs	r2, #83	@ 0x53
 80024a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f87f 	bl	80025ac <RTC_EnterInitMode>
 80024ae:	4603      	mov	r3, r0
 80024b0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d12c      	bne.n	8002512 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80024c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024ca:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6899      	ldr	r1, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	68d2      	ldr	r2, [r2, #12]
 80024f2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6919      	ldr	r1, [r3, #16]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	041a      	lsls	r2, r3, #16
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f886 	bl	800261a <RTC_ExitInitMode>
 800250e:	4603      	mov	r3, r0
 8002510:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d110      	bne.n	800253a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002526:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699a      	ldr	r2, [r3, #24]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	22ff      	movs	r2, #255	@ 0xff
 8002540:	625a      	str	r2, [r3, #36]	@ 0x24
 8002542:	e001      	b.n	8002548 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d102      	bne.n	8002554 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002554:	7bfb      	ldrb	r3, [r7, #15]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a0d      	ldr	r2, [pc, #52]	@ (80025a8 <HAL_RTC_WaitForSynchro+0x48>)
 8002572:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002574:	f7fe fe8e 	bl	8001294 <HAL_GetTick>
 8002578:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800257a:	e009      	b.n	8002590 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800257c:	f7fe fe8a 	bl	8001294 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800258a:	d901      	bls.n	8002590 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e007      	b.n	80025a0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f003 0320 	and.w	r3, r3, #32
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0ee      	beq.n	800257c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	00017f5f 	.word	0x00017f5f

080025ac <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d122      	bne.n	8002610 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80025d8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025da:	f7fe fe5b 	bl	8001294 <HAL_GetTick>
 80025de:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80025e0:	e00c      	b.n	80025fc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80025e2:	f7fe fe57 	bl	8001294 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025f0:	d904      	bls.n	80025fc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2204      	movs	r2, #4
 80025f6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002606:	2b00      	cmp	r3, #0
 8002608:	d102      	bne.n	8002610 <RTC_EnterInitMode+0x64>
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d1e8      	bne.n	80025e2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002610:	7bfb      	ldrb	r3, [r7, #15]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002634:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0320 	and.w	r3, r3, #32
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10a      	bne.n	800265a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff ff8b 	bl	8002560 <HAL_RTC_WaitForSynchro>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d004      	beq.n	800265a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2204      	movs	r2, #4
 8002654:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800265a:	7bfb      	ldrb	r3, [r7, #15]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e041      	b.n	80026fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f839 	bl	8002702 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3304      	adds	r3, #4
 80026a0:	4619      	mov	r1, r3
 80026a2:	4610      	mov	r0, r2
 80026a4:	f000 f9c0 	bl	8002a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b01      	cmp	r3, #1
 800272a:	d001      	beq.n	8002730 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e04e      	b.n	80027ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a23      	ldr	r2, [pc, #140]	@ (80027dc <HAL_TIM_Base_Start_IT+0xc4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d022      	beq.n	8002798 <HAL_TIM_Base_Start_IT+0x80>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800275a:	d01d      	beq.n	8002798 <HAL_TIM_Base_Start_IT+0x80>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a1f      	ldr	r2, [pc, #124]	@ (80027e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d018      	beq.n	8002798 <HAL_TIM_Base_Start_IT+0x80>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a1e      	ldr	r2, [pc, #120]	@ (80027e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d013      	beq.n	8002798 <HAL_TIM_Base_Start_IT+0x80>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a1c      	ldr	r2, [pc, #112]	@ (80027e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00e      	beq.n	8002798 <HAL_TIM_Base_Start_IT+0x80>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a1b      	ldr	r2, [pc, #108]	@ (80027ec <HAL_TIM_Base_Start_IT+0xd4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d009      	beq.n	8002798 <HAL_TIM_Base_Start_IT+0x80>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a19      	ldr	r2, [pc, #100]	@ (80027f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d004      	beq.n	8002798 <HAL_TIM_Base_Start_IT+0x80>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a18      	ldr	r2, [pc, #96]	@ (80027f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d111      	bne.n	80027bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b06      	cmp	r3, #6
 80027a8:	d010      	beq.n	80027cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0201 	orr.w	r2, r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ba:	e007      	b.n	80027cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40010000 	.word	0x40010000
 80027e0:	40000400 	.word	0x40000400
 80027e4:	40000800 	.word	0x40000800
 80027e8:	40000c00 	.word	0x40000c00
 80027ec:	40010400 	.word	0x40010400
 80027f0:	40014000 	.word	0x40014000
 80027f4:	40001800 	.word	0x40001800

080027f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d020      	beq.n	800285c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d01b      	beq.n	800285c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0202 	mvn.w	r2, #2
 800282c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f8d2 	bl	80029ec <HAL_TIM_IC_CaptureCallback>
 8002848:	e005      	b.n	8002856 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f8c4 	bl	80029d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f8d5 	bl	8002a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b00      	cmp	r3, #0
 8002864:	d020      	beq.n	80028a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01b      	beq.n	80028a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f06f 0204 	mvn.w	r2, #4
 8002878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2202      	movs	r2, #2
 800287e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f8ac 	bl	80029ec <HAL_TIM_IC_CaptureCallback>
 8002894:	e005      	b.n	80028a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f89e 	bl	80029d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f8af 	bl	8002a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d020      	beq.n	80028f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01b      	beq.n	80028f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0208 	mvn.w	r2, #8
 80028c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2204      	movs	r2, #4
 80028ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f886 	bl	80029ec <HAL_TIM_IC_CaptureCallback>
 80028e0:	e005      	b.n	80028ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f878 	bl	80029d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f889 	bl	8002a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d020      	beq.n	8002940 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01b      	beq.n	8002940 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0210 	mvn.w	r2, #16
 8002910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2208      	movs	r2, #8
 8002916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f860 	bl	80029ec <HAL_TIM_IC_CaptureCallback>
 800292c:	e005      	b.n	800293a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f852 	bl	80029d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f863 	bl	8002a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00c      	beq.n	8002964 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	d007      	beq.n	8002964 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0201 	mvn.w	r2, #1
 800295c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7fe f8d6 	bl	8000b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00c      	beq.n	8002988 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002974:	2b00      	cmp	r3, #0
 8002976:	d007      	beq.n	8002988 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f906 	bl	8002b94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00c      	beq.n	80029ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002998:	2b00      	cmp	r3, #0
 800299a:	d007      	beq.n	80029ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80029a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f834 	bl	8002a14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00c      	beq.n	80029d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f003 0320 	and.w	r3, r3, #32
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d007      	beq.n	80029d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0220 	mvn.w	r2, #32
 80029c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f8d8 	bl	8002b80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a46      	ldr	r2, [pc, #280]	@ (8002b54 <TIM_Base_SetConfig+0x12c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d013      	beq.n	8002a68 <TIM_Base_SetConfig+0x40>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a46:	d00f      	beq.n	8002a68 <TIM_Base_SetConfig+0x40>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a43      	ldr	r2, [pc, #268]	@ (8002b58 <TIM_Base_SetConfig+0x130>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00b      	beq.n	8002a68 <TIM_Base_SetConfig+0x40>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a42      	ldr	r2, [pc, #264]	@ (8002b5c <TIM_Base_SetConfig+0x134>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d007      	beq.n	8002a68 <TIM_Base_SetConfig+0x40>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a41      	ldr	r2, [pc, #260]	@ (8002b60 <TIM_Base_SetConfig+0x138>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d003      	beq.n	8002a68 <TIM_Base_SetConfig+0x40>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a40      	ldr	r2, [pc, #256]	@ (8002b64 <TIM_Base_SetConfig+0x13c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d108      	bne.n	8002a7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a35      	ldr	r2, [pc, #212]	@ (8002b54 <TIM_Base_SetConfig+0x12c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d02b      	beq.n	8002ada <TIM_Base_SetConfig+0xb2>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a88:	d027      	beq.n	8002ada <TIM_Base_SetConfig+0xb2>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a32      	ldr	r2, [pc, #200]	@ (8002b58 <TIM_Base_SetConfig+0x130>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d023      	beq.n	8002ada <TIM_Base_SetConfig+0xb2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a31      	ldr	r2, [pc, #196]	@ (8002b5c <TIM_Base_SetConfig+0x134>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d01f      	beq.n	8002ada <TIM_Base_SetConfig+0xb2>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a30      	ldr	r2, [pc, #192]	@ (8002b60 <TIM_Base_SetConfig+0x138>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d01b      	beq.n	8002ada <TIM_Base_SetConfig+0xb2>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a2f      	ldr	r2, [pc, #188]	@ (8002b64 <TIM_Base_SetConfig+0x13c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d017      	beq.n	8002ada <TIM_Base_SetConfig+0xb2>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a2e      	ldr	r2, [pc, #184]	@ (8002b68 <TIM_Base_SetConfig+0x140>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d013      	beq.n	8002ada <TIM_Base_SetConfig+0xb2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a2d      	ldr	r2, [pc, #180]	@ (8002b6c <TIM_Base_SetConfig+0x144>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00f      	beq.n	8002ada <TIM_Base_SetConfig+0xb2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a2c      	ldr	r2, [pc, #176]	@ (8002b70 <TIM_Base_SetConfig+0x148>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00b      	beq.n	8002ada <TIM_Base_SetConfig+0xb2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a2b      	ldr	r2, [pc, #172]	@ (8002b74 <TIM_Base_SetConfig+0x14c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d007      	beq.n	8002ada <TIM_Base_SetConfig+0xb2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a2a      	ldr	r2, [pc, #168]	@ (8002b78 <TIM_Base_SetConfig+0x150>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d003      	beq.n	8002ada <TIM_Base_SetConfig+0xb2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a29      	ldr	r2, [pc, #164]	@ (8002b7c <TIM_Base_SetConfig+0x154>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d108      	bne.n	8002aec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a10      	ldr	r2, [pc, #64]	@ (8002b54 <TIM_Base_SetConfig+0x12c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d003      	beq.n	8002b20 <TIM_Base_SetConfig+0xf8>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a12      	ldr	r2, [pc, #72]	@ (8002b64 <TIM_Base_SetConfig+0x13c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d103      	bne.n	8002b28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d105      	bne.n	8002b46 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f023 0201 	bic.w	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	611a      	str	r2, [r3, #16]
  }
}
 8002b46:	bf00      	nop
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40010000 	.word	0x40010000
 8002b58:	40000400 	.word	0x40000400
 8002b5c:	40000800 	.word	0x40000800
 8002b60:	40000c00 	.word	0x40000c00
 8002b64:	40010400 	.word	0x40010400
 8002b68:	40014000 	.word	0x40014000
 8002b6c:	40014400 	.word	0x40014400
 8002b70:	40014800 	.word	0x40014800
 8002b74:	40001800 	.word	0x40001800
 8002b78:	40001c00 	.word	0x40001c00
 8002b7c:	40002000 	.word	0x40002000

08002b80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e042      	b.n	8002c40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d106      	bne.n	8002bd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7fe f808 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2224      	movs	r2, #36	@ 0x24
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 fdbd 	bl	800376c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695a      	ldr	r2, [r3, #20]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08a      	sub	sp, #40	@ 0x28
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	603b      	str	r3, [r7, #0]
 8002c54:	4613      	mov	r3, r2
 8002c56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	d175      	bne.n	8002d54 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <HAL_UART_Transmit+0x2c>
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e06e      	b.n	8002d56 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2221      	movs	r2, #33	@ 0x21
 8002c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c86:	f7fe fb05 	bl	8001294 <HAL_GetTick>
 8002c8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	88fa      	ldrh	r2, [r7, #6]
 8002c90:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	88fa      	ldrh	r2, [r7, #6]
 8002c96:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ca0:	d108      	bne.n	8002cb4 <HAL_UART_Transmit+0x6c>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d104      	bne.n	8002cb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	e003      	b.n	8002cbc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cbc:	e02e      	b.n	8002d1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2180      	movs	r1, #128	@ 0x80
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 fb1f 	bl	800330c <UART_WaitOnFlagUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e03a      	b.n	8002d56 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10b      	bne.n	8002cfe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	61bb      	str	r3, [r7, #24]
 8002cfc:	e007      	b.n	8002d0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	781a      	ldrb	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1cb      	bne.n	8002cbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2140      	movs	r1, #64	@ 0x40
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 faeb 	bl	800330c <UART_WaitOnFlagUntilTimeout>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e006      	b.n	8002d56 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	e000      	b.n	8002d56 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d54:	2302      	movs	r3, #2
  }
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3720      	adds	r7, #32
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b084      	sub	sp, #16
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	d112      	bne.n	8002d9e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <HAL_UART_Receive_IT+0x26>
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e00b      	b.n	8002da0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	461a      	mov	r2, r3
 8002d92:	68b9      	ldr	r1, [r7, #8]
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 fb12 	bl	80033be <UART_Start_Receive_IT>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	e000      	b.n	8002da0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002d9e:	2302      	movs	r3, #2
  }
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b0ba      	sub	sp, #232	@ 0xe8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002de6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10f      	bne.n	8002e0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002df2:	f003 0320 	and.w	r3, r3, #32
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <HAL_UART_IRQHandler+0x66>
 8002dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fbf2 	bl	80035f0 <UART_Receive_IT>
      return;
 8002e0c:	e25b      	b.n	80032c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 80de 	beq.w	8002fd4 <HAL_UART_IRQHandler+0x22c>
 8002e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d106      	bne.n	8002e32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e28:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 80d1 	beq.w	8002fd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00b      	beq.n	8002e56 <HAL_UART_IRQHandler+0xae>
 8002e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4e:	f043 0201 	orr.w	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00b      	beq.n	8002e7a <HAL_UART_IRQHandler+0xd2>
 8002e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e72:	f043 0202 	orr.w	r2, r3, #2
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00b      	beq.n	8002e9e <HAL_UART_IRQHandler+0xf6>
 8002e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d005      	beq.n	8002e9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e96:	f043 0204 	orr.w	r2, r3, #4
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d011      	beq.n	8002ece <HAL_UART_IRQHandler+0x126>
 8002eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d105      	bne.n	8002ec2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d005      	beq.n	8002ece <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec6:	f043 0208 	orr.w	r2, r3, #8
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 81f2 	beq.w	80032bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002edc:	f003 0320 	and.w	r3, r3, #32
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d008      	beq.n	8002ef6 <HAL_UART_IRQHandler+0x14e>
 8002ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 fb7d 	bl	80035f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f00:	2b40      	cmp	r3, #64	@ 0x40
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d103      	bne.n	8002f22 <HAL_UART_IRQHandler+0x17a>
 8002f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d04f      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fa85 	bl	8003432 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f32:	2b40      	cmp	r3, #64	@ 0x40
 8002f34:	d141      	bne.n	8002fba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	3314      	adds	r3, #20
 8002f3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f44:	e853 3f00 	ldrex	r3, [r3]
 8002f48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	3314      	adds	r3, #20
 8002f5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f72:	e841 2300 	strex	r3, r2, [r1]
 8002f76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1d9      	bne.n	8002f36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d013      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f8e:	4a7e      	ldr	r2, [pc, #504]	@ (8003188 <HAL_UART_IRQHandler+0x3e0>)
 8002f90:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe fada 	bl	8001550 <HAL_DMA_Abort_IT>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d016      	beq.n	8002fd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fac:	4610      	mov	r0, r2
 8002fae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb0:	e00e      	b.n	8002fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f994 	bl	80032e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb8:	e00a      	b.n	8002fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f990 	bl	80032e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc0:	e006      	b.n	8002fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f98c 	bl	80032e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002fce:	e175      	b.n	80032bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd0:	bf00      	nop
    return;
 8002fd2:	e173      	b.n	80032bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	f040 814f 	bne.w	800327c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 8148 	beq.w	800327c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ff0:	f003 0310 	and.w	r3, r3, #16
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 8141 	beq.w	800327c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800301a:	2b40      	cmp	r3, #64	@ 0x40
 800301c:	f040 80b6 	bne.w	800318c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800302c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 8145 	beq.w	80032c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800303a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800303e:	429a      	cmp	r2, r3
 8003040:	f080 813e 	bcs.w	80032c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800304a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003056:	f000 8088 	beq.w	800316a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	330c      	adds	r3, #12
 8003060:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003064:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003068:	e853 3f00 	ldrex	r3, [r3]
 800306c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003070:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003074:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003078:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	330c      	adds	r3, #12
 8003082:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003086:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800308a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003092:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003096:	e841 2300 	strex	r3, r2, [r1]
 800309a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800309e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1d9      	bne.n	800305a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3314      	adds	r3, #20
 80030ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030b0:	e853 3f00 	ldrex	r3, [r3]
 80030b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80030b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030b8:	f023 0301 	bic.w	r3, r3, #1
 80030bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3314      	adds	r3, #20
 80030c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80030ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80030d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80030d6:	e841 2300 	strex	r3, r2, [r1]
 80030da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80030dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1e1      	bne.n	80030a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3314      	adds	r3, #20
 80030e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030ec:	e853 3f00 	ldrex	r3, [r3]
 80030f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80030f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3314      	adds	r3, #20
 8003102:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003106:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003108:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800310c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800310e:	e841 2300 	strex	r3, r2, [r1]
 8003112:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1e3      	bne.n	80030e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	330c      	adds	r3, #12
 800312e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003132:	e853 3f00 	ldrex	r3, [r3]
 8003136:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800313a:	f023 0310 	bic.w	r3, r3, #16
 800313e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	330c      	adds	r3, #12
 8003148:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800314c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800314e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003150:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003152:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003154:	e841 2300 	strex	r3, r2, [r1]
 8003158:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800315a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1e3      	bne.n	8003128 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003164:	4618      	mov	r0, r3
 8003166:	f7fe f983 	bl	8001470 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2202      	movs	r2, #2
 800316e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003178:	b29b      	uxth	r3, r3
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	b29b      	uxth	r3, r3
 800317e:	4619      	mov	r1, r3
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f8b7 	bl	80032f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003186:	e09b      	b.n	80032c0 <HAL_UART_IRQHandler+0x518>
 8003188:	080034f9 	.word	0x080034f9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003194:	b29b      	uxth	r3, r3
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 808e 	beq.w	80032c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80031a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8089 	beq.w	80032c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	330c      	adds	r3, #12
 80031b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031bc:	e853 3f00 	ldrex	r3, [r3]
 80031c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	330c      	adds	r3, #12
 80031d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80031d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80031d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031de:	e841 2300 	strex	r3, r2, [r1]
 80031e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1e3      	bne.n	80031b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3314      	adds	r3, #20
 80031f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f4:	e853 3f00 	ldrex	r3, [r3]
 80031f8:	623b      	str	r3, [r7, #32]
   return(result);
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	f023 0301 	bic.w	r3, r3, #1
 8003200:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3314      	adds	r3, #20
 800320a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800320e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003210:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003212:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003214:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003216:	e841 2300 	strex	r3, r2, [r1]
 800321a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800321c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1e3      	bne.n	80031ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	330c      	adds	r3, #12
 8003236:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	e853 3f00 	ldrex	r3, [r3]
 800323e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f023 0310 	bic.w	r3, r3, #16
 8003246:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	330c      	adds	r3, #12
 8003250:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003254:	61fa      	str	r2, [r7, #28]
 8003256:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003258:	69b9      	ldr	r1, [r7, #24]
 800325a:	69fa      	ldr	r2, [r7, #28]
 800325c:	e841 2300 	strex	r3, r2, [r1]
 8003260:	617b      	str	r3, [r7, #20]
   return(result);
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1e3      	bne.n	8003230 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800326e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003272:	4619      	mov	r1, r3
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f83d 	bl	80032f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800327a:	e023      	b.n	80032c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800327c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003284:	2b00      	cmp	r3, #0
 8003286:	d009      	beq.n	800329c <HAL_UART_IRQHandler+0x4f4>
 8003288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800328c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f943 	bl	8003520 <UART_Transmit_IT>
    return;
 800329a:	e014      	b.n	80032c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800329c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00e      	beq.n	80032c6 <HAL_UART_IRQHandler+0x51e>
 80032a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f983 	bl	80035c0 <UART_EndTransmit_IT>
    return;
 80032ba:	e004      	b.n	80032c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80032bc:	bf00      	nop
 80032be:	e002      	b.n	80032c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80032c0:	bf00      	nop
 80032c2:	e000      	b.n	80032c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80032c4:	bf00      	nop
  }
}
 80032c6:	37e8      	adds	r7, #232	@ 0xe8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	4613      	mov	r3, r2
 800331a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800331c:	e03b      	b.n	8003396 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003324:	d037      	beq.n	8003396 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003326:	f7fd ffb5 	bl	8001294 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	6a3a      	ldr	r2, [r7, #32]
 8003332:	429a      	cmp	r2, r3
 8003334:	d302      	bcc.n	800333c <UART_WaitOnFlagUntilTimeout+0x30>
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e03a      	b.n	80033b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	2b00      	cmp	r3, #0
 800334c:	d023      	beq.n	8003396 <UART_WaitOnFlagUntilTimeout+0x8a>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b80      	cmp	r3, #128	@ 0x80
 8003352:	d020      	beq.n	8003396 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b40      	cmp	r3, #64	@ 0x40
 8003358:	d01d      	beq.n	8003396 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b08      	cmp	r3, #8
 8003366:	d116      	bne.n	8003396 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f857 	bl	8003432 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2208      	movs	r2, #8
 8003388:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e00f      	b.n	80033b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4013      	ands	r3, r2
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	bf0c      	ite	eq
 80033a6:	2301      	moveq	r3, #1
 80033a8:	2300      	movne	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	461a      	mov	r2, r3
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d0b4      	beq.n	800331e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033be:	b480      	push	{r7}
 80033c0:	b085      	sub	sp, #20
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	4613      	mov	r3, r2
 80033ca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	88fa      	ldrh	r2, [r7, #6]
 80033d6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	88fa      	ldrh	r2, [r7, #6]
 80033dc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2222      	movs	r2, #34	@ 0x22
 80033e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d007      	beq.n	8003404 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003402:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695a      	ldr	r2, [r3, #20]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0201 	orr.w	r2, r2, #1
 8003412:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0220 	orr.w	r2, r2, #32
 8003422:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003432:	b480      	push	{r7}
 8003434:	b095      	sub	sp, #84	@ 0x54
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	330c      	adds	r3, #12
 8003440:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003444:	e853 3f00 	ldrex	r3, [r3]
 8003448:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800344a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003450:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	330c      	adds	r3, #12
 8003458:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800345a:	643a      	str	r2, [r7, #64]	@ 0x40
 800345c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003460:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003462:	e841 2300 	strex	r3, r2, [r1]
 8003466:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1e5      	bne.n	800343a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3314      	adds	r3, #20
 8003474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	e853 3f00 	ldrex	r3, [r3]
 800347c:	61fb      	str	r3, [r7, #28]
   return(result);
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	f023 0301 	bic.w	r3, r3, #1
 8003484:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3314      	adds	r3, #20
 800348c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800348e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003490:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003492:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003494:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003496:	e841 2300 	strex	r3, r2, [r1]
 800349a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800349c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1e5      	bne.n	800346e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d119      	bne.n	80034de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	330c      	adds	r3, #12
 80034b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	e853 3f00 	ldrex	r3, [r3]
 80034b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	f023 0310 	bic.w	r3, r3, #16
 80034c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	330c      	adds	r3, #12
 80034c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034ca:	61ba      	str	r2, [r7, #24]
 80034cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ce:	6979      	ldr	r1, [r7, #20]
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	e841 2300 	strex	r3, r2, [r1]
 80034d6:	613b      	str	r3, [r7, #16]
   return(result);
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1e5      	bne.n	80034aa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80034ec:	bf00      	nop
 80034ee:	3754      	adds	r7, #84	@ 0x54
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003504:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f7ff fee4 	bl	80032e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b21      	cmp	r3, #33	@ 0x21
 8003532:	d13e      	bne.n	80035b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800353c:	d114      	bne.n	8003568 <UART_Transmit_IT+0x48>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d110      	bne.n	8003568 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800355a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	1c9a      	adds	r2, r3, #2
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	621a      	str	r2, [r3, #32]
 8003566:	e008      	b.n	800357a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	1c59      	adds	r1, r3, #1
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6211      	str	r1, [r2, #32]
 8003572:	781a      	ldrb	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29b      	uxth	r3, r3
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	4619      	mov	r1, r3
 8003588:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10f      	bne.n	80035ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800359c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	e000      	b.n	80035b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035b2:	2302      	movs	r3, #2
  }
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2220      	movs	r2, #32
 80035dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff fe73 	bl	80032cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08c      	sub	sp, #48	@ 0x30
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b22      	cmp	r3, #34	@ 0x22
 8003602:	f040 80ae 	bne.w	8003762 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800360e:	d117      	bne.n	8003640 <UART_Receive_IT+0x50>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d113      	bne.n	8003640 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003618:	2300      	movs	r3, #0
 800361a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003620:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	b29b      	uxth	r3, r3
 800362a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800362e:	b29a      	uxth	r2, r3
 8003630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003632:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003638:	1c9a      	adds	r2, r3, #2
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	629a      	str	r2, [r3, #40]	@ 0x28
 800363e:	e026      	b.n	800368e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003644:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003646:	2300      	movs	r3, #0
 8003648:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003652:	d007      	beq.n	8003664 <UART_Receive_IT+0x74>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <UART_Receive_IT+0x82>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d106      	bne.n	8003672 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	b2da      	uxtb	r2, r3
 800366c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800366e:	701a      	strb	r2, [r3, #0]
 8003670:	e008      	b.n	8003684 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800367e:	b2da      	uxtb	r2, r3
 8003680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003682:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b01      	subs	r3, #1
 8003696:	b29b      	uxth	r3, r3
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	4619      	mov	r1, r3
 800369c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d15d      	bne.n	800375e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0220 	bic.w	r2, r2, #32
 80036b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695a      	ldr	r2, [r3, #20]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0201 	bic.w	r2, r2, #1
 80036d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d135      	bne.n	8003754 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	330c      	adds	r3, #12
 80036f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	e853 3f00 	ldrex	r3, [r3]
 80036fc:	613b      	str	r3, [r7, #16]
   return(result);
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f023 0310 	bic.w	r3, r3, #16
 8003704:	627b      	str	r3, [r7, #36]	@ 0x24
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	330c      	adds	r3, #12
 800370c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800370e:	623a      	str	r2, [r7, #32]
 8003710:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003712:	69f9      	ldr	r1, [r7, #28]
 8003714:	6a3a      	ldr	r2, [r7, #32]
 8003716:	e841 2300 	strex	r3, r2, [r1]
 800371a:	61bb      	str	r3, [r7, #24]
   return(result);
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1e5      	bne.n	80036ee <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b10      	cmp	r3, #16
 800372e:	d10a      	bne.n	8003746 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800374a:	4619      	mov	r1, r3
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff fdd1 	bl	80032f4 <HAL_UARTEx_RxEventCallback>
 8003752:	e002      	b.n	800375a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7fd f993 	bl	8000a80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	e002      	b.n	8003764 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	e000      	b.n	8003764 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003762:	2302      	movs	r3, #2
  }
}
 8003764:	4618      	mov	r0, r3
 8003766:	3730      	adds	r7, #48	@ 0x30
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800376c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003770:	b0c0      	sub	sp, #256	@ 0x100
 8003772:	af00      	add	r7, sp, #0
 8003774:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003788:	68d9      	ldr	r1, [r3, #12]
 800378a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	ea40 0301 	orr.w	r3, r0, r1
 8003794:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	431a      	orrs	r2, r3
 80037a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80037c4:	f021 010c 	bic.w	r1, r1, #12
 80037c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80037d2:	430b      	orrs	r3, r1
 80037d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80037e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e6:	6999      	ldr	r1, [r3, #24]
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	ea40 0301 	orr.w	r3, r0, r1
 80037f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	4b8f      	ldr	r3, [pc, #572]	@ (8003a38 <UART_SetConfig+0x2cc>)
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d005      	beq.n	800380c <UART_SetConfig+0xa0>
 8003800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4b8d      	ldr	r3, [pc, #564]	@ (8003a3c <UART_SetConfig+0x2d0>)
 8003808:	429a      	cmp	r2, r3
 800380a:	d104      	bne.n	8003816 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800380c:	f7fe fcfc 	bl	8002208 <HAL_RCC_GetPCLK2Freq>
 8003810:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003814:	e003      	b.n	800381e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003816:	f7fe fce3 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
 800381a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800381e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003828:	f040 810c 	bne.w	8003a44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800382c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003830:	2200      	movs	r2, #0
 8003832:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003836:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800383a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800383e:	4622      	mov	r2, r4
 8003840:	462b      	mov	r3, r5
 8003842:	1891      	adds	r1, r2, r2
 8003844:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003846:	415b      	adcs	r3, r3
 8003848:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800384a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800384e:	4621      	mov	r1, r4
 8003850:	eb12 0801 	adds.w	r8, r2, r1
 8003854:	4629      	mov	r1, r5
 8003856:	eb43 0901 	adc.w	r9, r3, r1
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003866:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800386a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800386e:	4690      	mov	r8, r2
 8003870:	4699      	mov	r9, r3
 8003872:	4623      	mov	r3, r4
 8003874:	eb18 0303 	adds.w	r3, r8, r3
 8003878:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800387c:	462b      	mov	r3, r5
 800387e:	eb49 0303 	adc.w	r3, r9, r3
 8003882:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003892:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003896:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800389a:	460b      	mov	r3, r1
 800389c:	18db      	adds	r3, r3, r3
 800389e:	653b      	str	r3, [r7, #80]	@ 0x50
 80038a0:	4613      	mov	r3, r2
 80038a2:	eb42 0303 	adc.w	r3, r2, r3
 80038a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80038a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80038ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80038b0:	f7fc fca0 	bl	80001f4 <__aeabi_uldivmod>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4b61      	ldr	r3, [pc, #388]	@ (8003a40 <UART_SetConfig+0x2d4>)
 80038ba:	fba3 2302 	umull	r2, r3, r3, r2
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	011c      	lsls	r4, r3, #4
 80038c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038c6:	2200      	movs	r2, #0
 80038c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80038d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80038d4:	4642      	mov	r2, r8
 80038d6:	464b      	mov	r3, r9
 80038d8:	1891      	adds	r1, r2, r2
 80038da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80038dc:	415b      	adcs	r3, r3
 80038de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80038e4:	4641      	mov	r1, r8
 80038e6:	eb12 0a01 	adds.w	sl, r2, r1
 80038ea:	4649      	mov	r1, r9
 80038ec:	eb43 0b01 	adc.w	fp, r3, r1
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003900:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003904:	4692      	mov	sl, r2
 8003906:	469b      	mov	fp, r3
 8003908:	4643      	mov	r3, r8
 800390a:	eb1a 0303 	adds.w	r3, sl, r3
 800390e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003912:	464b      	mov	r3, r9
 8003914:	eb4b 0303 	adc.w	r3, fp, r3
 8003918:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800391c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003928:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800392c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003930:	460b      	mov	r3, r1
 8003932:	18db      	adds	r3, r3, r3
 8003934:	643b      	str	r3, [r7, #64]	@ 0x40
 8003936:	4613      	mov	r3, r2
 8003938:	eb42 0303 	adc.w	r3, r2, r3
 800393c:	647b      	str	r3, [r7, #68]	@ 0x44
 800393e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003942:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003946:	f7fc fc55 	bl	80001f4 <__aeabi_uldivmod>
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	4611      	mov	r1, r2
 8003950:	4b3b      	ldr	r3, [pc, #236]	@ (8003a40 <UART_SetConfig+0x2d4>)
 8003952:	fba3 2301 	umull	r2, r3, r3, r1
 8003956:	095b      	lsrs	r3, r3, #5
 8003958:	2264      	movs	r2, #100	@ 0x64
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	1acb      	subs	r3, r1, r3
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003966:	4b36      	ldr	r3, [pc, #216]	@ (8003a40 <UART_SetConfig+0x2d4>)
 8003968:	fba3 2302 	umull	r2, r3, r3, r2
 800396c:	095b      	lsrs	r3, r3, #5
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003974:	441c      	add	r4, r3
 8003976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800397a:	2200      	movs	r2, #0
 800397c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003980:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003984:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003988:	4642      	mov	r2, r8
 800398a:	464b      	mov	r3, r9
 800398c:	1891      	adds	r1, r2, r2
 800398e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003990:	415b      	adcs	r3, r3
 8003992:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003994:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003998:	4641      	mov	r1, r8
 800399a:	1851      	adds	r1, r2, r1
 800399c:	6339      	str	r1, [r7, #48]	@ 0x30
 800399e:	4649      	mov	r1, r9
 80039a0:	414b      	adcs	r3, r1
 80039a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	f04f 0300 	mov.w	r3, #0
 80039ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80039b0:	4659      	mov	r1, fp
 80039b2:	00cb      	lsls	r3, r1, #3
 80039b4:	4651      	mov	r1, sl
 80039b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ba:	4651      	mov	r1, sl
 80039bc:	00ca      	lsls	r2, r1, #3
 80039be:	4610      	mov	r0, r2
 80039c0:	4619      	mov	r1, r3
 80039c2:	4603      	mov	r3, r0
 80039c4:	4642      	mov	r2, r8
 80039c6:	189b      	adds	r3, r3, r2
 80039c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039cc:	464b      	mov	r3, r9
 80039ce:	460a      	mov	r2, r1
 80039d0:	eb42 0303 	adc.w	r3, r2, r3
 80039d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80039e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039ec:	460b      	mov	r3, r1
 80039ee:	18db      	adds	r3, r3, r3
 80039f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039f2:	4613      	mov	r3, r2
 80039f4:	eb42 0303 	adc.w	r3, r2, r3
 80039f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a02:	f7fc fbf7 	bl	80001f4 <__aeabi_uldivmod>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a40 <UART_SetConfig+0x2d4>)
 8003a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a10:	095b      	lsrs	r3, r3, #5
 8003a12:	2164      	movs	r1, #100	@ 0x64
 8003a14:	fb01 f303 	mul.w	r3, r1, r3
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	3332      	adds	r3, #50	@ 0x32
 8003a1e:	4a08      	ldr	r2, [pc, #32]	@ (8003a40 <UART_SetConfig+0x2d4>)
 8003a20:	fba2 2303 	umull	r2, r3, r2, r3
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	f003 0207 	and.w	r2, r3, #7
 8003a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4422      	add	r2, r4
 8003a32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a34:	e106      	b.n	8003c44 <UART_SetConfig+0x4d8>
 8003a36:	bf00      	nop
 8003a38:	40011000 	.word	0x40011000
 8003a3c:	40011400 	.word	0x40011400
 8003a40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a4e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a56:	4642      	mov	r2, r8
 8003a58:	464b      	mov	r3, r9
 8003a5a:	1891      	adds	r1, r2, r2
 8003a5c:	6239      	str	r1, [r7, #32]
 8003a5e:	415b      	adcs	r3, r3
 8003a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a66:	4641      	mov	r1, r8
 8003a68:	1854      	adds	r4, r2, r1
 8003a6a:	4649      	mov	r1, r9
 8003a6c:	eb43 0501 	adc.w	r5, r3, r1
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	00eb      	lsls	r3, r5, #3
 8003a7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a7e:	00e2      	lsls	r2, r4, #3
 8003a80:	4614      	mov	r4, r2
 8003a82:	461d      	mov	r5, r3
 8003a84:	4643      	mov	r3, r8
 8003a86:	18e3      	adds	r3, r4, r3
 8003a88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a8c:	464b      	mov	r3, r9
 8003a8e:	eb45 0303 	adc.w	r3, r5, r3
 8003a92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003aa2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	008b      	lsls	r3, r1, #2
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003abc:	4621      	mov	r1, r4
 8003abe:	008a      	lsls	r2, r1, #2
 8003ac0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ac4:	f7fc fb96 	bl	80001f4 <__aeabi_uldivmod>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4b60      	ldr	r3, [pc, #384]	@ (8003c50 <UART_SetConfig+0x4e4>)
 8003ace:	fba3 2302 	umull	r2, r3, r3, r2
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	011c      	lsls	r4, r3, #4
 8003ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ada:	2200      	movs	r2, #0
 8003adc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ae0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ae4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ae8:	4642      	mov	r2, r8
 8003aea:	464b      	mov	r3, r9
 8003aec:	1891      	adds	r1, r2, r2
 8003aee:	61b9      	str	r1, [r7, #24]
 8003af0:	415b      	adcs	r3, r3
 8003af2:	61fb      	str	r3, [r7, #28]
 8003af4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003af8:	4641      	mov	r1, r8
 8003afa:	1851      	adds	r1, r2, r1
 8003afc:	6139      	str	r1, [r7, #16]
 8003afe:	4649      	mov	r1, r9
 8003b00:	414b      	adcs	r3, r1
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b10:	4659      	mov	r1, fp
 8003b12:	00cb      	lsls	r3, r1, #3
 8003b14:	4651      	mov	r1, sl
 8003b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b1a:	4651      	mov	r1, sl
 8003b1c:	00ca      	lsls	r2, r1, #3
 8003b1e:	4610      	mov	r0, r2
 8003b20:	4619      	mov	r1, r3
 8003b22:	4603      	mov	r3, r0
 8003b24:	4642      	mov	r2, r8
 8003b26:	189b      	adds	r3, r3, r2
 8003b28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b2c:	464b      	mov	r3, r9
 8003b2e:	460a      	mov	r2, r1
 8003b30:	eb42 0303 	adc.w	r3, r2, r3
 8003b34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b50:	4649      	mov	r1, r9
 8003b52:	008b      	lsls	r3, r1, #2
 8003b54:	4641      	mov	r1, r8
 8003b56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b5a:	4641      	mov	r1, r8
 8003b5c:	008a      	lsls	r2, r1, #2
 8003b5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b62:	f7fc fb47 	bl	80001f4 <__aeabi_uldivmod>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	4b38      	ldr	r3, [pc, #224]	@ (8003c50 <UART_SetConfig+0x4e4>)
 8003b6e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b72:	095b      	lsrs	r3, r3, #5
 8003b74:	2264      	movs	r2, #100	@ 0x64
 8003b76:	fb02 f303 	mul.w	r3, r2, r3
 8003b7a:	1acb      	subs	r3, r1, r3
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	3332      	adds	r3, #50	@ 0x32
 8003b80:	4a33      	ldr	r2, [pc, #204]	@ (8003c50 <UART_SetConfig+0x4e4>)
 8003b82:	fba2 2303 	umull	r2, r3, r2, r3
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b8c:	441c      	add	r4, r3
 8003b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b92:	2200      	movs	r2, #0
 8003b94:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b96:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b9c:	4642      	mov	r2, r8
 8003b9e:	464b      	mov	r3, r9
 8003ba0:	1891      	adds	r1, r2, r2
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	415b      	adcs	r3, r3
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bac:	4641      	mov	r1, r8
 8003bae:	1851      	adds	r1, r2, r1
 8003bb0:	6039      	str	r1, [r7, #0]
 8003bb2:	4649      	mov	r1, r9
 8003bb4:	414b      	adcs	r3, r1
 8003bb6:	607b      	str	r3, [r7, #4]
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bc4:	4659      	mov	r1, fp
 8003bc6:	00cb      	lsls	r3, r1, #3
 8003bc8:	4651      	mov	r1, sl
 8003bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bce:	4651      	mov	r1, sl
 8003bd0:	00ca      	lsls	r2, r1, #3
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	4642      	mov	r2, r8
 8003bda:	189b      	adds	r3, r3, r2
 8003bdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bde:	464b      	mov	r3, r9
 8003be0:	460a      	mov	r2, r1
 8003be2:	eb42 0303 	adc.w	r3, r2, r3
 8003be6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bf2:	667a      	str	r2, [r7, #100]	@ 0x64
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c00:	4649      	mov	r1, r9
 8003c02:	008b      	lsls	r3, r1, #2
 8003c04:	4641      	mov	r1, r8
 8003c06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c0a:	4641      	mov	r1, r8
 8003c0c:	008a      	lsls	r2, r1, #2
 8003c0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c12:	f7fc faef 	bl	80001f4 <__aeabi_uldivmod>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c50 <UART_SetConfig+0x4e4>)
 8003c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c20:	095b      	lsrs	r3, r3, #5
 8003c22:	2164      	movs	r1, #100	@ 0x64
 8003c24:	fb01 f303 	mul.w	r3, r1, r3
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	3332      	adds	r3, #50	@ 0x32
 8003c2e:	4a08      	ldr	r2, [pc, #32]	@ (8003c50 <UART_SetConfig+0x4e4>)
 8003c30:	fba2 2303 	umull	r2, r3, r2, r3
 8003c34:	095b      	lsrs	r3, r3, #5
 8003c36:	f003 020f 	and.w	r2, r3, #15
 8003c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4422      	add	r2, r4
 8003c42:	609a      	str	r2, [r3, #8]
}
 8003c44:	bf00      	nop
 8003c46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c50:	51eb851f 	.word	0x51eb851f

08003c54 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f103 0208 	add.w	r2, r3, #8
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c6c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f103 0208 	add.w	r2, r3, #8
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f103 0208 	add.w	r2, r3, #8
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b085      	sub	sp, #20
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cc4:	d103      	bne.n	8003cce <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	e00c      	b.n	8003ce8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3308      	adds	r3, #8
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	e002      	b.n	8003cdc <vListInsert+0x2e>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d2f6      	bcs.n	8003cd6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	601a      	str	r2, [r3, #0]
}
 8003d14:	bf00      	nop
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6892      	ldr	r2, [r2, #8]
 8003d36:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6852      	ldr	r2, [r2, #4]
 8003d40:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d103      	bne.n	8003d54 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	1e5a      	subs	r2, r3, #1
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10b      	bne.n	8003da4 <xQueueGenericReset+0x30>
        __asm volatile
 8003d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d90:	f383 8811 	msr	BASEPRI, r3
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	f3bf 8f4f 	dsb	sy
 8003d9c:	60fb      	str	r3, [r7, #12]
    }
 8003d9e:	bf00      	nop
 8003da0:	bf00      	nop
 8003da2:	e7fd      	b.n	8003da0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d05d      	beq.n	8003e66 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d059      	beq.n	8003e66 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dba:	2100      	movs	r1, #0
 8003dbc:	fba3 2302 	umull	r2, r3, r3, r2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d000      	beq.n	8003dc6 <xQueueGenericReset+0x52>
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d14c      	bne.n	8003e66 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8003dcc:	f002 fc9e 	bl	800670c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd8:	6939      	ldr	r1, [r7, #16]
 8003dda:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ddc:	fb01 f303 	mul.w	r3, r1, r3
 8003de0:	441a      	add	r2, r3
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	2200      	movs	r2, #0
 8003dea:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	6939      	ldr	r1, [r7, #16]
 8003e00:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003e02:	fb01 f303 	mul.w	r3, r1, r3
 8003e06:	441a      	add	r2, r3
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	22ff      	movs	r2, #255	@ 0xff
 8003e10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	22ff      	movs	r2, #255	@ 0xff
 8003e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d114      	bne.n	8003e4c <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01a      	beq.n	8003e60 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	3310      	adds	r3, #16
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 fa4e 	bl	80052d0 <xTaskRemoveFromEventList>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d012      	beq.n	8003e60 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003e3a:	4b16      	ldr	r3, [pc, #88]	@ (8003e94 <xQueueGenericReset+0x120>)
 8003e3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	e009      	b.n	8003e60 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	3310      	adds	r3, #16
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff feff 	bl	8003c54 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	3324      	adds	r3, #36	@ 0x24
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff fefa 	bl	8003c54 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8003e60:	f002 fc86 	bl	8006770 <vPortExitCritical>
 8003e64:	e001      	b.n	8003e6a <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10b      	bne.n	8003e88 <xQueueGenericReset+0x114>
        __asm volatile
 8003e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	60bb      	str	r3, [r7, #8]
    }
 8003e82:	bf00      	nop
 8003e84:	bf00      	nop
 8003e86:	e7fd      	b.n	8003e84 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003e88:	697b      	ldr	r3, [r7, #20]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	e000ed04 	.word	0xe000ed04

08003e98 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08a      	sub	sp, #40	@ 0x28
 8003e9c:	af02      	add	r7, sp, #8
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d02e      	beq.n	8003f0e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d000      	beq.n	8003ec0 <xQueueGenericCreate+0x28>
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d123      	bne.n	8003f0e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003ece:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8003ed2:	d81c      	bhi.n	8003f0e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	fb02 f303 	mul.w	r3, r2, r3
 8003edc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	3350      	adds	r3, #80	@ 0x50
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f002 fd3c 	bl	8006960 <pvPortMalloc>
 8003ee8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d01d      	beq.n	8003f2c <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	3350      	adds	r3, #80	@ 0x50
 8003ef8:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003efa:	79fa      	ldrb	r2, [r7, #7]
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	4613      	mov	r3, r2
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	68b9      	ldr	r1, [r7, #8]
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 f815 	bl	8003f36 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003f0c:	e00e      	b.n	8003f2c <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10b      	bne.n	8003f2c <xQueueGenericCreate+0x94>
        __asm volatile
 8003f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	613b      	str	r3, [r7, #16]
    }
 8003f26:	bf00      	nop
 8003f28:	bf00      	nop
 8003f2a:	e7fd      	b.n	8003f28 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003f2c:	69fb      	ldr	r3, [r7, #28]
    }
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3720      	adds	r7, #32
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b084      	sub	sp, #16
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	607a      	str	r2, [r7, #4]
 8003f42:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d103      	bne.n	8003f52 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	e002      	b.n	8003f58 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f64:	2101      	movs	r1, #1
 8003f66:	69b8      	ldr	r0, [r7, #24]
 8003f68:	f7ff ff04 	bl	8003d74 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	78fa      	ldrb	r2, [r7, #3]
 8003f70:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003f74:	bf00      	nop
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08e      	sub	sp, #56	@ 0x38
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8003f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10b      	bne.n	8003fb0 <xQueueGenericSend+0x34>
        __asm volatile
 8003f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8003faa:	bf00      	nop
 8003fac:	bf00      	nop
 8003fae:	e7fd      	b.n	8003fac <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d103      	bne.n	8003fbe <xQueueGenericSend+0x42>
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <xQueueGenericSend+0x46>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <xQueueGenericSend+0x48>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10b      	bne.n	8003fe0 <xQueueGenericSend+0x64>
        __asm volatile
 8003fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fcc:	f383 8811 	msr	BASEPRI, r3
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8003fda:	bf00      	nop
 8003fdc:	bf00      	nop
 8003fde:	e7fd      	b.n	8003fdc <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d103      	bne.n	8003fee <xQueueGenericSend+0x72>
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <xQueueGenericSend+0x76>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <xQueueGenericSend+0x78>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10b      	bne.n	8004010 <xQueueGenericSend+0x94>
        __asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	623b      	str	r3, [r7, #32]
    }
 800400a:	bf00      	nop
 800400c:	bf00      	nop
 800400e:	e7fd      	b.n	800400c <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004010:	f001 fb72 	bl	80056f8 <xTaskGetSchedulerState>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d102      	bne.n	8004020 <xQueueGenericSend+0xa4>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <xQueueGenericSend+0xa8>
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <xQueueGenericSend+0xaa>
 8004024:	2300      	movs	r3, #0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10b      	bne.n	8004042 <xQueueGenericSend+0xc6>
        __asm volatile
 800402a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800402e:	f383 8811 	msr	BASEPRI, r3
 8004032:	f3bf 8f6f 	isb	sy
 8004036:	f3bf 8f4f 	dsb	sy
 800403a:	61fb      	str	r3, [r7, #28]
    }
 800403c:	bf00      	nop
 800403e:	bf00      	nop
 8004040:	e7fd      	b.n	800403e <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004042:	f002 fb63 	bl	800670c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004048:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800404a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800404e:	429a      	cmp	r2, r3
 8004050:	d302      	bcc.n	8004058 <xQueueGenericSend+0xdc>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b02      	cmp	r3, #2
 8004056:	d129      	bne.n	80040ac <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	68b9      	ldr	r1, [r7, #8]
 800405c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800405e:	f000 fab1 	bl	80045c4 <prvCopyDataToQueue>
 8004062:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	2b00      	cmp	r3, #0
 800406a:	d010      	beq.n	800408e <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800406c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406e:	3324      	adds	r3, #36	@ 0x24
 8004070:	4618      	mov	r0, r3
 8004072:	f001 f92d 	bl	80052d0 <xTaskRemoveFromEventList>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d013      	beq.n	80040a4 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800407c:	4b3f      	ldr	r3, [pc, #252]	@ (800417c <xQueueGenericSend+0x200>)
 800407e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	e00a      	b.n	80040a4 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800408e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004090:	2b00      	cmp	r3, #0
 8004092:	d007      	beq.n	80040a4 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004094:	4b39      	ldr	r3, [pc, #228]	@ (800417c <xQueueGenericSend+0x200>)
 8004096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80040a4:	f002 fb64 	bl	8006770 <vPortExitCritical>
                return pdPASS;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e063      	b.n	8004174 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d103      	bne.n	80040ba <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80040b2:	f002 fb5d 	bl	8006770 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	e05c      	b.n	8004174 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80040ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d106      	bne.n	80040ce <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80040c0:	f107 0314 	add.w	r3, r7, #20
 80040c4:	4618      	mov	r0, r3
 80040c6:	f001 f9db 	bl	8005480 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80040ca:	2301      	movs	r3, #1
 80040cc:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80040ce:	f002 fb4f 	bl	8006770 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80040d2:	f000 fe03 	bl	8004cdc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80040d6:	f002 fb19 	bl	800670c <vPortEnterCritical>
 80040da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040e0:	b25b      	sxtb	r3, r3
 80040e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040e6:	d103      	bne.n	80040f0 <xQueueGenericSend+0x174>
 80040e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040f6:	b25b      	sxtb	r3, r3
 80040f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040fc:	d103      	bne.n	8004106 <xQueueGenericSend+0x18a>
 80040fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004106:	f002 fb33 	bl	8006770 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800410a:	1d3a      	adds	r2, r7, #4
 800410c:	f107 0314 	add.w	r3, r7, #20
 8004110:	4611      	mov	r1, r2
 8004112:	4618      	mov	r0, r3
 8004114:	f001 f9ca 	bl	80054ac <xTaskCheckForTimeOut>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d124      	bne.n	8004168 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800411e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004120:	f000 fb48 	bl	80047b4 <prvIsQueueFull>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d018      	beq.n	800415c <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800412a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800412c:	3310      	adds	r3, #16
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	4611      	mov	r1, r2
 8004132:	4618      	mov	r0, r3
 8004134:	f001 f860 	bl	80051f8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004138:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800413a:	f000 fad3 	bl	80046e4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800413e:	f000 fddb 	bl	8004cf8 <xTaskResumeAll>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	f47f af7c 	bne.w	8004042 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 800414a:	4b0c      	ldr	r3, [pc, #48]	@ (800417c <xQueueGenericSend+0x200>)
 800414c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	e772      	b.n	8004042 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800415c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800415e:	f000 fac1 	bl	80046e4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004162:	f000 fdc9 	bl	8004cf8 <xTaskResumeAll>
 8004166:	e76c      	b.n	8004042 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004168:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800416a:	f000 fabb 	bl	80046e4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800416e:	f000 fdc3 	bl	8004cf8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004172:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004174:	4618      	mov	r0, r3
 8004176:	3738      	adds	r7, #56	@ 0x38
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	e000ed04 	.word	0xe000ed04

08004180 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b090      	sub	sp, #64	@ 0x40
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8004192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10b      	bne.n	80041b0 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80041aa:	bf00      	nop
 80041ac:	bf00      	nop
 80041ae:	e7fd      	b.n	80041ac <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d103      	bne.n	80041be <xQueueGenericSendFromISR+0x3e>
 80041b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <xQueueGenericSendFromISR+0x42>
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <xQueueGenericSendFromISR+0x44>
 80041c2:	2300      	movs	r3, #0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10b      	bne.n	80041e0 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 80041c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80041da:	bf00      	nop
 80041dc:	bf00      	nop
 80041de:	e7fd      	b.n	80041dc <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d103      	bne.n	80041ee <xQueueGenericSendFromISR+0x6e>
 80041e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <xQueueGenericSendFromISR+0x72>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <xQueueGenericSendFromISR+0x74>
 80041f2:	2300      	movs	r3, #0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10b      	bne.n	8004210 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 80041f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	623b      	str	r3, [r7, #32]
    }
 800420a:	bf00      	nop
 800420c:	bf00      	nop
 800420e:	e7fd      	b.n	800420c <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004210:	f002 fb64 	bl	80068dc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004214:	f3ef 8211 	mrs	r2, BASEPRI
 8004218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800421c:	f383 8811 	msr	BASEPRI, r3
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	61fa      	str	r2, [r7, #28]
 800422a:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800422c:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800422e:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004232:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004238:	429a      	cmp	r2, r3
 800423a:	d302      	bcc.n	8004242 <xQueueGenericSendFromISR+0xc2>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d13f      	bne.n	80042c2 <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004244:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004248:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800424c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004250:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	68b9      	ldr	r1, [r7, #8]
 8004256:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004258:	f000 f9b4 	bl	80045c4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800425c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004260:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004264:	d112      	bne.n	800428c <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426a:	2b00      	cmp	r3, #0
 800426c:	d026      	beq.n	80042bc <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800426e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004270:	3324      	adds	r3, #36	@ 0x24
 8004272:	4618      	mov	r0, r3
 8004274:	f001 f82c 	bl	80052d0 <xTaskRemoveFromEventList>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d01e      	beq.n	80042bc <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d01b      	beq.n	80042bc <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	e017      	b.n	80042bc <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800428c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004290:	2b7f      	cmp	r3, #127	@ 0x7f
 8004292:	d10b      	bne.n	80042ac <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	617b      	str	r3, [r7, #20]
    }
 80042a6:	bf00      	nop
 80042a8:	bf00      	nop
 80042aa:	e7fd      	b.n	80042a8 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80042ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80042b0:	3301      	adds	r3, #1
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	b25a      	sxtb	r2, r3
 80042b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80042bc:	2301      	movs	r3, #1
 80042be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 80042c0:	e001      	b.n	80042c6 <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80042d0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80042d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3740      	adds	r7, #64	@ 0x40
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08c      	sub	sp, #48	@ 0x30
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80042e8:	2300      	movs	r3, #0
 80042ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80042f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10b      	bne.n	800430e <xQueueReceive+0x32>
        __asm volatile
 80042f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	623b      	str	r3, [r7, #32]
    }
 8004308:	bf00      	nop
 800430a:	bf00      	nop
 800430c:	e7fd      	b.n	800430a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d103      	bne.n	800431c <xQueueReceive+0x40>
 8004314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <xQueueReceive+0x44>
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <xQueueReceive+0x46>
 8004320:	2300      	movs	r3, #0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10b      	bne.n	800433e <xQueueReceive+0x62>
        __asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	61fb      	str	r3, [r7, #28]
    }
 8004338:	bf00      	nop
 800433a:	bf00      	nop
 800433c:	e7fd      	b.n	800433a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800433e:	f001 f9db 	bl	80056f8 <xTaskGetSchedulerState>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d102      	bne.n	800434e <xQueueReceive+0x72>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <xQueueReceive+0x76>
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <xQueueReceive+0x78>
 8004352:	2300      	movs	r3, #0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10b      	bne.n	8004370 <xQueueReceive+0x94>
        __asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	61bb      	str	r3, [r7, #24]
    }
 800436a:	bf00      	nop
 800436c:	bf00      	nop
 800436e:	e7fd      	b.n	800436c <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004370:	f002 f9cc 	bl	800670c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004378:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800437a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437c:	2b00      	cmp	r3, #0
 800437e:	d01f      	beq.n	80043c0 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004380:	68b9      	ldr	r1, [r7, #8]
 8004382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004384:	f000 f988 	bl	8004698 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	1e5a      	subs	r2, r3, #1
 800438c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00f      	beq.n	80043b8 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439a:	3310      	adds	r3, #16
 800439c:	4618      	mov	r0, r3
 800439e:	f000 ff97 	bl	80052d0 <xTaskRemoveFromEventList>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d007      	beq.n	80043b8 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80043a8:	4b3c      	ldr	r3, [pc, #240]	@ (800449c <xQueueReceive+0x1c0>)
 80043aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80043b8:	f002 f9da 	bl	8006770 <vPortExitCritical>
                return pdPASS;
 80043bc:	2301      	movs	r3, #1
 80043be:	e069      	b.n	8004494 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d103      	bne.n	80043ce <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80043c6:	f002 f9d3 	bl	8006770 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80043ca:	2300      	movs	r3, #0
 80043cc:	e062      	b.n	8004494 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80043ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d106      	bne.n	80043e2 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80043d4:	f107 0310 	add.w	r3, r7, #16
 80043d8:	4618      	mov	r0, r3
 80043da:	f001 f851 	bl	8005480 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80043de:	2301      	movs	r3, #1
 80043e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80043e2:	f002 f9c5 	bl	8006770 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80043e6:	f000 fc79 	bl	8004cdc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80043ea:	f002 f98f 	bl	800670c <vPortEnterCritical>
 80043ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043f4:	b25b      	sxtb	r3, r3
 80043f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043fa:	d103      	bne.n	8004404 <xQueueReceive+0x128>
 80043fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004406:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800440a:	b25b      	sxtb	r3, r3
 800440c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004410:	d103      	bne.n	800441a <xQueueReceive+0x13e>
 8004412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800441a:	f002 f9a9 	bl	8006770 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800441e:	1d3a      	adds	r2, r7, #4
 8004420:	f107 0310 	add.w	r3, r7, #16
 8004424:	4611      	mov	r1, r2
 8004426:	4618      	mov	r0, r3
 8004428:	f001 f840 	bl	80054ac <xTaskCheckForTimeOut>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d123      	bne.n	800447a <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004432:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004434:	f000 f9a8 	bl	8004788 <prvIsQueueEmpty>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d017      	beq.n	800446e <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800443e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004440:	3324      	adds	r3, #36	@ 0x24
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	4611      	mov	r1, r2
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fed6 	bl	80051f8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800444c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800444e:	f000 f949 	bl	80046e4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004452:	f000 fc51 	bl	8004cf8 <xTaskResumeAll>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d189      	bne.n	8004370 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 800445c:	4b0f      	ldr	r3, [pc, #60]	@ (800449c <xQueueReceive+0x1c0>)
 800445e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	e780      	b.n	8004370 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800446e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004470:	f000 f938 	bl	80046e4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004474:	f000 fc40 	bl	8004cf8 <xTaskResumeAll>
 8004478:	e77a      	b.n	8004370 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800447a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800447c:	f000 f932 	bl	80046e4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004480:	f000 fc3a 	bl	8004cf8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004484:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004486:	f000 f97f 	bl	8004788 <prvIsQueueEmpty>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	f43f af6f 	beq.w	8004370 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004492:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004494:	4618      	mov	r0, r3
 8004496:	3730      	adds	r7, #48	@ 0x30
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	e000ed04 	.word	0xe000ed04

080044a0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b090      	sub	sp, #64	@ 0x40
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 80044b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10b      	bne.n	80044ce <xQueueReceiveFromISR+0x2e>
        __asm volatile
 80044b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80044c8:	bf00      	nop
 80044ca:	bf00      	nop
 80044cc:	e7fd      	b.n	80044ca <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d103      	bne.n	80044dc <xQueueReceiveFromISR+0x3c>
 80044d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <xQueueReceiveFromISR+0x40>
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <xQueueReceiveFromISR+0x42>
 80044e0:	2300      	movs	r3, #0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10b      	bne.n	80044fe <xQueueReceiveFromISR+0x5e>
        __asm volatile
 80044e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80044f8:	bf00      	nop
 80044fa:	bf00      	nop
 80044fc:	e7fd      	b.n	80044fa <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044fe:	f002 f9ed 	bl	80068dc <vPortValidateInterruptPriority>
        __asm volatile
 8004502:	f3ef 8211 	mrs	r2, BASEPRI
 8004506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	623a      	str	r2, [r7, #32]
 8004518:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800451a:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800451c:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800451e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004522:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004526:	2b00      	cmp	r3, #0
 8004528:	d03f      	beq.n	80045aa <xQueueReceiveFromISR+0x10a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800452a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800452c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004530:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004534:	68b9      	ldr	r1, [r7, #8]
 8004536:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004538:	f000 f8ae 	bl	8004698 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800453c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453e:	1e5a      	subs	r2, r3, #1
 8004540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004542:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8004544:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004548:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800454c:	d112      	bne.n	8004574 <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800454e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d026      	beq.n	80045a4 <xQueueReceiveFromISR+0x104>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004558:	3310      	adds	r3, #16
 800455a:	4618      	mov	r0, r3
 800455c:	f000 feb8 	bl	80052d0 <xTaskRemoveFromEventList>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d01e      	beq.n	80045a4 <xQueueReceiveFromISR+0x104>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01b      	beq.n	80045a4 <xQueueReceiveFromISR+0x104>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	e017      	b.n	80045a4 <xQueueReceiveFromISR+0x104>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8004574:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004578:	2b7f      	cmp	r3, #127	@ 0x7f
 800457a:	d10b      	bne.n	8004594 <xQueueReceiveFromISR+0xf4>
        __asm volatile
 800457c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	61bb      	str	r3, [r7, #24]
    }
 800458e:	bf00      	nop
 8004590:	bf00      	nop
 8004592:	e7fd      	b.n	8004590 <xQueueReceiveFromISR+0xf0>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004594:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004598:	3301      	adds	r3, #1
 800459a:	b2db      	uxtb	r3, r3
 800459c:	b25a      	sxtb	r2, r3
 800459e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 80045a4:	2301      	movs	r3, #1
 80045a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045a8:	e001      	b.n	80045ae <xQueueReceiveFromISR+0x10e>
        }
        else
        {
            xReturn = pdFAIL;
 80045aa:	2300      	movs	r3, #0
 80045ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045b0:	617b      	str	r3, [r7, #20]
        __asm volatile
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f383 8811 	msr	BASEPRI, r3
    }
 80045b8:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80045ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3740      	adds	r7, #64	@ 0x40
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10d      	bne.n	80045fe <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d14d      	bne.n	8004686 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f001 f8a0 	bl	8005734 <xTaskPriorityDisinherit>
 80045f4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	609a      	str	r2, [r3, #8]
 80045fc:	e043      	b.n	8004686 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d119      	bne.n	8004638 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6858      	ldr	r0, [r3, #4]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460c:	461a      	mov	r2, r3
 800460e:	68b9      	ldr	r1, [r7, #8]
 8004610:	f002 fbd4 	bl	8006dbc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461c:	441a      	add	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	429a      	cmp	r2, r3
 800462c:	d32b      	bcc.n	8004686 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	605a      	str	r2, [r3, #4]
 8004636:	e026      	b.n	8004686 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	68d8      	ldr	r0, [r3, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004640:	461a      	mov	r2, r3
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	f002 fbba 	bl	8006dbc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004650:	425b      	negs	r3, r3
 8004652:	441a      	add	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d207      	bcs.n	8004674 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466c:	425b      	negs	r3, r3
 800466e:	441a      	add	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d105      	bne.n	8004686 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	3b01      	subs	r3, #1
 8004684:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800468e:	697b      	ldr	r3, [r7, #20]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d018      	beq.n	80046dc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b2:	441a      	add	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d303      	bcc.n	80046cc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68d9      	ldr	r1, [r3, #12]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d4:	461a      	mov	r2, r3
 80046d6:	6838      	ldr	r0, [r7, #0]
 80046d8:	f002 fb70 	bl	8006dbc <memcpy>
    }
}
 80046dc:	bf00      	nop
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80046ec:	f002 f80e 	bl	800670c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046f6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80046f8:	e011      	b.n	800471e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d012      	beq.n	8004728 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	3324      	adds	r3, #36	@ 0x24
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fde2 	bl	80052d0 <xTaskRemoveFromEventList>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8004712:	f000 ff33 	bl	800557c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004716:	7bfb      	ldrb	r3, [r7, #15]
 8004718:	3b01      	subs	r3, #1
 800471a:	b2db      	uxtb	r3, r3
 800471c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800471e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004722:	2b00      	cmp	r3, #0
 8004724:	dce9      	bgt.n	80046fa <prvUnlockQueue+0x16>
 8004726:	e000      	b.n	800472a <prvUnlockQueue+0x46>
                        break;
 8004728:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	22ff      	movs	r2, #255	@ 0xff
 800472e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8004732:	f002 f81d 	bl	8006770 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004736:	f001 ffe9 	bl	800670c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004740:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004742:	e011      	b.n	8004768 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d012      	beq.n	8004772 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3310      	adds	r3, #16
 8004750:	4618      	mov	r0, r3
 8004752:	f000 fdbd 	bl	80052d0 <xTaskRemoveFromEventList>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800475c:	f000 ff0e 	bl	800557c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004760:	7bbb      	ldrb	r3, [r7, #14]
 8004762:	3b01      	subs	r3, #1
 8004764:	b2db      	uxtb	r3, r3
 8004766:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004768:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800476c:	2b00      	cmp	r3, #0
 800476e:	dce9      	bgt.n	8004744 <prvUnlockQueue+0x60>
 8004770:	e000      	b.n	8004774 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004772:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	22ff      	movs	r2, #255	@ 0xff
 8004778:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800477c:	f001 fff8 	bl	8006770 <vPortExitCritical>
}
 8004780:	bf00      	nop
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004790:	f001 ffbc 	bl	800670c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004798:	2b00      	cmp	r3, #0
 800479a:	d102      	bne.n	80047a2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800479c:	2301      	movs	r3, #1
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	e001      	b.n	80047a6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80047a6:	f001 ffe3 	bl	8006770 <vPortExitCritical>

    return xReturn;
 80047aa:	68fb      	ldr	r3, [r7, #12]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80047bc:	f001 ffa6 	bl	800670c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d102      	bne.n	80047d2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80047cc:	2301      	movs	r3, #1
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	e001      	b.n	80047d6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80047d6:	f001 ffcb 	bl	8006770 <vPortExitCritical>

    return xReturn;
 80047da:	68fb      	ldr	r3, [r7, #12]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10b      	bne.n	800480e <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 80047f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047fa:	f383 8811 	msr	BASEPRI, r3
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	60fb      	str	r3, [r7, #12]
    }
 8004808:	bf00      	nop
 800480a:	bf00      	nop
 800480c:	e7fd      	b.n	800480a <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004816:	429a      	cmp	r2, r3
 8004818:	d102      	bne.n	8004820 <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 800481a:	2301      	movs	r3, #1
 800481c:	617b      	str	r3, [r7, #20]
 800481e:	e001      	b.n	8004824 <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004824:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004826:	4618      	mov	r0, r3
 8004828:	371c      	adds	r7, #28
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
	...

08004834 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10b      	bne.n	800485c <vQueueAddToRegistry+0x28>
        __asm volatile
 8004844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	60fb      	str	r3, [r7, #12]
    }
 8004856:	bf00      	nop
 8004858:	bf00      	nop
 800485a:	e7fd      	b.n	8004858 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800485c:	2300      	movs	r3, #0
 800485e:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d024      	beq.n	80048b0 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	e01e      	b.n	80048aa <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800486c:	4a18      	ldr	r2, [pc, #96]	@ (80048d0 <vQueueAddToRegistry+0x9c>)
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	00db      	lsls	r3, r3, #3
 8004872:	4413      	add	r3, r2
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	429a      	cmp	r2, r3
 800487a:	d105      	bne.n	8004888 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	4a13      	ldr	r2, [pc, #76]	@ (80048d0 <vQueueAddToRegistry+0x9c>)
 8004882:	4413      	add	r3, r2
 8004884:	613b      	str	r3, [r7, #16]
                    break;
 8004886:	e013      	b.n	80048b0 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10a      	bne.n	80048a4 <vQueueAddToRegistry+0x70>
 800488e:	4a10      	ldr	r2, [pc, #64]	@ (80048d0 <vQueueAddToRegistry+0x9c>)
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d104      	bne.n	80048a4 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	4a0c      	ldr	r2, [pc, #48]	@ (80048d0 <vQueueAddToRegistry+0x9c>)
 80048a0:	4413      	add	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	3301      	adds	r3, #1
 80048a8:	617b      	str	r3, [r7, #20]
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b07      	cmp	r3, #7
 80048ae:	d9dd      	bls.n	800486c <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d005      	beq.n	80048c2 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80048c2:	bf00      	nop
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	20000108 	.word	0x20000108

080048d4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80048e4:	f001 ff12 	bl	800670c <vPortEnterCritical>
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80048ee:	b25b      	sxtb	r3, r3
 80048f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048f4:	d103      	bne.n	80048fe <vQueueWaitForMessageRestricted+0x2a>
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004904:	b25b      	sxtb	r3, r3
 8004906:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800490a:	d103      	bne.n	8004914 <vQueueWaitForMessageRestricted+0x40>
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004914:	f001 ff2c 	bl	8006770 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491c:	2b00      	cmp	r3, #0
 800491e:	d106      	bne.n	800492e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	3324      	adds	r3, #36	@ 0x24
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	68b9      	ldr	r1, [r7, #8]
 8004928:	4618      	mov	r0, r3
 800492a:	f000 fc8b 	bl	8005244 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800492e:	6978      	ldr	r0, [r7, #20]
 8004930:	f7ff fed8 	bl	80046e4 <prvUnlockQueue>
    }
 8004934:	bf00      	nop
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800493c:	b580      	push	{r7, lr}
 800493e:	b08c      	sub	sp, #48	@ 0x30
 8004940:	af04      	add	r7, sp, #16
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	603b      	str	r3, [r7, #0]
 8004948:	4613      	mov	r3, r2
 800494a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800494c:	88fb      	ldrh	r3, [r7, #6]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4618      	mov	r0, r3
 8004952:	f002 f805 	bl	8006960 <pvPortMalloc>
 8004956:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00e      	beq.n	800497c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800495e:	2058      	movs	r0, #88	@ 0x58
 8004960:	f001 fffe 	bl	8006960 <pvPortMalloc>
 8004964:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	631a      	str	r2, [r3, #48]	@ 0x30
 8004972:	e005      	b.n	8004980 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8004974:	6978      	ldr	r0, [r7, #20]
 8004976:	f002 f8d5 	bl	8006b24 <vPortFree>
 800497a:	e001      	b.n	8004980 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800497c:	2300      	movs	r3, #0
 800497e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d013      	beq.n	80049ae <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004986:	88fa      	ldrh	r2, [r7, #6]
 8004988:	2300      	movs	r3, #0
 800498a:	9303      	str	r3, [sp, #12]
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	9302      	str	r3, [sp, #8]
 8004990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004992:	9301      	str	r3, [sp, #4]
 8004994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	68b9      	ldr	r1, [r7, #8]
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 f80e 	bl	80049be <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80049a2:	69f8      	ldr	r0, [r7, #28]
 80049a4:	f000 f8b2 	bl	8004b0c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80049a8:	2301      	movs	r3, #1
 80049aa:	61bb      	str	r3, [r7, #24]
 80049ac:	e002      	b.n	80049b4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80049b2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80049b4:	69bb      	ldr	r3, [r7, #24]
    }
 80049b6:	4618      	mov	r0, r3
 80049b8:	3720      	adds	r7, #32
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b088      	sub	sp, #32
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	60f8      	str	r0, [r7, #12]
 80049c6:	60b9      	str	r1, [r7, #8]
 80049c8:	607a      	str	r2, [r7, #4]
 80049ca:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80049cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ce:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	461a      	mov	r2, r3
 80049d6:	21a5      	movs	r1, #165	@ 0xa5
 80049d8:	f002 f9c4 	bl	8006d64 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80049dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80049e6:	3b01      	subs	r3, #1
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	f023 0307 	bic.w	r3, r3, #7
 80049f4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00b      	beq.n	8004a18 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	617b      	str	r3, [r7, #20]
    }
 8004a12:	bf00      	nop
 8004a14:	bf00      	nop
 8004a16:	e7fd      	b.n	8004a14 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d01f      	beq.n	8004a5e <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
 8004a22:	e012      	b.n	8004a4a <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	4413      	add	r3, r2
 8004a2a:	7819      	ldrb	r1, [r3, #0]
 8004a2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	4413      	add	r3, r2
 8004a32:	3334      	adds	r3, #52	@ 0x34
 8004a34:	460a      	mov	r2, r1
 8004a36:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d006      	beq.n	8004a52 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	3301      	adds	r3, #1
 8004a48:	61fb      	str	r3, [r7, #28]
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	2b09      	cmp	r3, #9
 8004a4e:	d9e9      	bls.n	8004a24 <prvInitialiseNewTask+0x66>
 8004a50:	e000      	b.n	8004a54 <prvInitialiseNewTask+0x96>
            {
                break;
 8004a52:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004a5c:	e003      	b.n	8004a66 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d90b      	bls.n	8004a84 <prvInitialiseNewTask+0xc6>
        __asm volatile
 8004a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	613b      	str	r3, [r7, #16]
    }
 8004a7e:	bf00      	nop
 8004a80:	bf00      	nop
 8004a82:	e7fd      	b.n	8004a80 <prvInitialiseNewTask+0xc2>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d901      	bls.n	8004a8e <prvInitialiseNewTask+0xd0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a8a:	2304      	movs	r3, #4
 8004a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a92:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8004a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a98:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff f8f5 	bl	8003c94 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aac:	3318      	adds	r3, #24
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff f8f0 	bl	8003c94 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ab8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004abc:	f1c3 0205 	rsb	r2, r3, #5
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ac8:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004acc:	3350      	adds	r3, #80	@ 0x50
 8004ace:	2204      	movs	r2, #4
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f002 f946 	bl	8006d64 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ada:	3354      	adds	r3, #84	@ 0x54
 8004adc:	2201      	movs	r2, #1
 8004ade:	2100      	movs	r1, #0
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f002 f93f 	bl	8006d64 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	68f9      	ldr	r1, [r7, #12]
 8004aea:	69b8      	ldr	r0, [r7, #24]
 8004aec:	f001 fcda 	bl	80064a4 <pxPortInitialiseStack>
 8004af0:	4602      	mov	r2, r0
 8004af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <prvInitialiseNewTask+0x144>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004afe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b00:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004b02:	bf00      	nop
 8004b04:	3720      	adds	r7, #32
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004b14:	f001 fdfa 	bl	800670c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004b18:	4b40      	ldr	r3, [pc, #256]	@ (8004c1c <prvAddNewTaskToReadyList+0x110>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	4a3f      	ldr	r2, [pc, #252]	@ (8004c1c <prvAddNewTaskToReadyList+0x110>)
 8004b20:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004b22:	4b3f      	ldr	r3, [pc, #252]	@ (8004c20 <prvAddNewTaskToReadyList+0x114>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d109      	bne.n	8004b3e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004b2a:	4a3d      	ldr	r2, [pc, #244]	@ (8004c20 <prvAddNewTaskToReadyList+0x114>)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b30:	4b3a      	ldr	r3, [pc, #232]	@ (8004c1c <prvAddNewTaskToReadyList+0x110>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d110      	bne.n	8004b5a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004b38:	f000 fd44 	bl	80055c4 <prvInitialiseTaskLists>
 8004b3c:	e00d      	b.n	8004b5a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004b3e:	4b39      	ldr	r3, [pc, #228]	@ (8004c24 <prvAddNewTaskToReadyList+0x118>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d109      	bne.n	8004b5a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b46:	4b36      	ldr	r3, [pc, #216]	@ (8004c20 <prvAddNewTaskToReadyList+0x114>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d802      	bhi.n	8004b5a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004b54:	4a32      	ldr	r2, [pc, #200]	@ (8004c20 <prvAddNewTaskToReadyList+0x114>)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004b5a:	4b33      	ldr	r3, [pc, #204]	@ (8004c28 <prvAddNewTaskToReadyList+0x11c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	4a31      	ldr	r2, [pc, #196]	@ (8004c28 <prvAddNewTaskToReadyList+0x11c>)
 8004b62:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b64:	4b30      	ldr	r3, [pc, #192]	@ (8004c28 <prvAddNewTaskToReadyList+0x11c>)
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b70:	2201      	movs	r2, #1
 8004b72:	409a      	lsls	r2, r3
 8004b74:	4b2d      	ldr	r3, [pc, #180]	@ (8004c2c <prvAddNewTaskToReadyList+0x120>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	4a2c      	ldr	r2, [pc, #176]	@ (8004c2c <prvAddNewTaskToReadyList+0x120>)
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b82:	492b      	ldr	r1, [pc, #172]	@ (8004c30 <prvAddNewTaskToReadyList+0x124>)
 8004b84:	4613      	mov	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	3304      	adds	r3, #4
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	609a      	str	r2, [r3, #8]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	60da      	str	r2, [r3, #12]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	3204      	adds	r2, #4
 8004baa:	605a      	str	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	1d1a      	adds	r2, r3, #4
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	609a      	str	r2, [r3, #8]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bb8:	4613      	mov	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8004c30 <prvAddNewTaskToReadyList+0x124>)
 8004bc2:	441a      	add	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	615a      	str	r2, [r3, #20]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bcc:	4918      	ldr	r1, [pc, #96]	@ (8004c30 <prvAddNewTaskToReadyList+0x124>)
 8004bce:	4613      	mov	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	440b      	add	r3, r1
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	1c59      	adds	r1, r3, #1
 8004bdc:	4814      	ldr	r0, [pc, #80]	@ (8004c30 <prvAddNewTaskToReadyList+0x124>)
 8004bde:	4613      	mov	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4403      	add	r3, r0
 8004be8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004bea:	f001 fdc1 	bl	8006770 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004bee:	4b0d      	ldr	r3, [pc, #52]	@ (8004c24 <prvAddNewTaskToReadyList+0x118>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00e      	beq.n	8004c14 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8004c20 <prvAddNewTaskToReadyList+0x114>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d207      	bcs.n	8004c14 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004c04:	4b0b      	ldr	r3, [pc, #44]	@ (8004c34 <prvAddNewTaskToReadyList+0x128>)
 8004c06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004c14:	bf00      	nop
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	20000220 	.word	0x20000220
 8004c20:	20000148 	.word	0x20000148
 8004c24:	2000022c 	.word	0x2000022c
 8004c28:	2000023c 	.word	0x2000023c
 8004c2c:	20000228 	.word	0x20000228
 8004c30:	2000014c 	.word	0x2000014c
 8004c34:	e000ed04 	.word	0xe000ed04

08004c38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8004c3e:	4b20      	ldr	r3, [pc, #128]	@ (8004cc0 <vTaskStartScheduler+0x88>)
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	2300      	movs	r3, #0
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	2300      	movs	r3, #0
 8004c48:	2282      	movs	r2, #130	@ 0x82
 8004c4a:	491e      	ldr	r1, [pc, #120]	@ (8004cc4 <vTaskStartScheduler+0x8c>)
 8004c4c:	481e      	ldr	r0, [pc, #120]	@ (8004cc8 <vTaskStartScheduler+0x90>)
 8004c4e:	f7ff fe75 	bl	800493c <xTaskCreate>
 8004c52:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d102      	bne.n	8004c60 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8004c5a:	f001 f997 	bl	8005f8c <xTimerCreateTimerTask>
 8004c5e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d116      	bne.n	8004c94 <vTaskStartScheduler+0x5c>
        __asm volatile
 8004c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	60bb      	str	r3, [r7, #8]
    }
 8004c78:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004c7a:	4b14      	ldr	r3, [pc, #80]	@ (8004ccc <vTaskStartScheduler+0x94>)
 8004c7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c80:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004c82:	4b13      	ldr	r3, [pc, #76]	@ (8004cd0 <vTaskStartScheduler+0x98>)
 8004c84:	2201      	movs	r2, #1
 8004c86:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c88:	4b12      	ldr	r3, [pc, #72]	@ (8004cd4 <vTaskStartScheduler+0x9c>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8004c8e:	f001 fc99 	bl	80065c4 <xPortStartScheduler>
 8004c92:	e00f      	b.n	8004cb4 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c9a:	d10b      	bne.n	8004cb4 <vTaskStartScheduler+0x7c>
        __asm volatile
 8004c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	607b      	str	r3, [r7, #4]
    }
 8004cae:	bf00      	nop
 8004cb0:	bf00      	nop
 8004cb2:	e7fd      	b.n	8004cb0 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004cb4:	4b08      	ldr	r3, [pc, #32]	@ (8004cd8 <vTaskStartScheduler+0xa0>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
}
 8004cb8:	bf00      	nop
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	20000244 	.word	0x20000244
 8004cc4:	08006f00 	.word	0x08006f00
 8004cc8:	08005595 	.word	0x08005595
 8004ccc:	20000240 	.word	0x20000240
 8004cd0:	2000022c 	.word	0x2000022c
 8004cd4:	20000224 	.word	0x20000224
 8004cd8:	2000000c 	.word	0x2000000c

08004cdc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004ce0:	4b04      	ldr	r3, [pc, #16]	@ (8004cf4 <vTaskSuspendAll+0x18>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	4a03      	ldr	r2, [pc, #12]	@ (8004cf4 <vTaskSuspendAll+0x18>)
 8004ce8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004cea:	bf00      	nop
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	20000248 	.word	0x20000248

08004cf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004d06:	4b71      	ldr	r3, [pc, #452]	@ (8004ecc <xTaskResumeAll+0x1d4>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10b      	bne.n	8004d26 <xTaskResumeAll+0x2e>
        __asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	607b      	str	r3, [r7, #4]
    }
 8004d20:	bf00      	nop
 8004d22:	bf00      	nop
 8004d24:	e7fd      	b.n	8004d22 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004d26:	f001 fcf1 	bl	800670c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004d2a:	4b68      	ldr	r3, [pc, #416]	@ (8004ecc <xTaskResumeAll+0x1d4>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	4a66      	ldr	r2, [pc, #408]	@ (8004ecc <xTaskResumeAll+0x1d4>)
 8004d32:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d34:	4b65      	ldr	r3, [pc, #404]	@ (8004ecc <xTaskResumeAll+0x1d4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f040 80c0 	bne.w	8004ebe <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d3e:	4b64      	ldr	r3, [pc, #400]	@ (8004ed0 <xTaskResumeAll+0x1d8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 80bb 	beq.w	8004ebe <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d48:	e08a      	b.n	8004e60 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d4a:	4b62      	ldr	r3, [pc, #392]	@ (8004ed4 <xTaskResumeAll+0x1dc>)
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d56:	613b      	str	r3, [r7, #16]
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	69fa      	ldr	r2, [r7, #28]
 8004d5e:	6a12      	ldr	r2, [r2, #32]
 8004d60:	609a      	str	r2, [r3, #8]
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	69d2      	ldr	r2, [r2, #28]
 8004d6a:	605a      	str	r2, [r3, #4]
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	3318      	adds	r3, #24
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d103      	bne.n	8004d80 <xTaskResumeAll+0x88>
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	6a1a      	ldr	r2, [r3, #32]
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	605a      	str	r2, [r3, #4]
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	2200      	movs	r2, #0
 8004d84:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	1e5a      	subs	r2, r3, #1
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	68d2      	ldr	r2, [r2, #12]
 8004d9e:	609a      	str	r2, [r3, #8]
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	6892      	ldr	r2, [r2, #8]
 8004da8:	605a      	str	r2, [r3, #4]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	3304      	adds	r3, #4
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d103      	bne.n	8004dbe <xTaskResumeAll+0xc6>
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	605a      	str	r2, [r3, #4]
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	615a      	str	r2, [r3, #20]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	1e5a      	subs	r2, r3, #1
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	409a      	lsls	r2, r3
 8004dd6:	4b40      	ldr	r3, [pc, #256]	@ (8004ed8 <xTaskResumeAll+0x1e0>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	4a3e      	ldr	r2, [pc, #248]	@ (8004ed8 <xTaskResumeAll+0x1e0>)
 8004dde:	6013      	str	r3, [r2, #0]
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004de4:	493d      	ldr	r1, [pc, #244]	@ (8004edc <xTaskResumeAll+0x1e4>)
 8004de6:	4613      	mov	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	440b      	add	r3, r1
 8004df0:	3304      	adds	r3, #4
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	60bb      	str	r3, [r7, #8]
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	609a      	str	r2, [r3, #8]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	60da      	str	r2, [r3, #12]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	69fa      	ldr	r2, [r7, #28]
 8004e0a:	3204      	adds	r2, #4
 8004e0c:	605a      	str	r2, [r3, #4]
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	1d1a      	adds	r2, r3, #4
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	609a      	str	r2, [r3, #8]
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4a2e      	ldr	r2, [pc, #184]	@ (8004edc <xTaskResumeAll+0x1e4>)
 8004e24:	441a      	add	r2, r3
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	615a      	str	r2, [r3, #20]
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e2e:	492b      	ldr	r1, [pc, #172]	@ (8004edc <xTaskResumeAll+0x1e4>)
 8004e30:	4613      	mov	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	1c59      	adds	r1, r3, #1
 8004e3e:	4827      	ldr	r0, [pc, #156]	@ (8004edc <xTaskResumeAll+0x1e4>)
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4403      	add	r3, r0
 8004e4a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e50:	4b23      	ldr	r3, [pc, #140]	@ (8004ee0 <xTaskResumeAll+0x1e8>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d302      	bcc.n	8004e60 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8004e5a:	4b22      	ldr	r3, [pc, #136]	@ (8004ee4 <xTaskResumeAll+0x1ec>)
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e60:	4b1c      	ldr	r3, [pc, #112]	@ (8004ed4 <xTaskResumeAll+0x1dc>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f47f af70 	bne.w	8004d4a <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004e70:	f000 fc26 	bl	80056c0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e74:	4b1c      	ldr	r3, [pc, #112]	@ (8004ee8 <xTaskResumeAll+0x1f0>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d010      	beq.n	8004ea2 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004e80:	f000 f846 	bl	8004f10 <xTaskIncrementTick>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8004e8a:	4b16      	ldr	r3, [pc, #88]	@ (8004ee4 <xTaskResumeAll+0x1ec>)
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1f1      	bne.n	8004e80 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8004e9c:	4b12      	ldr	r3, [pc, #72]	@ (8004ee8 <xTaskResumeAll+0x1f0>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004ea2:	4b10      	ldr	r3, [pc, #64]	@ (8004ee4 <xTaskResumeAll+0x1ec>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d009      	beq.n	8004ebe <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004eae:	4b0f      	ldr	r3, [pc, #60]	@ (8004eec <xTaskResumeAll+0x1f4>)
 8004eb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004ebe:	f001 fc57 	bl	8006770 <vPortExitCritical>

    return xAlreadyYielded;
 8004ec2:	69bb      	ldr	r3, [r7, #24]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3720      	adds	r7, #32
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20000248 	.word	0x20000248
 8004ed0:	20000220 	.word	0x20000220
 8004ed4:	200001e0 	.word	0x200001e0
 8004ed8:	20000228 	.word	0x20000228
 8004edc:	2000014c 	.word	0x2000014c
 8004ee0:	20000148 	.word	0x20000148
 8004ee4:	20000234 	.word	0x20000234
 8004ee8:	20000230 	.word	0x20000230
 8004eec:	e000ed04 	.word	0xe000ed04

08004ef0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004ef6:	4b05      	ldr	r3, [pc, #20]	@ (8004f0c <xTaskGetTickCount+0x1c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004efc:	687b      	ldr	r3, [r7, #4]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	20000224 	.word	0x20000224

08004f10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08a      	sub	sp, #40	@ 0x28
 8004f14:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004f16:	2300      	movs	r3, #0
 8004f18:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f1a:	4b7e      	ldr	r3, [pc, #504]	@ (8005114 <xTaskIncrementTick+0x204>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f040 80ed 	bne.w	80050fe <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f24:	4b7c      	ldr	r3, [pc, #496]	@ (8005118 <xTaskIncrementTick+0x208>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004f2c:	4a7a      	ldr	r2, [pc, #488]	@ (8005118 <xTaskIncrementTick+0x208>)
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d121      	bne.n	8004f7c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8004f38:	4b78      	ldr	r3, [pc, #480]	@ (800511c <xTaskIncrementTick+0x20c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00b      	beq.n	8004f5a <xTaskIncrementTick+0x4a>
        __asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	607b      	str	r3, [r7, #4]
    }
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop
 8004f58:	e7fd      	b.n	8004f56 <xTaskIncrementTick+0x46>
 8004f5a:	4b70      	ldr	r3, [pc, #448]	@ (800511c <xTaskIncrementTick+0x20c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	61fb      	str	r3, [r7, #28]
 8004f60:	4b6f      	ldr	r3, [pc, #444]	@ (8005120 <xTaskIncrementTick+0x210>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a6d      	ldr	r2, [pc, #436]	@ (800511c <xTaskIncrementTick+0x20c>)
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	4a6d      	ldr	r2, [pc, #436]	@ (8005120 <xTaskIncrementTick+0x210>)
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	4b6d      	ldr	r3, [pc, #436]	@ (8005124 <xTaskIncrementTick+0x214>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3301      	adds	r3, #1
 8004f74:	4a6b      	ldr	r2, [pc, #428]	@ (8005124 <xTaskIncrementTick+0x214>)
 8004f76:	6013      	str	r3, [r2, #0]
 8004f78:	f000 fba2 	bl	80056c0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004f7c:	4b6a      	ldr	r3, [pc, #424]	@ (8005128 <xTaskIncrementTick+0x218>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6a3a      	ldr	r2, [r7, #32]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	f0c0 80a6 	bcc.w	80050d4 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f88:	4b64      	ldr	r3, [pc, #400]	@ (800511c <xTaskIncrementTick+0x20c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d104      	bne.n	8004f9c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f92:	4b65      	ldr	r3, [pc, #404]	@ (8005128 <xTaskIncrementTick+0x218>)
 8004f94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f98:	601a      	str	r2, [r3, #0]
                    break;
 8004f9a:	e09b      	b.n	80050d4 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f9c:	4b5f      	ldr	r3, [pc, #380]	@ (800511c <xTaskIncrementTick+0x20c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004fac:	6a3a      	ldr	r2, [r7, #32]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d203      	bcs.n	8004fbc <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004fb4:	4a5c      	ldr	r2, [pc, #368]	@ (8005128 <xTaskIncrementTick+0x218>)
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004fba:	e08b      	b.n	80050d4 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	68d2      	ldr	r2, [r2, #12]
 8004fca:	609a      	str	r2, [r3, #8]
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	6892      	ldr	r2, [r2, #8]
 8004fd4:	605a      	str	r2, [r3, #4]
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d103      	bne.n	8004fea <xTaskIncrementTick+0xda>
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	605a      	str	r2, [r3, #4]
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	2200      	movs	r2, #0
 8004fee:	615a      	str	r2, [r3, #20]
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	1e5a      	subs	r2, r3, #1
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01e      	beq.n	8005040 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	6a12      	ldr	r2, [r2, #32]
 8005010:	609a      	str	r2, [r3, #8]
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	69d2      	ldr	r2, [r2, #28]
 800501a:	605a      	str	r2, [r3, #4]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	3318      	adds	r3, #24
 8005024:	429a      	cmp	r2, r3
 8005026:	d103      	bne.n	8005030 <xTaskIncrementTick+0x120>
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	6a1a      	ldr	r2, [r3, #32]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	605a      	str	r2, [r3, #4]
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	2200      	movs	r2, #0
 8005034:	629a      	str	r2, [r3, #40]	@ 0x28
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	1e5a      	subs	r2, r3, #1
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005044:	2201      	movs	r2, #1
 8005046:	409a      	lsls	r2, r3
 8005048:	4b38      	ldr	r3, [pc, #224]	@ (800512c <xTaskIncrementTick+0x21c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4313      	orrs	r3, r2
 800504e:	4a37      	ldr	r2, [pc, #220]	@ (800512c <xTaskIncrementTick+0x21c>)
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005056:	4936      	ldr	r1, [pc, #216]	@ (8005130 <xTaskIncrementTick+0x220>)
 8005058:	4613      	mov	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	440b      	add	r3, r1
 8005062:	3304      	adds	r3, #4
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	60bb      	str	r3, [r7, #8]
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	609a      	str	r2, [r3, #8]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	60da      	str	r2, [r3, #12]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	3204      	adds	r2, #4
 800507e:	605a      	str	r2, [r3, #4]
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	1d1a      	adds	r2, r3, #4
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	609a      	str	r2, [r3, #8]
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800508c:	4613      	mov	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4a26      	ldr	r2, [pc, #152]	@ (8005130 <xTaskIncrementTick+0x220>)
 8005096:	441a      	add	r2, r3
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	615a      	str	r2, [r3, #20]
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050a0:	4923      	ldr	r1, [pc, #140]	@ (8005130 <xTaskIncrementTick+0x220>)
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	1c59      	adds	r1, r3, #1
 80050b0:	481f      	ldr	r0, [pc, #124]	@ (8005130 <xTaskIncrementTick+0x220>)
 80050b2:	4613      	mov	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4403      	add	r3, r0
 80050bc:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050c2:	4b1c      	ldr	r3, [pc, #112]	@ (8005134 <xTaskIncrementTick+0x224>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c8:	429a      	cmp	r2, r3
 80050ca:	f4ff af5d 	bcc.w	8004f88 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 80050ce:	2301      	movs	r3, #1
 80050d0:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050d2:	e759      	b.n	8004f88 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050d4:	4b17      	ldr	r3, [pc, #92]	@ (8005134 <xTaskIncrementTick+0x224>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050da:	4915      	ldr	r1, [pc, #84]	@ (8005130 <xTaskIncrementTick+0x220>)
 80050dc:	4613      	mov	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d901      	bls.n	80050f0 <xTaskIncrementTick+0x1e0>
                {
                    xSwitchRequired = pdTRUE;
 80050ec:	2301      	movs	r3, #1
 80050ee:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80050f0:	4b11      	ldr	r3, [pc, #68]	@ (8005138 <xTaskIncrementTick+0x228>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d007      	beq.n	8005108 <xTaskIncrementTick+0x1f8>
                {
                    xSwitchRequired = pdTRUE;
 80050f8:	2301      	movs	r3, #1
 80050fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80050fc:	e004      	b.n	8005108 <xTaskIncrementTick+0x1f8>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80050fe:	4b0f      	ldr	r3, [pc, #60]	@ (800513c <xTaskIncrementTick+0x22c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3301      	adds	r3, #1
 8005104:	4a0d      	ldr	r2, [pc, #52]	@ (800513c <xTaskIncrementTick+0x22c>)
 8005106:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800510a:	4618      	mov	r0, r3
 800510c:	3728      	adds	r7, #40	@ 0x28
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20000248 	.word	0x20000248
 8005118:	20000224 	.word	0x20000224
 800511c:	200001d8 	.word	0x200001d8
 8005120:	200001dc 	.word	0x200001dc
 8005124:	20000238 	.word	0x20000238
 8005128:	20000240 	.word	0x20000240
 800512c:	20000228 	.word	0x20000228
 8005130:	2000014c 	.word	0x2000014c
 8005134:	20000148 	.word	0x20000148
 8005138:	20000234 	.word	0x20000234
 800513c:	20000230 	.word	0x20000230

08005140 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005146:	4b27      	ldr	r3, [pc, #156]	@ (80051e4 <vTaskSwitchContext+0xa4>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800514e:	4b26      	ldr	r3, [pc, #152]	@ (80051e8 <vTaskSwitchContext+0xa8>)
 8005150:	2201      	movs	r2, #1
 8005152:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005154:	e040      	b.n	80051d8 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8005156:	4b24      	ldr	r3, [pc, #144]	@ (80051e8 <vTaskSwitchContext+0xa8>)
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800515c:	4b23      	ldr	r3, [pc, #140]	@ (80051ec <vTaskSwitchContext+0xac>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	fab3 f383 	clz	r3, r3
 8005168:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800516a:	7afb      	ldrb	r3, [r7, #11]
 800516c:	f1c3 031f 	rsb	r3, r3, #31
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	491f      	ldr	r1, [pc, #124]	@ (80051f0 <vTaskSwitchContext+0xb0>)
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	440b      	add	r3, r1
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10b      	bne.n	800519e <vTaskSwitchContext+0x5e>
        __asm volatile
 8005186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518a:	f383 8811 	msr	BASEPRI, r3
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	607b      	str	r3, [r7, #4]
    }
 8005198:	bf00      	nop
 800519a:	bf00      	nop
 800519c:	e7fd      	b.n	800519a <vTaskSwitchContext+0x5a>
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	4613      	mov	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4a11      	ldr	r2, [pc, #68]	@ (80051f0 <vTaskSwitchContext+0xb0>)
 80051aa:	4413      	add	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	605a      	str	r2, [r3, #4]
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	3308      	adds	r3, #8
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d104      	bne.n	80051ce <vTaskSwitchContext+0x8e>
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	605a      	str	r2, [r3, #4]
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	4a07      	ldr	r2, [pc, #28]	@ (80051f4 <vTaskSwitchContext+0xb4>)
 80051d6:	6013      	str	r3, [r2, #0]
}
 80051d8:	bf00      	nop
 80051da:	371c      	adds	r7, #28
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	20000248 	.word	0x20000248
 80051e8:	20000234 	.word	0x20000234
 80051ec:	20000228 	.word	0x20000228
 80051f0:	2000014c 	.word	0x2000014c
 80051f4:	20000148 	.word	0x20000148

080051f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10b      	bne.n	8005220 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8005208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	60fb      	str	r3, [r7, #12]
    }
 800521a:	bf00      	nop
 800521c:	bf00      	nop
 800521e:	e7fd      	b.n	800521c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005220:	4b07      	ldr	r3, [pc, #28]	@ (8005240 <vTaskPlaceOnEventList+0x48>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3318      	adds	r3, #24
 8005226:	4619      	mov	r1, r3
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7fe fd40 	bl	8003cae <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800522e:	2101      	movs	r1, #1
 8005230:	6838      	ldr	r0, [r7, #0]
 8005232:	f000 fe2b 	bl	8005e8c <prvAddCurrentTaskToDelayedList>
}
 8005236:	bf00      	nop
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	20000148 	.word	0x20000148

08005244 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10b      	bne.n	800526e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8005256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525a:	f383 8811 	msr	BASEPRI, r3
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	613b      	str	r3, [r7, #16]
    }
 8005268:	bf00      	nop
 800526a:	bf00      	nop
 800526c:	e7fd      	b.n	800526a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	4b15      	ldr	r3, [pc, #84]	@ (80052cc <vTaskPlaceOnEventListRestricted+0x88>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	61da      	str	r2, [r3, #28]
 800527c:	4b13      	ldr	r3, [pc, #76]	@ (80052cc <vTaskPlaceOnEventListRestricted+0x88>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	6892      	ldr	r2, [r2, #8]
 8005284:	621a      	str	r2, [r3, #32]
 8005286:	4b11      	ldr	r3, [pc, #68]	@ (80052cc <vTaskPlaceOnEventListRestricted+0x88>)
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	3218      	adds	r2, #24
 8005290:	605a      	str	r2, [r3, #4]
 8005292:	4b0e      	ldr	r3, [pc, #56]	@ (80052cc <vTaskPlaceOnEventListRestricted+0x88>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f103 0218 	add.w	r2, r3, #24
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	609a      	str	r2, [r3, #8]
 800529e:	4b0b      	ldr	r3, [pc, #44]	@ (80052cc <vTaskPlaceOnEventListRestricted+0x88>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80052b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052ba:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80052bc:	6879      	ldr	r1, [r7, #4]
 80052be:	68b8      	ldr	r0, [r7, #8]
 80052c0:	f000 fde4 	bl	8005e8c <prvAddCurrentTaskToDelayedList>
    }
 80052c4:	bf00      	nop
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	20000148 	.word	0x20000148

080052d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80052d0:	b480      	push	{r7}
 80052d2:	b08b      	sub	sp, #44	@ 0x2c
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10b      	bne.n	80052fe <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	60fb      	str	r3, [r7, #12]
    }
 80052f8:	bf00      	nop
 80052fa:	bf00      	nop
 80052fc:	e7fd      	b.n	80052fa <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005302:	61fb      	str	r3, [r7, #28]
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	69db      	ldr	r3, [r3, #28]
 8005308:	6a3a      	ldr	r2, [r7, #32]
 800530a:	6a12      	ldr	r2, [r2, #32]
 800530c:	609a      	str	r2, [r3, #8]
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	6a3a      	ldr	r2, [r7, #32]
 8005314:	69d2      	ldr	r2, [r2, #28]
 8005316:	605a      	str	r2, [r3, #4]
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	3318      	adds	r3, #24
 8005320:	429a      	cmp	r2, r3
 8005322:	d103      	bne.n	800532c <xTaskRemoveFromEventList+0x5c>
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	6a1a      	ldr	r2, [r3, #32]
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	605a      	str	r2, [r3, #4]
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	2200      	movs	r2, #0
 8005330:	629a      	str	r2, [r3, #40]	@ 0x28
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	1e5a      	subs	r2, r3, #1
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800533c:	4b4a      	ldr	r3, [pc, #296]	@ (8005468 <xTaskRemoveFromEventList+0x198>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d15e      	bne.n	8005402 <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	6a3a      	ldr	r2, [r7, #32]
 8005350:	68d2      	ldr	r2, [r2, #12]
 8005352:	609a      	str	r2, [r3, #8]
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	6a3a      	ldr	r2, [r7, #32]
 800535a:	6892      	ldr	r2, [r2, #8]
 800535c:	605a      	str	r2, [r3, #4]
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	3304      	adds	r3, #4
 8005366:	429a      	cmp	r2, r3
 8005368:	d103      	bne.n	8005372 <xTaskRemoveFromEventList+0xa2>
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	68da      	ldr	r2, [r3, #12]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	605a      	str	r2, [r3, #4]
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	2200      	movs	r2, #0
 8005376:	615a      	str	r2, [r3, #20]
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	1e5a      	subs	r2, r3, #1
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005386:	2201      	movs	r2, #1
 8005388:	409a      	lsls	r2, r3
 800538a:	4b38      	ldr	r3, [pc, #224]	@ (800546c <xTaskRemoveFromEventList+0x19c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4313      	orrs	r3, r2
 8005390:	4a36      	ldr	r2, [pc, #216]	@ (800546c <xTaskRemoveFromEventList+0x19c>)
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005398:	4935      	ldr	r1, [pc, #212]	@ (8005470 <xTaskRemoveFromEventList+0x1a0>)
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	440b      	add	r3, r1
 80053a4:	3304      	adds	r3, #4
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	613b      	str	r3, [r7, #16]
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	609a      	str	r2, [r3, #8]
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	60da      	str	r2, [r3, #12]
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	6a3a      	ldr	r2, [r7, #32]
 80053be:	3204      	adds	r2, #4
 80053c0:	605a      	str	r2, [r3, #4]
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	1d1a      	adds	r2, r3, #4
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	609a      	str	r2, [r3, #8]
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4a26      	ldr	r2, [pc, #152]	@ (8005470 <xTaskRemoveFromEventList+0x1a0>)
 80053d8:	441a      	add	r2, r3
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	615a      	str	r2, [r3, #20]
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053e2:	4923      	ldr	r1, [pc, #140]	@ (8005470 <xTaskRemoveFromEventList+0x1a0>)
 80053e4:	4613      	mov	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	440b      	add	r3, r1
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	1c59      	adds	r1, r3, #1
 80053f2:	481f      	ldr	r0, [pc, #124]	@ (8005470 <xTaskRemoveFromEventList+0x1a0>)
 80053f4:	4613      	mov	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4403      	add	r3, r0
 80053fe:	6019      	str	r1, [r3, #0]
 8005400:	e01b      	b.n	800543a <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005402:	4b1c      	ldr	r3, [pc, #112]	@ (8005474 <xTaskRemoveFromEventList+0x1a4>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	61bb      	str	r3, [r7, #24]
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	61da      	str	r2, [r3, #28]
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	621a      	str	r2, [r3, #32]
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	6a3a      	ldr	r2, [r7, #32]
 800541c:	3218      	adds	r2, #24
 800541e:	605a      	str	r2, [r3, #4]
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	f103 0218 	add.w	r2, r3, #24
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	609a      	str	r2, [r3, #8]
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	4a11      	ldr	r2, [pc, #68]	@ (8005474 <xTaskRemoveFromEventList+0x1a4>)
 800542e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005430:	4b10      	ldr	r3, [pc, #64]	@ (8005474 <xTaskRemoveFromEventList+0x1a4>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3301      	adds	r3, #1
 8005436:	4a0f      	ldr	r2, [pc, #60]	@ (8005474 <xTaskRemoveFromEventList+0x1a4>)
 8005438:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800543e:	4b0e      	ldr	r3, [pc, #56]	@ (8005478 <xTaskRemoveFromEventList+0x1a8>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005444:	429a      	cmp	r2, r3
 8005446:	d905      	bls.n	8005454 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005448:	2301      	movs	r3, #1
 800544a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800544c:	4b0b      	ldr	r3, [pc, #44]	@ (800547c <xTaskRemoveFromEventList+0x1ac>)
 800544e:	2201      	movs	r2, #1
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	e001      	b.n	8005458 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8005454:	2300      	movs	r3, #0
 8005456:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8005458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800545a:	4618      	mov	r0, r3
 800545c:	372c      	adds	r7, #44	@ 0x2c
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	20000248 	.word	0x20000248
 800546c:	20000228 	.word	0x20000228
 8005470:	2000014c 	.word	0x2000014c
 8005474:	200001e0 	.word	0x200001e0
 8005478:	20000148 	.word	0x20000148
 800547c:	20000234 	.word	0x20000234

08005480 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005488:	4b06      	ldr	r3, [pc, #24]	@ (80054a4 <vTaskInternalSetTimeOutState+0x24>)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005490:	4b05      	ldr	r3, [pc, #20]	@ (80054a8 <vTaskInternalSetTimeOutState+0x28>)
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	605a      	str	r2, [r3, #4]
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	20000238 	.word	0x20000238
 80054a8:	20000224 	.word	0x20000224

080054ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b088      	sub	sp, #32
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10b      	bne.n	80054d4 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80054bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	613b      	str	r3, [r7, #16]
    }
 80054ce:	bf00      	nop
 80054d0:	bf00      	nop
 80054d2:	e7fd      	b.n	80054d0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10b      	bne.n	80054f2 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	60fb      	str	r3, [r7, #12]
    }
 80054ec:	bf00      	nop
 80054ee:	bf00      	nop
 80054f0:	e7fd      	b.n	80054ee <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80054f2:	f001 f90b 	bl	800670c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80054f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005574 <xTaskCheckForTimeOut+0xc8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800550e:	d102      	bne.n	8005516 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005510:	2300      	movs	r3, #0
 8005512:	61fb      	str	r3, [r7, #28]
 8005514:	e026      	b.n	8005564 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	4b17      	ldr	r3, [pc, #92]	@ (8005578 <xTaskCheckForTimeOut+0xcc>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d00a      	beq.n	8005538 <xTaskCheckForTimeOut+0x8c>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	429a      	cmp	r2, r3
 800552a:	d305      	bcc.n	8005538 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800552c:	2301      	movs	r3, #1
 800552e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	e015      	b.n	8005564 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	429a      	cmp	r2, r3
 8005540:	d20b      	bcs.n	800555a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	1ad2      	subs	r2, r2, r3
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7ff ff96 	bl	8005480 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005554:	2300      	movs	r3, #0
 8005556:	61fb      	str	r3, [r7, #28]
 8005558:	e004      	b.n	8005564 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005560:	2301      	movs	r3, #1
 8005562:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005564:	f001 f904 	bl	8006770 <vPortExitCritical>

    return xReturn;
 8005568:	69fb      	ldr	r3, [r7, #28]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3720      	adds	r7, #32
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20000224 	.word	0x20000224
 8005578:	20000238 	.word	0x20000238

0800557c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005580:	4b03      	ldr	r3, [pc, #12]	@ (8005590 <vTaskMissedYield+0x14>)
 8005582:	2201      	movs	r2, #1
 8005584:	601a      	str	r2, [r3, #0]
}
 8005586:	bf00      	nop
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	20000234 	.word	0x20000234

08005594 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800559c:	f000 f852 	bl	8005644 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80055a0:	4b06      	ldr	r3, [pc, #24]	@ (80055bc <prvIdleTask+0x28>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d9f9      	bls.n	800559c <prvIdleTask+0x8>
                {
                    taskYIELD();
 80055a8:	4b05      	ldr	r3, [pc, #20]	@ (80055c0 <prvIdleTask+0x2c>)
 80055aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80055b8:	e7f0      	b.n	800559c <prvIdleTask+0x8>
 80055ba:	bf00      	nop
 80055bc:	2000014c 	.word	0x2000014c
 80055c0:	e000ed04 	.word	0xe000ed04

080055c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055ca:	2300      	movs	r3, #0
 80055cc:	607b      	str	r3, [r7, #4]
 80055ce:	e00c      	b.n	80055ea <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	4613      	mov	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4a12      	ldr	r2, [pc, #72]	@ (8005624 <prvInitialiseTaskLists+0x60>)
 80055dc:	4413      	add	r3, r2
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fe fb38 	bl	8003c54 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3301      	adds	r3, #1
 80055e8:	607b      	str	r3, [r7, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	d9ef      	bls.n	80055d0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80055f0:	480d      	ldr	r0, [pc, #52]	@ (8005628 <prvInitialiseTaskLists+0x64>)
 80055f2:	f7fe fb2f 	bl	8003c54 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80055f6:	480d      	ldr	r0, [pc, #52]	@ (800562c <prvInitialiseTaskLists+0x68>)
 80055f8:	f7fe fb2c 	bl	8003c54 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80055fc:	480c      	ldr	r0, [pc, #48]	@ (8005630 <prvInitialiseTaskLists+0x6c>)
 80055fe:	f7fe fb29 	bl	8003c54 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005602:	480c      	ldr	r0, [pc, #48]	@ (8005634 <prvInitialiseTaskLists+0x70>)
 8005604:	f7fe fb26 	bl	8003c54 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005608:	480b      	ldr	r0, [pc, #44]	@ (8005638 <prvInitialiseTaskLists+0x74>)
 800560a:	f7fe fb23 	bl	8003c54 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800560e:	4b0b      	ldr	r3, [pc, #44]	@ (800563c <prvInitialiseTaskLists+0x78>)
 8005610:	4a05      	ldr	r2, [pc, #20]	@ (8005628 <prvInitialiseTaskLists+0x64>)
 8005612:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005614:	4b0a      	ldr	r3, [pc, #40]	@ (8005640 <prvInitialiseTaskLists+0x7c>)
 8005616:	4a05      	ldr	r2, [pc, #20]	@ (800562c <prvInitialiseTaskLists+0x68>)
 8005618:	601a      	str	r2, [r3, #0]
}
 800561a:	bf00      	nop
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	2000014c 	.word	0x2000014c
 8005628:	200001b0 	.word	0x200001b0
 800562c:	200001c4 	.word	0x200001c4
 8005630:	200001e0 	.word	0x200001e0
 8005634:	200001f4 	.word	0x200001f4
 8005638:	2000020c 	.word	0x2000020c
 800563c:	200001d8 	.word	0x200001d8
 8005640:	200001dc 	.word	0x200001dc

08005644 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800564a:	e019      	b.n	8005680 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800564c:	f001 f85e 	bl	800670c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005650:	4b10      	ldr	r3, [pc, #64]	@ (8005694 <prvCheckTasksWaitingTermination+0x50>)
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3304      	adds	r3, #4
 800565c:	4618      	mov	r0, r3
 800565e:	f7fe fb5f 	bl	8003d20 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005662:	4b0d      	ldr	r3, [pc, #52]	@ (8005698 <prvCheckTasksWaitingTermination+0x54>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3b01      	subs	r3, #1
 8005668:	4a0b      	ldr	r2, [pc, #44]	@ (8005698 <prvCheckTasksWaitingTermination+0x54>)
 800566a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800566c:	4b0b      	ldr	r3, [pc, #44]	@ (800569c <prvCheckTasksWaitingTermination+0x58>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	3b01      	subs	r3, #1
 8005672:	4a0a      	ldr	r2, [pc, #40]	@ (800569c <prvCheckTasksWaitingTermination+0x58>)
 8005674:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005676:	f001 f87b 	bl	8006770 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f810 	bl	80056a0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005680:	4b06      	ldr	r3, [pc, #24]	@ (800569c <prvCheckTasksWaitingTermination+0x58>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1e1      	bne.n	800564c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	200001f4 	.word	0x200001f4
 8005698:	20000220 	.word	0x20000220
 800569c:	20000208 	.word	0x20000208

080056a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ac:	4618      	mov	r0, r3
 80056ae:	f001 fa39 	bl	8006b24 <vPortFree>
                vPortFree( pxTCB );
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f001 fa36 	bl	8006b24 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80056b8:	bf00      	nop
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056c0:	b480      	push	{r7}
 80056c2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056c4:	4b0a      	ldr	r3, [pc, #40]	@ (80056f0 <prvResetNextTaskUnblockTime+0x30>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d104      	bne.n	80056d8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80056ce:	4b09      	ldr	r3, [pc, #36]	@ (80056f4 <prvResetNextTaskUnblockTime+0x34>)
 80056d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056d4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80056d6:	e005      	b.n	80056e4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80056d8:	4b05      	ldr	r3, [pc, #20]	@ (80056f0 <prvResetNextTaskUnblockTime+0x30>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a04      	ldr	r2, [pc, #16]	@ (80056f4 <prvResetNextTaskUnblockTime+0x34>)
 80056e2:	6013      	str	r3, [r2, #0]
}
 80056e4:	bf00      	nop
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	200001d8 	.word	0x200001d8
 80056f4:	20000240 	.word	0x20000240

080056f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80056fe:	4b0b      	ldr	r3, [pc, #44]	@ (800572c <xTaskGetSchedulerState+0x34>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d102      	bne.n	800570c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005706:	2301      	movs	r3, #1
 8005708:	607b      	str	r3, [r7, #4]
 800570a:	e008      	b.n	800571e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800570c:	4b08      	ldr	r3, [pc, #32]	@ (8005730 <xTaskGetSchedulerState+0x38>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d102      	bne.n	800571a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005714:	2302      	movs	r3, #2
 8005716:	607b      	str	r3, [r7, #4]
 8005718:	e001      	b.n	800571e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800571a:	2300      	movs	r3, #0
 800571c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800571e:	687b      	ldr	r3, [r7, #4]
    }
 8005720:	4618      	mov	r0, r3
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	2000022c 	.word	0x2000022c
 8005730:	20000248 	.word	0x20000248

08005734 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8005740:	2300      	movs	r3, #0
 8005742:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 808e 	beq.w	8005868 <xTaskPriorityDisinherit+0x134>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800574c:	4b49      	ldr	r3, [pc, #292]	@ (8005874 <xTaskPriorityDisinherit+0x140>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	429a      	cmp	r2, r3
 8005754:	d00b      	beq.n	800576e <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 8005756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	613b      	str	r3, [r7, #16]
    }
 8005768:	bf00      	nop
 800576a:	bf00      	nop
 800576c:	e7fd      	b.n	800576a <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10b      	bne.n	800578e <xTaskPriorityDisinherit+0x5a>
        __asm volatile
 8005776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	60fb      	str	r3, [r7, #12]
    }
 8005788:	bf00      	nop
 800578a:	bf00      	nop
 800578c:	e7fd      	b.n	800578a <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005792:	1e5a      	subs	r2, r3, #1
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d061      	beq.n	8005868 <xTaskPriorityDisinherit+0x134>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d15d      	bne.n	8005868 <xTaskPriorityDisinherit+0x134>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	3304      	adds	r3, #4
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7fe fab5 	bl	8003d20 <uxListRemove>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10a      	bne.n	80057d2 <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c0:	2201      	movs	r2, #1
 80057c2:	fa02 f303 	lsl.w	r3, r2, r3
 80057c6:	43da      	mvns	r2, r3
 80057c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005878 <xTaskPriorityDisinherit+0x144>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4013      	ands	r3, r2
 80057ce:	4a2a      	ldr	r2, [pc, #168]	@ (8005878 <xTaskPriorityDisinherit+0x144>)
 80057d0:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057de:	f1c3 0205 	rsb	r2, r3, #5
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ea:	2201      	movs	r2, #1
 80057ec:	409a      	lsls	r2, r3
 80057ee:	4b22      	ldr	r3, [pc, #136]	@ (8005878 <xTaskPriorityDisinherit+0x144>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	4a20      	ldr	r2, [pc, #128]	@ (8005878 <xTaskPriorityDisinherit+0x144>)
 80057f6:	6013      	str	r3, [r2, #0]
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057fc:	491f      	ldr	r1, [pc, #124]	@ (800587c <xTaskPriorityDisinherit+0x148>)
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	440b      	add	r3, r1
 8005808:	3304      	adds	r3, #4
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	617b      	str	r3, [r7, #20]
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	609a      	str	r2, [r3, #8]
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	60da      	str	r2, [r3, #12]
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	3204      	adds	r2, #4
 8005824:	605a      	str	r2, [r3, #4]
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	1d1a      	adds	r2, r3, #4
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	609a      	str	r2, [r3, #8]
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005832:	4613      	mov	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4a10      	ldr	r2, [pc, #64]	@ (800587c <xTaskPriorityDisinherit+0x148>)
 800583c:	441a      	add	r2, r3
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	615a      	str	r2, [r3, #20]
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005846:	490d      	ldr	r1, [pc, #52]	@ (800587c <xTaskPriorityDisinherit+0x148>)
 8005848:	4613      	mov	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	440b      	add	r3, r1
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	1c59      	adds	r1, r3, #1
 8005856:	4809      	ldr	r0, [pc, #36]	@ (800587c <xTaskPriorityDisinherit+0x148>)
 8005858:	4613      	mov	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4413      	add	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4403      	add	r3, r0
 8005862:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005864:	2301      	movs	r3, #1
 8005866:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005868:	69fb      	ldr	r3, [r7, #28]
    }
 800586a:	4618      	mov	r0, r3
 800586c:	3720      	adds	r7, #32
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000148 	.word	0x20000148
 8005878:	20000228 	.word	0x20000228
 800587c:	2000014c 	.word	0x2000014c

08005880 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00b      	beq.n	80058ac <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	613b      	str	r3, [r7, #16]
    }
 80058a6:	bf00      	nop
 80058a8:	bf00      	nop
 80058aa:	e7fd      	b.n	80058a8 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80058ac:	f000 ff2e 	bl	800670c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80058b0:	4b31      	ldr	r3, [pc, #196]	@ (8005978 <xTaskGenericNotifyWait+0xf8>)
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4413      	add	r3, r2
 80058b8:	3354      	adds	r3, #84	@ 0x54
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d022      	beq.n	8005908 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80058c2:	4b2d      	ldr	r3, [pc, #180]	@ (8005978 <xTaskGenericNotifyWait+0xf8>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	3214      	adds	r2, #20
 80058ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	43d2      	mvns	r2, r2
 80058d2:	4011      	ands	r1, r2
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	3214      	adds	r2, #20
 80058d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80058dc:	4b26      	ldr	r3, [pc, #152]	@ (8005978 <xTaskGenericNotifyWait+0xf8>)
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4413      	add	r3, r2
 80058e4:	3354      	adds	r3, #84	@ 0x54
 80058e6:	2201      	movs	r2, #1
 80058e8:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00b      	beq.n	8005908 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058f0:	2101      	movs	r1, #1
 80058f2:	6a38      	ldr	r0, [r7, #32]
 80058f4:	f000 faca 	bl	8005e8c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80058f8:	4b20      	ldr	r3, [pc, #128]	@ (800597c <xTaskGenericNotifyWait+0xfc>)
 80058fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005908:	f000 ff32 	bl	8006770 <vPortExitCritical>

        taskENTER_CRITICAL();
 800590c:	f000 fefe 	bl	800670c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d007      	beq.n	8005926 <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8005916:	4b18      	ldr	r3, [pc, #96]	@ (8005978 <xTaskGenericNotifyWait+0xf8>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	3214      	adds	r2, #20
 800591e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005926:	4b14      	ldr	r3, [pc, #80]	@ (8005978 <xTaskGenericNotifyWait+0xf8>)
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4413      	add	r3, r2
 800592e:	3354      	adds	r3, #84	@ 0x54
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d002      	beq.n	800593e <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8005938:	2300      	movs	r3, #0
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	e00e      	b.n	800595c <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800593e:	4b0e      	ldr	r3, [pc, #56]	@ (8005978 <xTaskGenericNotifyWait+0xf8>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	3214      	adds	r2, #20
 8005946:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	43d2      	mvns	r2, r2
 800594e:	4011      	ands	r1, r2
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	3214      	adds	r2, #20
 8005954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8005958:	2301      	movs	r3, #1
 800595a:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800595c:	4b06      	ldr	r3, [pc, #24]	@ (8005978 <xTaskGenericNotifyWait+0xf8>)
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4413      	add	r3, r2
 8005964:	3354      	adds	r3, #84	@ 0x54
 8005966:	2200      	movs	r2, #0
 8005968:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800596a:	f000 ff01 	bl	8006770 <vPortExitCritical>

        return xReturn;
 800596e:	697b      	ldr	r3, [r7, #20]
    }
 8005970:	4618      	mov	r0, r3
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	20000148 	.word	0x20000148
 800597c:	e000ed04 	.word	0xe000ed04

08005980 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005980:	b580      	push	{r7, lr}
 8005982:	b08e      	sub	sp, #56	@ 0x38
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800598e:	2301      	movs	r3, #1
 8005990:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00b      	beq.n	80059b0 <xTaskGenericNotify+0x30>
        __asm volatile
 8005998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	623b      	str	r3, [r7, #32]
    }
 80059aa:	bf00      	nop
 80059ac:	bf00      	nop
 80059ae:	e7fd      	b.n	80059ac <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10b      	bne.n	80059ce <xTaskGenericNotify+0x4e>
        __asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	61fb      	str	r3, [r7, #28]
    }
 80059c8:	bf00      	nop
 80059ca:	bf00      	nop
 80059cc:	e7fd      	b.n	80059ca <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 80059d2:	f000 fe9b 	bl	800670c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80059d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d006      	beq.n	80059ea <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80059dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	3214      	adds	r2, #20
 80059e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80059e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059e8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80059ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4413      	add	r3, r2
 80059f0:	3354      	adds	r3, #84	@ 0x54
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80059f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	4413      	add	r3, r2
 80059fe:	3354      	adds	r3, #84	@ 0x54
 8005a00:	2202      	movs	r2, #2
 8005a02:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005a04:	78fb      	ldrb	r3, [r7, #3]
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d83b      	bhi.n	8005a82 <xTaskGenericNotify+0x102>
 8005a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a10 <xTaskGenericNotify+0x90>)
 8005a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a10:	08005aa3 	.word	0x08005aa3
 8005a14:	08005a25 	.word	0x08005a25
 8005a18:	08005a41 	.word	0x08005a41
 8005a1c:	08005a59 	.word	0x08005a59
 8005a20:	08005a67 	.word	0x08005a67
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	3214      	adds	r2, #20
 8005a2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	ea42 0103 	orr.w	r1, r2, r3
 8005a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	3214      	adds	r2, #20
 8005a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005a3e:	e033      	b.n	8005aa8 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	3214      	adds	r2, #20
 8005a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a4a:	1c59      	adds	r1, r3, #1
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	3214      	adds	r2, #20
 8005a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005a56:	e027      	b.n	8005aa8 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	3214      	adds	r2, #20
 8005a5e:	6879      	ldr	r1, [r7, #4]
 8005a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005a64:	e020      	b.n	8005aa8 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005a66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d006      	beq.n	8005a7c <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	3214      	adds	r2, #20
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005a7a:	e015      	b.n	8005aa8 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8005a80:	e012      	b.n	8005aa8 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005a82:	4b4d      	ldr	r3, [pc, #308]	@ (8005bb8 <xTaskGenericNotify+0x238>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00d      	beq.n	8005aa6 <xTaskGenericNotify+0x126>
        __asm volatile
 8005a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a8e:	f383 8811 	msr	BASEPRI, r3
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	61bb      	str	r3, [r7, #24]
    }
 8005a9c:	bf00      	nop
 8005a9e:	bf00      	nop
 8005aa0:	e7fd      	b.n	8005a9e <xTaskGenericNotify+0x11e>
                    break;
 8005aa2:	bf00      	nop
 8005aa4:	e000      	b.n	8005aa8 <xTaskGenericNotify+0x128>

                    break;
 8005aa6:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005aa8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d17c      	bne.n	8005baa <xTaskGenericNotify+0x22a>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005abc:	68d2      	ldr	r2, [r2, #12]
 8005abe:	609a      	str	r2, [r3, #8]
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ac6:	6892      	ldr	r2, [r2, #8]
 8005ac8:	605a      	str	r2, [r3, #4]
 8005aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d103      	bne.n	8005ade <xTaskGenericNotify+0x15e>
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005adc:	605a      	str	r2, [r3, #4]
 8005ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	615a      	str	r2, [r3, #20]
 8005ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	1e5a      	subs	r2, r3, #1
 8005aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aec:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8005aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af2:	2201      	movs	r2, #1
 8005af4:	409a      	lsls	r2, r3
 8005af6:	4b31      	ldr	r3, [pc, #196]	@ (8005bbc <xTaskGenericNotify+0x23c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	4a2f      	ldr	r2, [pc, #188]	@ (8005bbc <xTaskGenericNotify+0x23c>)
 8005afe:	6013      	str	r3, [r2, #0]
 8005b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b04:	492e      	ldr	r1, [pc, #184]	@ (8005bc0 <xTaskGenericNotify+0x240>)
 8005b06:	4613      	mov	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	440b      	add	r3, r1
 8005b10:	3304      	adds	r3, #4
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b1a:	609a      	str	r2, [r3, #8]
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b22:	60da      	str	r2, [r3, #12]
 8005b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b2a:	3204      	adds	r2, #4
 8005b2c:	605a      	str	r2, [r3, #4]
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b30:	1d1a      	adds	r2, r3, #4
 8005b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b34:	609a      	str	r2, [r3, #8]
 8005b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4a1f      	ldr	r2, [pc, #124]	@ (8005bc0 <xTaskGenericNotify+0x240>)
 8005b44:	441a      	add	r2, r3
 8005b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b48:	615a      	str	r2, [r3, #20]
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b4e:	491c      	ldr	r1, [pc, #112]	@ (8005bc0 <xTaskGenericNotify+0x240>)
 8005b50:	4613      	mov	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	440b      	add	r3, r1
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	1c59      	adds	r1, r3, #1
 8005b5e:	4818      	ldr	r0, [pc, #96]	@ (8005bc0 <xTaskGenericNotify+0x240>)
 8005b60:	4613      	mov	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4403      	add	r3, r0
 8005b6a:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00b      	beq.n	8005b8c <xTaskGenericNotify+0x20c>
        __asm volatile
 8005b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b78:	f383 8811 	msr	BASEPRI, r3
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	617b      	str	r3, [r7, #20]
    }
 8005b86:	bf00      	nop
 8005b88:	bf00      	nop
 8005b8a:	e7fd      	b.n	8005b88 <xTaskGenericNotify+0x208>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b90:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc4 <xTaskGenericNotify+0x244>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d907      	bls.n	8005baa <xTaskGenericNotify+0x22a>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8005b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc8 <xTaskGenericNotify+0x248>)
 8005b9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005baa:	f000 fde1 	bl	8006770 <vPortExitCritical>

        return xReturn;
 8005bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3738      	adds	r7, #56	@ 0x38
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	20000224 	.word	0x20000224
 8005bbc:	20000228 	.word	0x20000228
 8005bc0:	2000014c 	.word	0x2000014c
 8005bc4:	20000148 	.word	0x20000148
 8005bc8:	e000ed04 	.word	0xe000ed04

08005bcc <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b092      	sub	sp, #72	@ 0x48
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
 8005bd8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10b      	bne.n	8005bfc <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005bf6:	bf00      	nop
 8005bf8:	bf00      	nop
 8005bfa:	e7fd      	b.n	8005bf8 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00b      	beq.n	8005c1a <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 8005c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005c14:	bf00      	nop
 8005c16:	bf00      	nop
 8005c18:	e7fd      	b.n	8005c16 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c1a:	f000 fe5f 	bl	80068dc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	643b      	str	r3, [r7, #64]	@ 0x40
        __asm volatile
 8005c22:	f3ef 8211 	mrs	r2, BASEPRI
 8005c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	623a      	str	r2, [r7, #32]
 8005c38:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8005c3a:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8005c3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d006      	beq.n	8005c52 <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005c44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	3214      	adds	r2, #20
 8005c4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005c4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c50:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005c52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	4413      	add	r3, r2
 8005c58:	3354      	adds	r3, #84	@ 0x54
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005c60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	4413      	add	r3, r2
 8005c66:	3354      	adds	r3, #84	@ 0x54
 8005c68:	2202      	movs	r2, #2
 8005c6a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005c6c:	78fb      	ldrb	r3, [r7, #3]
 8005c6e:	2b04      	cmp	r3, #4
 8005c70:	d83b      	bhi.n	8005cea <xTaskGenericNotifyFromISR+0x11e>
 8005c72:	a201      	add	r2, pc, #4	@ (adr r2, 8005c78 <xTaskGenericNotifyFromISR+0xac>)
 8005c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c78:	08005d0b 	.word	0x08005d0b
 8005c7c:	08005c8d 	.word	0x08005c8d
 8005c80:	08005ca9 	.word	0x08005ca9
 8005c84:	08005cc1 	.word	0x08005cc1
 8005c88:	08005ccf 	.word	0x08005ccf
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005c8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	3214      	adds	r2, #20
 8005c92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	ea42 0103 	orr.w	r1, r2, r3
 8005c9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	3214      	adds	r2, #20
 8005ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005ca6:	e033      	b.n	8005d10 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	3214      	adds	r2, #20
 8005cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb2:	1c59      	adds	r1, r3, #1
 8005cb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	3214      	adds	r2, #20
 8005cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005cbe:	e027      	b.n	8005d10 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005cc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	3214      	adds	r2, #20
 8005cc6:	6879      	ldr	r1, [r7, #4]
 8005cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005ccc:	e020      	b.n	8005d10 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005cce:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d006      	beq.n	8005ce4 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005cd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	3214      	adds	r2, #20
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005ce2:	e015      	b.n	8005d10 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 8005ce8:	e012      	b.n	8005d10 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005cea:	4b61      	ldr	r3, [pc, #388]	@ (8005e70 <xTaskGenericNotifyFromISR+0x2a4>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00d      	beq.n	8005d0e <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	61bb      	str	r3, [r7, #24]
    }
 8005d04:	bf00      	nop
 8005d06:	bf00      	nop
 8005d08:	e7fd      	b.n	8005d06 <xTaskGenericNotifyFromISR+0x13a>
                    break;
 8005d0a:	bf00      	nop
 8005d0c:	e000      	b.n	8005d10 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8005d0e:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005d10:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	f040 809f 	bne.w	8005e58 <xTaskGenericNotifyFromISR+0x28c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005d1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00b      	beq.n	8005d3a <xTaskGenericNotifyFromISR+0x16e>
        __asm volatile
 8005d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	617b      	str	r3, [r7, #20]
    }
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop
 8005d38:	e7fd      	b.n	8005d36 <xTaskGenericNotifyFromISR+0x16a>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8005e74 <xTaskGenericNotifyFromISR+0x2a8>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d15e      	bne.n	8005e00 <xTaskGenericNotifyFromISR+0x234>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d4e:	68d2      	ldr	r2, [r2, #12]
 8005d50:	609a      	str	r2, [r3, #8]
 8005d52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d58:	6892      	ldr	r2, [r2, #8]
 8005d5a:	605a      	str	r2, [r3, #4]
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d62:	3304      	adds	r3, #4
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d103      	bne.n	8005d70 <xTaskGenericNotifyFromISR+0x1a4>
 8005d68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d6e:	605a      	str	r2, [r3, #4]
 8005d70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d72:	2200      	movs	r2, #0
 8005d74:	615a      	str	r2, [r3, #20]
 8005d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	1e5a      	subs	r2, r3, #1
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005d80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d84:	2201      	movs	r2, #1
 8005d86:	409a      	lsls	r2, r3
 8005d88:	4b3b      	ldr	r3, [pc, #236]	@ (8005e78 <xTaskGenericNotifyFromISR+0x2ac>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	4a3a      	ldr	r2, [pc, #232]	@ (8005e78 <xTaskGenericNotifyFromISR+0x2ac>)
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d96:	4939      	ldr	r1, [pc, #228]	@ (8005e7c <xTaskGenericNotifyFromISR+0x2b0>)
 8005d98:	4613      	mov	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	440b      	add	r3, r1
 8005da2:	3304      	adds	r3, #4
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005da8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005daa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dac:	609a      	str	r2, [r3, #8]
 8005dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005db4:	60da      	str	r2, [r3, #12]
 8005db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005dbc:	3204      	adds	r2, #4
 8005dbe:	605a      	str	r2, [r3, #4]
 8005dc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dc2:	1d1a      	adds	r2, r3, #4
 8005dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc6:	609a      	str	r2, [r3, #8]
 8005dc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dcc:	4613      	mov	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4a29      	ldr	r2, [pc, #164]	@ (8005e7c <xTaskGenericNotifyFromISR+0x2b0>)
 8005dd6:	441a      	add	r2, r3
 8005dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dda:	615a      	str	r2, [r3, #20]
 8005ddc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005de0:	4926      	ldr	r1, [pc, #152]	@ (8005e7c <xTaskGenericNotifyFromISR+0x2b0>)
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	440b      	add	r3, r1
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	1c59      	adds	r1, r3, #1
 8005df0:	4822      	ldr	r0, [pc, #136]	@ (8005e7c <xTaskGenericNotifyFromISR+0x2b0>)
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4403      	add	r3, r0
 8005dfc:	6019      	str	r1, [r3, #0]
 8005dfe:	e01b      	b.n	8005e38 <xTaskGenericNotifyFromISR+0x26c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005e00:	4b1f      	ldr	r3, [pc, #124]	@ (8005e80 <xTaskGenericNotifyFromISR+0x2b4>)
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e0a:	61da      	str	r2, [r3, #28]
 8005e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e12:	621a      	str	r2, [r3, #32]
 8005e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e1a:	3218      	adds	r2, #24
 8005e1c:	605a      	str	r2, [r3, #4]
 8005e1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e20:	f103 0218 	add.w	r2, r3, #24
 8005e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e26:	609a      	str	r2, [r3, #8]
 8005e28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e2a:	4a15      	ldr	r2, [pc, #84]	@ (8005e80 <xTaskGenericNotifyFromISR+0x2b4>)
 8005e2c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e2e:	4b14      	ldr	r3, [pc, #80]	@ (8005e80 <xTaskGenericNotifyFromISR+0x2b4>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3301      	adds	r3, #1
 8005e34:	4a12      	ldr	r2, [pc, #72]	@ (8005e80 <xTaskGenericNotifyFromISR+0x2b4>)
 8005e36:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e3c:	4b11      	ldr	r3, [pc, #68]	@ (8005e84 <xTaskGenericNotifyFromISR+0x2b8>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d908      	bls.n	8005e58 <xTaskGenericNotifyFromISR+0x28c>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8005e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <xTaskGenericNotifyFromISR+0x286>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8005e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e4e:	2201      	movs	r2, #1
 8005e50:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8005e52:	4b0d      	ldr	r3, [pc, #52]	@ (8005e88 <xTaskGenericNotifyFromISR+0x2bc>)
 8005e54:	2201      	movs	r2, #1
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e5a:	613b      	str	r3, [r7, #16]
        __asm volatile
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	f383 8811 	msr	BASEPRI, r3
    }
 8005e62:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8005e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 8005e66:	4618      	mov	r0, r3
 8005e68:	3748      	adds	r7, #72	@ 0x48
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20000224 	.word	0x20000224
 8005e74:	20000248 	.word	0x20000248
 8005e78:	20000228 	.word	0x20000228
 8005e7c:	2000014c 	.word	0x2000014c
 8005e80:	200001e0 	.word	0x200001e0
 8005e84:	20000148 	.word	0x20000148
 8005e88:	20000234 	.word	0x20000234

08005e8c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005e96:	4b36      	ldr	r3, [pc, #216]	@ (8005f70 <prvAddCurrentTaskToDelayedList+0xe4>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e9c:	4b35      	ldr	r3, [pc, #212]	@ (8005f74 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fd ff3c 	bl	8003d20 <uxListRemove>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10b      	bne.n	8005ec6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005eae:	4b31      	ldr	r3, [pc, #196]	@ (8005f74 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eba:	43da      	mvns	r2, r3
 8005ebc:	4b2e      	ldr	r3, [pc, #184]	@ (8005f78 <prvAddCurrentTaskToDelayedList+0xec>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	4a2d      	ldr	r2, [pc, #180]	@ (8005f78 <prvAddCurrentTaskToDelayedList+0xec>)
 8005ec4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ecc:	d124      	bne.n	8005f18 <prvAddCurrentTaskToDelayedList+0x8c>
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d021      	beq.n	8005f18 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ed4:	4b29      	ldr	r3, [pc, #164]	@ (8005f7c <prvAddCurrentTaskToDelayedList+0xf0>)
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	613b      	str	r3, [r7, #16]
 8005eda:	4b26      	ldr	r3, [pc, #152]	@ (8005f74 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	609a      	str	r2, [r3, #8]
 8005ee2:	4b24      	ldr	r3, [pc, #144]	@ (8005f74 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	6892      	ldr	r2, [r2, #8]
 8005eea:	60da      	str	r2, [r3, #12]
 8005eec:	4b21      	ldr	r3, [pc, #132]	@ (8005f74 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	3204      	adds	r2, #4
 8005ef6:	605a      	str	r2, [r3, #4]
 8005ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8005f74 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	1d1a      	adds	r2, r3, #4
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	609a      	str	r2, [r3, #8]
 8005f02:	4b1c      	ldr	r3, [pc, #112]	@ (8005f74 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a1d      	ldr	r2, [pc, #116]	@ (8005f7c <prvAddCurrentTaskToDelayedList+0xf0>)
 8005f08:	615a      	str	r2, [r3, #20]
 8005f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8005f7c <prvAddCurrentTaskToDelayedList+0xf0>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	4a1a      	ldr	r2, [pc, #104]	@ (8005f7c <prvAddCurrentTaskToDelayedList+0xf0>)
 8005f12:	6013      	str	r3, [r2, #0]
 8005f14:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005f16:	e026      	b.n	8005f66 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f20:	4b14      	ldr	r3, [pc, #80]	@ (8005f74 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d209      	bcs.n	8005f44 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f30:	4b13      	ldr	r3, [pc, #76]	@ (8005f80 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	4b0f      	ldr	r3, [pc, #60]	@ (8005f74 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	f7fd feb6 	bl	8003cae <vListInsert>
}
 8005f42:	e010      	b.n	8005f66 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f44:	4b0f      	ldr	r3, [pc, #60]	@ (8005f84 <prvAddCurrentTaskToDelayedList+0xf8>)
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	4b0a      	ldr	r3, [pc, #40]	@ (8005f74 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4610      	mov	r0, r2
 8005f52:	f7fd feac 	bl	8003cae <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005f56:	4b0c      	ldr	r3, [pc, #48]	@ (8005f88 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d202      	bcs.n	8005f66 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8005f60:	4a09      	ldr	r2, [pc, #36]	@ (8005f88 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6013      	str	r3, [r2, #0]
}
 8005f66:	bf00      	nop
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20000224 	.word	0x20000224
 8005f74:	20000148 	.word	0x20000148
 8005f78:	20000228 	.word	0x20000228
 8005f7c:	2000020c 	.word	0x2000020c
 8005f80:	200001dc 	.word	0x200001dc
 8005f84:	200001d8 	.word	0x200001d8
 8005f88:	20000240 	.word	0x20000240

08005f8c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005f96:	f000 fa4f 	bl	8006438 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005f9a:	4b12      	ldr	r3, [pc, #72]	@ (8005fe4 <xTimerCreateTimerTask+0x58>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00b      	beq.n	8005fba <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8005fa2:	4b11      	ldr	r3, [pc, #68]	@ (8005fe8 <xTimerCreateTimerTask+0x5c>)
 8005fa4:	9301      	str	r3, [sp, #4]
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	2300      	movs	r3, #0
 8005fac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005fb0:	490e      	ldr	r1, [pc, #56]	@ (8005fec <xTimerCreateTimerTask+0x60>)
 8005fb2:	480f      	ldr	r0, [pc, #60]	@ (8005ff0 <xTimerCreateTimerTask+0x64>)
 8005fb4:	f7fe fcc2 	bl	800493c <xTaskCreate>
 8005fb8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10b      	bne.n	8005fd8 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	603b      	str	r3, [r7, #0]
    }
 8005fd2:	bf00      	nop
 8005fd4:	bf00      	nop
 8005fd6:	e7fd      	b.n	8005fd4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8005fd8:	687b      	ldr	r3, [r7, #4]
    }
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	2000027c 	.word	0x2000027c
 8005fe8:	20000280 	.word	0x20000280
 8005fec:	08006f08 	.word	0x08006f08
 8005ff0:	08006099 	.word	0x08006099

08005ff4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006000:	e008      	b.n	8006014 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	4413      	add	r3, r2
 800600a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	699a      	ldr	r2, [r3, #24]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	18d1      	adds	r1, r2, r3
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 f8df 	bl	80061e4 <prvInsertTimerInActiveList>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1ea      	bne.n	8006002 <prvReloadTimer+0xe>
        }
    }
 800602c:	bf00      	nop
 800602e:	bf00      	nop
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
	...

08006038 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006042:	4b14      	ldr	r3, [pc, #80]	@ (8006094 <prvProcessExpiredTimer+0x5c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	3304      	adds	r3, #4
 8006050:	4618      	mov	r0, r3
 8006052:	f7fd fe65 	bl	8003d20 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d005      	beq.n	8006070 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f7ff ffc3 	bl	8005ff4 <prvReloadTimer>
 800606e:	e008      	b.n	8006082 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006076:	f023 0301 	bic.w	r3, r3, #1
 800607a:	b2da      	uxtb	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	4798      	blx	r3
    }
 800608a:	bf00      	nop
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	20000274 	.word	0x20000274

08006098 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060a0:	f107 0308 	add.w	r3, r7, #8
 80060a4:	4618      	mov	r0, r3
 80060a6:	f000 f859 	bl	800615c <prvGetNextExpireTime>
 80060aa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	4619      	mov	r1, r3
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 f805 	bl	80060c0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80060b6:	f000 f8d7 	bl	8006268 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060ba:	bf00      	nop
 80060bc:	e7f0      	b.n	80060a0 <prvTimerTask+0x8>
	...

080060c0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80060ca:	f7fe fe07 	bl	8004cdc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060ce:	f107 0308 	add.w	r3, r7, #8
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 f866 	bl	80061a4 <prvSampleTimeNow>
 80060d8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d130      	bne.n	8006142 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10a      	bne.n	80060fc <prvProcessTimerOrBlockTask+0x3c>
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d806      	bhi.n	80060fc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80060ee:	f7fe fe03 	bl	8004cf8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80060f2:	68f9      	ldr	r1, [r7, #12]
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff ff9f 	bl	8006038 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80060fa:	e024      	b.n	8006146 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d008      	beq.n	8006114 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006102:	4b13      	ldr	r3, [pc, #76]	@ (8006150 <prvProcessTimerOrBlockTask+0x90>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d101      	bne.n	8006110 <prvProcessTimerOrBlockTask+0x50>
 800610c:	2301      	movs	r3, #1
 800610e:	e000      	b.n	8006112 <prvProcessTimerOrBlockTask+0x52>
 8006110:	2300      	movs	r3, #0
 8006112:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006114:	4b0f      	ldr	r3, [pc, #60]	@ (8006154 <prvProcessTimerOrBlockTask+0x94>)
 8006116:	6818      	ldr	r0, [r3, #0]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	683a      	ldr	r2, [r7, #0]
 8006120:	4619      	mov	r1, r3
 8006122:	f7fe fbd7 	bl	80048d4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006126:	f7fe fde7 	bl	8004cf8 <xTaskResumeAll>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10a      	bne.n	8006146 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006130:	4b09      	ldr	r3, [pc, #36]	@ (8006158 <prvProcessTimerOrBlockTask+0x98>)
 8006132:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006136:	601a      	str	r2, [r3, #0]
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	f3bf 8f6f 	isb	sy
    }
 8006140:	e001      	b.n	8006146 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006142:	f7fe fdd9 	bl	8004cf8 <xTaskResumeAll>
    }
 8006146:	bf00      	nop
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20000278 	.word	0x20000278
 8006154:	2000027c 	.word	0x2000027c
 8006158:	e000ed04 	.word	0xe000ed04

0800615c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006164:	4b0e      	ldr	r3, [pc, #56]	@ (80061a0 <prvGetNextExpireTime+0x44>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <prvGetNextExpireTime+0x16>
 800616e:	2201      	movs	r2, #1
 8006170:	e000      	b.n	8006174 <prvGetNextExpireTime+0x18>
 8006172:	2200      	movs	r2, #0
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d105      	bne.n	800618c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006180:	4b07      	ldr	r3, [pc, #28]	@ (80061a0 <prvGetNextExpireTime+0x44>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	60fb      	str	r3, [r7, #12]
 800618a:	e001      	b.n	8006190 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006190:	68fb      	ldr	r3, [r7, #12]
    }
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	20000274 	.word	0x20000274

080061a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80061ac:	f7fe fea0 	bl	8004ef0 <xTaskGetTickCount>
 80061b0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80061b2:	4b0b      	ldr	r3, [pc, #44]	@ (80061e0 <prvSampleTimeNow+0x3c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d205      	bcs.n	80061c8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80061bc:	f000 f916 	bl	80063ec <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	e002      	b.n	80061ce <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80061ce:	4a04      	ldr	r2, [pc, #16]	@ (80061e0 <prvSampleTimeNow+0x3c>)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80061d4:	68fb      	ldr	r3, [r7, #12]
    }
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	20000284 	.word	0x20000284

080061e4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
 80061f0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80061f2:	2300      	movs	r3, #0
 80061f4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	429a      	cmp	r2, r3
 8006208:	d812      	bhi.n	8006230 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	1ad2      	subs	r2, r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	429a      	cmp	r2, r3
 8006216:	d302      	bcc.n	800621e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006218:	2301      	movs	r3, #1
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	e01b      	b.n	8006256 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800621e:	4b10      	ldr	r3, [pc, #64]	@ (8006260 <prvInsertTimerInActiveList+0x7c>)
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3304      	adds	r3, #4
 8006226:	4619      	mov	r1, r3
 8006228:	4610      	mov	r0, r2
 800622a:	f7fd fd40 	bl	8003cae <vListInsert>
 800622e:	e012      	b.n	8006256 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	429a      	cmp	r2, r3
 8006236:	d206      	bcs.n	8006246 <prvInsertTimerInActiveList+0x62>
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	429a      	cmp	r2, r3
 800623e:	d302      	bcc.n	8006246 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006240:	2301      	movs	r3, #1
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	e007      	b.n	8006256 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006246:	4b07      	ldr	r3, [pc, #28]	@ (8006264 <prvInsertTimerInActiveList+0x80>)
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	3304      	adds	r3, #4
 800624e:	4619      	mov	r1, r3
 8006250:	4610      	mov	r0, r2
 8006252:	f7fd fd2c 	bl	8003cae <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006256:	697b      	ldr	r3, [r7, #20]
    }
 8006258:	4618      	mov	r0, r3
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	20000278 	.word	0x20000278
 8006264:	20000274 	.word	0x20000274

08006268 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006268:	b580      	push	{r7, lr}
 800626a:	b088      	sub	sp, #32
 800626c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800626e:	e0a9      	b.n	80063c4 <prvProcessReceivedCommands+0x15c>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2b00      	cmp	r3, #0
 8006274:	f2c0 80a6 	blt.w	80063c4 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d004      	beq.n	800628e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	3304      	adds	r3, #4
 8006288:	4618      	mov	r0, r3
 800628a:	f7fd fd49 	bl	8003d20 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800628e:	1d3b      	adds	r3, r7, #4
 8006290:	4618      	mov	r0, r3
 8006292:	f7ff ff87 	bl	80061a4 <prvSampleTimeNow>
 8006296:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	3b01      	subs	r3, #1
 800629c:	2b08      	cmp	r3, #8
 800629e:	f200 808e 	bhi.w	80063be <prvProcessReceivedCommands+0x156>
 80062a2:	a201      	add	r2, pc, #4	@ (adr r2, 80062a8 <prvProcessReceivedCommands+0x40>)
 80062a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a8:	080062cd 	.word	0x080062cd
 80062ac:	080062cd 	.word	0x080062cd
 80062b0:	08006335 	.word	0x08006335
 80062b4:	08006349 	.word	0x08006349
 80062b8:	08006395 	.word	0x08006395
 80062bc:	080062cd 	.word	0x080062cd
 80062c0:	080062cd 	.word	0x080062cd
 80062c4:	08006335 	.word	0x08006335
 80062c8:	08006349 	.word	0x08006349
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062d2:	f043 0301 	orr.w	r3, r3, #1
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	18d1      	adds	r1, r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	69f8      	ldr	r0, [r7, #28]
 80062ec:	f7ff ff7a 	bl	80061e4 <prvInsertTimerInActiveList>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d065      	beq.n	80063c2 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062fc:	f003 0304 	and.w	r3, r3, #4
 8006300:	2b00      	cmp	r3, #0
 8006302:	d009      	beq.n	8006318 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	4413      	add	r3, r2
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	4619      	mov	r1, r3
 8006310:	69f8      	ldr	r0, [r7, #28]
 8006312:	f7ff fe6f 	bl	8005ff4 <prvReloadTimer>
 8006316:	e008      	b.n	800632a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800631e:	f023 0301 	bic.w	r3, r3, #1
 8006322:	b2da      	uxtb	r2, r3
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	69f8      	ldr	r0, [r7, #28]
 8006330:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8006332:	e046      	b.n	80063c2 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800633a:	f023 0301 	bic.w	r3, r3, #1
 800633e:	b2da      	uxtb	r2, r3
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8006346:	e03d      	b.n	80063c4 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800634e:	f043 0301 	orr.w	r3, r3, #1
 8006352:	b2da      	uxtb	r2, r3
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10b      	bne.n	8006380 <prvProcessReceivedCommands+0x118>
        __asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	617b      	str	r3, [r7, #20]
    }
 800637a:	bf00      	nop
 800637c:	bf00      	nop
 800637e:	e7fd      	b.n	800637c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	699a      	ldr	r2, [r3, #24]
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	18d1      	adds	r1, r2, r3
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	69f8      	ldr	r0, [r7, #28]
 800638e:	f7ff ff29 	bl	80061e4 <prvInsertTimerInActiveList>
                        break;
 8006392:	e017      	b.n	80063c4 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d103      	bne.n	80063aa <prvProcessReceivedCommands+0x142>
                                {
                                    vPortFree( pxTimer );
 80063a2:	69f8      	ldr	r0, [r7, #28]
 80063a4:	f000 fbbe 	bl	8006b24 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80063a8:	e00c      	b.n	80063c4 <prvProcessReceivedCommands+0x15c>
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063b0:	f023 0301 	bic.w	r3, r3, #1
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80063bc:	e002      	b.n	80063c4 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 80063be:	bf00      	nop
 80063c0:	e000      	b.n	80063c4 <prvProcessReceivedCommands+0x15c>
                        break;
 80063c2:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063c4:	4b08      	ldr	r3, [pc, #32]	@ (80063e8 <prvProcessReceivedCommands+0x180>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f107 0108 	add.w	r1, r7, #8
 80063cc:	2200      	movs	r2, #0
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7fd ff84 	bl	80042dc <xQueueReceive>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f47f af4a 	bne.w	8006270 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80063dc:	bf00      	nop
 80063de:	bf00      	nop
 80063e0:	3720      	adds	r7, #32
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	2000027c 	.word	0x2000027c

080063ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063f2:	e009      	b.n	8006408 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006430 <prvSwitchTimerLists+0x44>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80063fe:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006402:	6838      	ldr	r0, [r7, #0]
 8006404:	f7ff fe18 	bl	8006038 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006408:	4b09      	ldr	r3, [pc, #36]	@ (8006430 <prvSwitchTimerLists+0x44>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1f0      	bne.n	80063f4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8006412:	4b07      	ldr	r3, [pc, #28]	@ (8006430 <prvSwitchTimerLists+0x44>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006418:	4b06      	ldr	r3, [pc, #24]	@ (8006434 <prvSwitchTimerLists+0x48>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a04      	ldr	r2, [pc, #16]	@ (8006430 <prvSwitchTimerLists+0x44>)
 800641e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006420:	4a04      	ldr	r2, [pc, #16]	@ (8006434 <prvSwitchTimerLists+0x48>)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6013      	str	r3, [r2, #0]
    }
 8006426:	bf00      	nop
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	20000274 	.word	0x20000274
 8006434:	20000278 	.word	0x20000278

08006438 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006438:	b580      	push	{r7, lr}
 800643a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800643c:	f000 f966 	bl	800670c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006440:	4b12      	ldr	r3, [pc, #72]	@ (800648c <prvCheckForValidListAndQueue+0x54>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d11d      	bne.n	8006484 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006448:	4811      	ldr	r0, [pc, #68]	@ (8006490 <prvCheckForValidListAndQueue+0x58>)
 800644a:	f7fd fc03 	bl	8003c54 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800644e:	4811      	ldr	r0, [pc, #68]	@ (8006494 <prvCheckForValidListAndQueue+0x5c>)
 8006450:	f7fd fc00 	bl	8003c54 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006454:	4b10      	ldr	r3, [pc, #64]	@ (8006498 <prvCheckForValidListAndQueue+0x60>)
 8006456:	4a0e      	ldr	r2, [pc, #56]	@ (8006490 <prvCheckForValidListAndQueue+0x58>)
 8006458:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800645a:	4b10      	ldr	r3, [pc, #64]	@ (800649c <prvCheckForValidListAndQueue+0x64>)
 800645c:	4a0d      	ldr	r2, [pc, #52]	@ (8006494 <prvCheckForValidListAndQueue+0x5c>)
 800645e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006460:	2200      	movs	r2, #0
 8006462:	210c      	movs	r1, #12
 8006464:	200a      	movs	r0, #10
 8006466:	f7fd fd17 	bl	8003e98 <xQueueGenericCreate>
 800646a:	4603      	mov	r3, r0
 800646c:	4a07      	ldr	r2, [pc, #28]	@ (800648c <prvCheckForValidListAndQueue+0x54>)
 800646e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006470:	4b06      	ldr	r3, [pc, #24]	@ (800648c <prvCheckForValidListAndQueue+0x54>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d005      	beq.n	8006484 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006478:	4b04      	ldr	r3, [pc, #16]	@ (800648c <prvCheckForValidListAndQueue+0x54>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4908      	ldr	r1, [pc, #32]	@ (80064a0 <prvCheckForValidListAndQueue+0x68>)
 800647e:	4618      	mov	r0, r3
 8006480:	f7fe f9d8 	bl	8004834 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006484:	f000 f974 	bl	8006770 <vPortExitCritical>
    }
 8006488:	bf00      	nop
 800648a:	bd80      	pop	{r7, pc}
 800648c:	2000027c 	.word	0x2000027c
 8006490:	2000024c 	.word	0x2000024c
 8006494:	20000260 	.word	0x20000260
 8006498:	20000274 	.word	0x20000274
 800649c:	20000278 	.word	0x20000278
 80064a0:	08006f10 	.word	0x08006f10

080064a4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	3b04      	subs	r3, #4
 80064b4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80064bc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3b04      	subs	r3, #4
 80064c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	f023 0201 	bic.w	r2, r3, #1
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	3b04      	subs	r3, #4
 80064d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80064d4:	4a0c      	ldr	r2, [pc, #48]	@ (8006508 <pxPortInitialiseStack+0x64>)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3b14      	subs	r3, #20
 80064de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3b04      	subs	r3, #4
 80064ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f06f 0202 	mvn.w	r2, #2
 80064f2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	3b20      	subs	r3, #32
 80064f8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80064fa:	68fb      	ldr	r3, [r7, #12]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	0800650d 	.word	0x0800650d

0800650c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006512:	2300      	movs	r3, #0
 8006514:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006516:	4b13      	ldr	r3, [pc, #76]	@ (8006564 <prvTaskExitError+0x58>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800651e:	d00b      	beq.n	8006538 <prvTaskExitError+0x2c>
        __asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	60fb      	str	r3, [r7, #12]
    }
 8006532:	bf00      	nop
 8006534:	bf00      	nop
 8006536:	e7fd      	b.n	8006534 <prvTaskExitError+0x28>
        __asm volatile
 8006538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	60bb      	str	r3, [r7, #8]
    }
 800654a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800654c:	bf00      	nop
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d0fc      	beq.n	800654e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006554:	bf00      	nop
 8006556:	bf00      	nop
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	20000010 	.word	0x20000010
	...

08006570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006570:	4b07      	ldr	r3, [pc, #28]	@ (8006590 <pxCurrentTCBConst2>)
 8006572:	6819      	ldr	r1, [r3, #0]
 8006574:	6808      	ldr	r0, [r1, #0]
 8006576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657a:	f380 8809 	msr	PSP, r0
 800657e:	f3bf 8f6f 	isb	sy
 8006582:	f04f 0000 	mov.w	r0, #0
 8006586:	f380 8811 	msr	BASEPRI, r0
 800658a:	4770      	bx	lr
 800658c:	f3af 8000 	nop.w

08006590 <pxCurrentTCBConst2>:
 8006590:	20000148 	.word	0x20000148
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006594:	bf00      	nop
 8006596:	bf00      	nop

08006598 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006598:	4808      	ldr	r0, [pc, #32]	@ (80065bc <prvPortStartFirstTask+0x24>)
 800659a:	6800      	ldr	r0, [r0, #0]
 800659c:	6800      	ldr	r0, [r0, #0]
 800659e:	f380 8808 	msr	MSP, r0
 80065a2:	f04f 0000 	mov.w	r0, #0
 80065a6:	f380 8814 	msr	CONTROL, r0
 80065aa:	b662      	cpsie	i
 80065ac:	b661      	cpsie	f
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	df00      	svc	0
 80065b8:	bf00      	nop
 80065ba:	0000      	.short	0x0000
 80065bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80065c0:	bf00      	nop
 80065c2:	bf00      	nop

080065c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80065ca:	4b47      	ldr	r3, [pc, #284]	@ (80066e8 <xPortStartScheduler+0x124>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a47      	ldr	r2, [pc, #284]	@ (80066ec <xPortStartScheduler+0x128>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d10b      	bne.n	80065ec <xPortStartScheduler+0x28>
        __asm volatile
 80065d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d8:	f383 8811 	msr	BASEPRI, r3
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	613b      	str	r3, [r7, #16]
    }
 80065e6:	bf00      	nop
 80065e8:	bf00      	nop
 80065ea:	e7fd      	b.n	80065e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80065ec:	4b3e      	ldr	r3, [pc, #248]	@ (80066e8 <xPortStartScheduler+0x124>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a3f      	ldr	r2, [pc, #252]	@ (80066f0 <xPortStartScheduler+0x12c>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d10b      	bne.n	800660e <xPortStartScheduler+0x4a>
        __asm volatile
 80065f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	60fb      	str	r3, [r7, #12]
    }
 8006608:	bf00      	nop
 800660a:	bf00      	nop
 800660c:	e7fd      	b.n	800660a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800660e:	4b39      	ldr	r3, [pc, #228]	@ (80066f4 <xPortStartScheduler+0x130>)
 8006610:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	b2db      	uxtb	r3, r3
 8006618:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	22ff      	movs	r2, #255	@ 0xff
 800661e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	b2db      	uxtb	r3, r3
 8006626:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006628:	78fb      	ldrb	r3, [r7, #3]
 800662a:	b2db      	uxtb	r3, r3
 800662c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006630:	b2da      	uxtb	r2, r3
 8006632:	4b31      	ldr	r3, [pc, #196]	@ (80066f8 <xPortStartScheduler+0x134>)
 8006634:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006636:	4b31      	ldr	r3, [pc, #196]	@ (80066fc <xPortStartScheduler+0x138>)
 8006638:	2207      	movs	r2, #7
 800663a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800663c:	e009      	b.n	8006652 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800663e:	4b2f      	ldr	r3, [pc, #188]	@ (80066fc <xPortStartScheduler+0x138>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3b01      	subs	r3, #1
 8006644:	4a2d      	ldr	r2, [pc, #180]	@ (80066fc <xPortStartScheduler+0x138>)
 8006646:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006648:	78fb      	ldrb	r3, [r7, #3]
 800664a:	b2db      	uxtb	r3, r3
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	b2db      	uxtb	r3, r3
 8006650:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006652:	78fb      	ldrb	r3, [r7, #3]
 8006654:	b2db      	uxtb	r3, r3
 8006656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800665a:	2b80      	cmp	r3, #128	@ 0x80
 800665c:	d0ef      	beq.n	800663e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800665e:	4b27      	ldr	r3, [pc, #156]	@ (80066fc <xPortStartScheduler+0x138>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f1c3 0307 	rsb	r3, r3, #7
 8006666:	2b04      	cmp	r3, #4
 8006668:	d00b      	beq.n	8006682 <xPortStartScheduler+0xbe>
        __asm volatile
 800666a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666e:	f383 8811 	msr	BASEPRI, r3
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	f3bf 8f4f 	dsb	sy
 800667a:	60bb      	str	r3, [r7, #8]
    }
 800667c:	bf00      	nop
 800667e:	bf00      	nop
 8006680:	e7fd      	b.n	800667e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006682:	4b1e      	ldr	r3, [pc, #120]	@ (80066fc <xPortStartScheduler+0x138>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	021b      	lsls	r3, r3, #8
 8006688:	4a1c      	ldr	r2, [pc, #112]	@ (80066fc <xPortStartScheduler+0x138>)
 800668a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800668c:	4b1b      	ldr	r3, [pc, #108]	@ (80066fc <xPortStartScheduler+0x138>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006694:	4a19      	ldr	r2, [pc, #100]	@ (80066fc <xPortStartScheduler+0x138>)
 8006696:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	b2da      	uxtb	r2, r3
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80066a0:	4b17      	ldr	r3, [pc, #92]	@ (8006700 <xPortStartScheduler+0x13c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a16      	ldr	r2, [pc, #88]	@ (8006700 <xPortStartScheduler+0x13c>)
 80066a6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80066aa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80066ac:	4b14      	ldr	r3, [pc, #80]	@ (8006700 <xPortStartScheduler+0x13c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a13      	ldr	r2, [pc, #76]	@ (8006700 <xPortStartScheduler+0x13c>)
 80066b2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80066b6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80066b8:	f000 f8e0 	bl	800687c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80066bc:	4b11      	ldr	r3, [pc, #68]	@ (8006704 <xPortStartScheduler+0x140>)
 80066be:	2200      	movs	r2, #0
 80066c0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80066c2:	f000 f8ff 	bl	80068c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80066c6:	4b10      	ldr	r3, [pc, #64]	@ (8006708 <xPortStartScheduler+0x144>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a0f      	ldr	r2, [pc, #60]	@ (8006708 <xPortStartScheduler+0x144>)
 80066cc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80066d0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80066d2:	f7ff ff61 	bl	8006598 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80066d6:	f7fe fd33 	bl	8005140 <vTaskSwitchContext>
    prvTaskExitError();
 80066da:	f7ff ff17 	bl	800650c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	e000ed00 	.word	0xe000ed00
 80066ec:	410fc271 	.word	0x410fc271
 80066f0:	410fc270 	.word	0x410fc270
 80066f4:	e000e400 	.word	0xe000e400
 80066f8:	20000288 	.word	0x20000288
 80066fc:	2000028c 	.word	0x2000028c
 8006700:	e000ed20 	.word	0xe000ed20
 8006704:	20000010 	.word	0x20000010
 8006708:	e000ef34 	.word	0xe000ef34

0800670c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
        __asm volatile
 8006712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	607b      	str	r3, [r7, #4]
    }
 8006724:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006726:	4b10      	ldr	r3, [pc, #64]	@ (8006768 <vPortEnterCritical+0x5c>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	3301      	adds	r3, #1
 800672c:	4a0e      	ldr	r2, [pc, #56]	@ (8006768 <vPortEnterCritical+0x5c>)
 800672e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006730:	4b0d      	ldr	r3, [pc, #52]	@ (8006768 <vPortEnterCritical+0x5c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d110      	bne.n	800675a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006738:	4b0c      	ldr	r3, [pc, #48]	@ (800676c <vPortEnterCritical+0x60>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00b      	beq.n	800675a <vPortEnterCritical+0x4e>
        __asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	603b      	str	r3, [r7, #0]
    }
 8006754:	bf00      	nop
 8006756:	bf00      	nop
 8006758:	e7fd      	b.n	8006756 <vPortEnterCritical+0x4a>
    }
}
 800675a:	bf00      	nop
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	20000010 	.word	0x20000010
 800676c:	e000ed04 	.word	0xe000ed04

08006770 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006776:	4b12      	ldr	r3, [pc, #72]	@ (80067c0 <vPortExitCritical+0x50>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10b      	bne.n	8006796 <vPortExitCritical+0x26>
        __asm volatile
 800677e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	607b      	str	r3, [r7, #4]
    }
 8006790:	bf00      	nop
 8006792:	bf00      	nop
 8006794:	e7fd      	b.n	8006792 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006796:	4b0a      	ldr	r3, [pc, #40]	@ (80067c0 <vPortExitCritical+0x50>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3b01      	subs	r3, #1
 800679c:	4a08      	ldr	r2, [pc, #32]	@ (80067c0 <vPortExitCritical+0x50>)
 800679e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80067a0:	4b07      	ldr	r3, [pc, #28]	@ (80067c0 <vPortExitCritical+0x50>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d105      	bne.n	80067b4 <vPortExitCritical+0x44>
 80067a8:	2300      	movs	r3, #0
 80067aa:	603b      	str	r3, [r7, #0]
        __asm volatile
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	f383 8811 	msr	BASEPRI, r3
    }
 80067b2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	20000010 	.word	0x20000010
	...

080067d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80067d0:	f3ef 8009 	mrs	r0, PSP
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	4b15      	ldr	r3, [pc, #84]	@ (8006830 <pxCurrentTCBConst>)
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	f01e 0f10 	tst.w	lr, #16
 80067e0:	bf08      	it	eq
 80067e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ea:	6010      	str	r0, [r2, #0]
 80067ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80067f4:	f380 8811 	msr	BASEPRI, r0
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f7fe fc9e 	bl	8005140 <vTaskSwitchContext>
 8006804:	f04f 0000 	mov.w	r0, #0
 8006808:	f380 8811 	msr	BASEPRI, r0
 800680c:	bc09      	pop	{r0, r3}
 800680e:	6819      	ldr	r1, [r3, #0]
 8006810:	6808      	ldr	r0, [r1, #0]
 8006812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006816:	f01e 0f10 	tst.w	lr, #16
 800681a:	bf08      	it	eq
 800681c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006820:	f380 8809 	msr	PSP, r0
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	f3af 8000 	nop.w

08006830 <pxCurrentTCBConst>:
 8006830:	20000148 	.word	0x20000148
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006834:	bf00      	nop
 8006836:	bf00      	nop

08006838 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
        __asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	607b      	str	r3, [r7, #4]
    }
 8006850:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006852:	f7fe fb5d 	bl	8004f10 <xTaskIncrementTick>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800685c:	4b06      	ldr	r3, [pc, #24]	@ (8006878 <SysTick_Handler+0x40>)
 800685e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	2300      	movs	r3, #0
 8006866:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	f383 8811 	msr	BASEPRI, r3
    }
 800686e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8006870:	bf00      	nop
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	e000ed04 	.word	0xe000ed04

0800687c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800687c:	b480      	push	{r7}
 800687e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006880:	4b0b      	ldr	r3, [pc, #44]	@ (80068b0 <vPortSetupTimerInterrupt+0x34>)
 8006882:	2200      	movs	r2, #0
 8006884:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006886:	4b0b      	ldr	r3, [pc, #44]	@ (80068b4 <vPortSetupTimerInterrupt+0x38>)
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800688c:	4b0a      	ldr	r3, [pc, #40]	@ (80068b8 <vPortSetupTimerInterrupt+0x3c>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a0a      	ldr	r2, [pc, #40]	@ (80068bc <vPortSetupTimerInterrupt+0x40>)
 8006892:	fba2 2303 	umull	r2, r3, r2, r3
 8006896:	099b      	lsrs	r3, r3, #6
 8006898:	4a09      	ldr	r2, [pc, #36]	@ (80068c0 <vPortSetupTimerInterrupt+0x44>)
 800689a:	3b01      	subs	r3, #1
 800689c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800689e:	4b04      	ldr	r3, [pc, #16]	@ (80068b0 <vPortSetupTimerInterrupt+0x34>)
 80068a0:	2207      	movs	r2, #7
 80068a2:	601a      	str	r2, [r3, #0]
}
 80068a4:	bf00      	nop
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	e000e010 	.word	0xe000e010
 80068b4:	e000e018 	.word	0xe000e018
 80068b8:	20000000 	.word	0x20000000
 80068bc:	10624dd3 	.word	0x10624dd3
 80068c0:	e000e014 	.word	0xe000e014

080068c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80068c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80068d4 <vPortEnableVFP+0x10>
 80068c8:	6801      	ldr	r1, [r0, #0]
 80068ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80068ce:	6001      	str	r1, [r0, #0]
 80068d0:	4770      	bx	lr
 80068d2:	0000      	.short	0x0000
 80068d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80068d8:	bf00      	nop
 80068da:	bf00      	nop

080068dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80068e2:	f3ef 8305 	mrs	r3, IPSR
 80068e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b0f      	cmp	r3, #15
 80068ec:	d915      	bls.n	800691a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80068ee:	4a18      	ldr	r2, [pc, #96]	@ (8006950 <vPortValidateInterruptPriority+0x74>)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	4413      	add	r3, r2
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80068f8:	4b16      	ldr	r3, [pc, #88]	@ (8006954 <vPortValidateInterruptPriority+0x78>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	7afa      	ldrb	r2, [r7, #11]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d20b      	bcs.n	800691a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8006902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	607b      	str	r3, [r7, #4]
    }
 8006914:	bf00      	nop
 8006916:	bf00      	nop
 8006918:	e7fd      	b.n	8006916 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800691a:	4b0f      	ldr	r3, [pc, #60]	@ (8006958 <vPortValidateInterruptPriority+0x7c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006922:	4b0e      	ldr	r3, [pc, #56]	@ (800695c <vPortValidateInterruptPriority+0x80>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	429a      	cmp	r2, r3
 8006928:	d90b      	bls.n	8006942 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800692a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800692e:	f383 8811 	msr	BASEPRI, r3
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	603b      	str	r3, [r7, #0]
    }
 800693c:	bf00      	nop
 800693e:	bf00      	nop
 8006940:	e7fd      	b.n	800693e <vPortValidateInterruptPriority+0x62>
    }
 8006942:	bf00      	nop
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	e000e3f0 	.word	0xe000e3f0
 8006954:	20000288 	.word	0x20000288
 8006958:	e000ed0c 	.word	0xe000ed0c
 800695c:	2000028c 	.word	0x2000028c

08006960 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08a      	sub	sp, #40	@ 0x28
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006968:	2300      	movs	r3, #0
 800696a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800696c:	f7fe f9b6 	bl	8004cdc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006970:	4b66      	ldr	r3, [pc, #408]	@ (8006b0c <pvPortMalloc+0x1ac>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006978:	f000 f938 	bl	8006bec <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800697c:	4b64      	ldr	r3, [pc, #400]	@ (8006b10 <pvPortMalloc+0x1b0>)
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4013      	ands	r3, r2
 8006984:	2b00      	cmp	r3, #0
 8006986:	f040 80a9 	bne.w	8006adc <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d02e      	beq.n	80069ee <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8006990:	2208      	movs	r2, #8
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	429a      	cmp	r2, r3
 800699a:	d228      	bcs.n	80069ee <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800699c:	2208      	movs	r2, #8
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4413      	add	r3, r2
 80069a2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f003 0307 	and.w	r3, r3, #7
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d022      	beq.n	80069f4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f023 0307 	bic.w	r3, r3, #7
 80069b4:	3308      	adds	r3, #8
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d215      	bcs.n	80069e8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f023 0307 	bic.w	r3, r3, #7
 80069c2:	3308      	adds	r3, #8
 80069c4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d011      	beq.n	80069f4 <pvPortMalloc+0x94>
        __asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	617b      	str	r3, [r7, #20]
    }
 80069e2:	bf00      	nop
 80069e4:	bf00      	nop
 80069e6:	e7fd      	b.n	80069e4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80069e8:	2300      	movs	r3, #0
 80069ea:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069ec:	e002      	b.n	80069f4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80069ee:	2300      	movs	r3, #0
 80069f0:	607b      	str	r3, [r7, #4]
 80069f2:	e000      	b.n	80069f6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069f4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d06f      	beq.n	8006adc <pvPortMalloc+0x17c>
 80069fc:	4b45      	ldr	r3, [pc, #276]	@ (8006b14 <pvPortMalloc+0x1b4>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d86a      	bhi.n	8006adc <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006a06:	4b44      	ldr	r3, [pc, #272]	@ (8006b18 <pvPortMalloc+0x1b8>)
 8006a08:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006a0a:	4b43      	ldr	r3, [pc, #268]	@ (8006b18 <pvPortMalloc+0x1b8>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a10:	e004      	b.n	8006a1c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8006a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a14:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d903      	bls.n	8006a2e <pvPortMalloc+0xce>
 8006a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1f1      	bne.n	8006a12 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006a2e:	4b37      	ldr	r3, [pc, #220]	@ (8006b0c <pvPortMalloc+0x1ac>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d051      	beq.n	8006adc <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2208      	movs	r2, #8
 8006a3e:	4413      	add	r3, r2
 8006a40:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	1ad2      	subs	r2, r2, r3
 8006a52:	2308      	movs	r3, #8
 8006a54:	005b      	lsls	r3, r3, #1
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d920      	bls.n	8006a9c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4413      	add	r3, r2
 8006a60:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	f003 0307 	and.w	r3, r3, #7
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00b      	beq.n	8006a84 <pvPortMalloc+0x124>
        __asm volatile
 8006a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	613b      	str	r3, [r7, #16]
    }
 8006a7e:	bf00      	nop
 8006a80:	bf00      	nop
 8006a82:	e7fd      	b.n	8006a80 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a86:	685a      	ldr	r2, [r3, #4]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	1ad2      	subs	r2, r2, r3
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a96:	69b8      	ldr	r0, [r7, #24]
 8006a98:	f000 f90a 	bl	8006cb0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8006b14 <pvPortMalloc+0x1b4>)
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	4a1b      	ldr	r2, [pc, #108]	@ (8006b14 <pvPortMalloc+0x1b4>)
 8006aa8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8006b14 <pvPortMalloc+0x1b4>)
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	4b1b      	ldr	r3, [pc, #108]	@ (8006b1c <pvPortMalloc+0x1bc>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d203      	bcs.n	8006abe <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ab6:	4b17      	ldr	r3, [pc, #92]	@ (8006b14 <pvPortMalloc+0x1b4>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a18      	ldr	r2, [pc, #96]	@ (8006b1c <pvPortMalloc+0x1bc>)
 8006abc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	4b13      	ldr	r3, [pc, #76]	@ (8006b10 <pvPortMalloc+0x1b0>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aca:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ace:	2200      	movs	r2, #0
 8006ad0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006ad2:	4b13      	ldr	r3, [pc, #76]	@ (8006b20 <pvPortMalloc+0x1c0>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	4a11      	ldr	r2, [pc, #68]	@ (8006b20 <pvPortMalloc+0x1c0>)
 8006ada:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006adc:	f7fe f90c 	bl	8004cf8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00b      	beq.n	8006b02 <pvPortMalloc+0x1a2>
        __asm volatile
 8006aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aee:	f383 8811 	msr	BASEPRI, r3
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	f3bf 8f4f 	dsb	sy
 8006afa:	60fb      	str	r3, [r7, #12]
    }
 8006afc:	bf00      	nop
 8006afe:	bf00      	nop
 8006b00:	e7fd      	b.n	8006afe <pvPortMalloc+0x19e>
    return pvReturn;
 8006b02:	69fb      	ldr	r3, [r7, #28]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3728      	adds	r7, #40	@ 0x28
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	20012e98 	.word	0x20012e98
 8006b10:	20012eac 	.word	0x20012eac
 8006b14:	20012e9c 	.word	0x20012e9c
 8006b18:	20012e90 	.word	0x20012e90
 8006b1c:	20012ea0 	.word	0x20012ea0
 8006b20:	20012ea4 	.word	0x20012ea4

08006b24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d04f      	beq.n	8006bd6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006b36:	2308      	movs	r3, #8
 8006b38:	425b      	negs	r3, r3
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	4b25      	ldr	r3, [pc, #148]	@ (8006be0 <vPortFree+0xbc>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10b      	bne.n	8006b6a <vPortFree+0x46>
        __asm volatile
 8006b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	60fb      	str	r3, [r7, #12]
    }
 8006b64:	bf00      	nop
 8006b66:	bf00      	nop
 8006b68:	e7fd      	b.n	8006b66 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00b      	beq.n	8006b8a <vPortFree+0x66>
        __asm volatile
 8006b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	60bb      	str	r3, [r7, #8]
    }
 8006b84:	bf00      	nop
 8006b86:	bf00      	nop
 8006b88:	e7fd      	b.n	8006b86 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	4b14      	ldr	r3, [pc, #80]	@ (8006be0 <vPortFree+0xbc>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4013      	ands	r3, r2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d01e      	beq.n	8006bd6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d11a      	bne.n	8006bd6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8006be0 <vPortFree+0xbc>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	43db      	mvns	r3, r3
 8006baa:	401a      	ands	r2, r3
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8006bb0:	f7fe f894 	bl	8004cdc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8006be4 <vPortFree+0xc0>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	4a09      	ldr	r2, [pc, #36]	@ (8006be4 <vPortFree+0xc0>)
 8006bc0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bc2:	6938      	ldr	r0, [r7, #16]
 8006bc4:	f000 f874 	bl	8006cb0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006bc8:	4b07      	ldr	r3, [pc, #28]	@ (8006be8 <vPortFree+0xc4>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	4a06      	ldr	r2, [pc, #24]	@ (8006be8 <vPortFree+0xc4>)
 8006bd0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006bd2:	f7fe f891 	bl	8004cf8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006bd6:	bf00      	nop
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	20012eac 	.word	0x20012eac
 8006be4:	20012e9c 	.word	0x20012e9c
 8006be8:	20012ea8 	.word	0x20012ea8

08006bec <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006bf2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8006bf6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8006bf8:	4b27      	ldr	r3, [pc, #156]	@ (8006c98 <prvHeapInit+0xac>)
 8006bfa:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f003 0307 	and.w	r3, r3, #7
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00c      	beq.n	8006c20 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3307      	adds	r3, #7
 8006c0a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f023 0307 	bic.w	r3, r3, #7
 8006c12:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8006c98 <prvHeapInit+0xac>)
 8006c1c:	4413      	add	r3, r2
 8006c1e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c24:	4a1d      	ldr	r2, [pc, #116]	@ (8006c9c <prvHeapInit+0xb0>)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8006c9c <prvHeapInit+0xb0>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	4413      	add	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006c38:	2208      	movs	r2, #8
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	1a9b      	subs	r3, r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 0307 	bic.w	r3, r3, #7
 8006c46:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4a15      	ldr	r2, [pc, #84]	@ (8006ca0 <prvHeapInit+0xb4>)
 8006c4c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006c4e:	4b14      	ldr	r3, [pc, #80]	@ (8006ca0 <prvHeapInit+0xb4>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2200      	movs	r2, #0
 8006c54:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006c56:	4b12      	ldr	r3, [pc, #72]	@ (8006ca0 <prvHeapInit+0xb4>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	1ad2      	subs	r2, r2, r3
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8006ca0 <prvHeapInit+0xb4>)
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	4a0a      	ldr	r2, [pc, #40]	@ (8006ca4 <prvHeapInit+0xb8>)
 8006c7a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	4a09      	ldr	r2, [pc, #36]	@ (8006ca8 <prvHeapInit+0xbc>)
 8006c82:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c84:	4b09      	ldr	r3, [pc, #36]	@ (8006cac <prvHeapInit+0xc0>)
 8006c86:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006c8a:	601a      	str	r2, [r3, #0]
}
 8006c8c:	bf00      	nop
 8006c8e:	3714      	adds	r7, #20
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	20000290 	.word	0x20000290
 8006c9c:	20012e90 	.word	0x20012e90
 8006ca0:	20012e98 	.word	0x20012e98
 8006ca4:	20012ea0 	.word	0x20012ea0
 8006ca8:	20012e9c 	.word	0x20012e9c
 8006cac:	20012eac 	.word	0x20012eac

08006cb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006cb8:	4b28      	ldr	r3, [pc, #160]	@ (8006d5c <prvInsertBlockIntoFreeList+0xac>)
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	e002      	b.n	8006cc4 <prvInsertBlockIntoFreeList+0x14>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d8f7      	bhi.n	8006cbe <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	4413      	add	r3, r2
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d108      	bne.n	8006cf2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	685a      	ldr	r2, [r3, #4]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	441a      	add	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	441a      	add	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d118      	bne.n	8006d38 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	4b15      	ldr	r3, [pc, #84]	@ (8006d60 <prvInsertBlockIntoFreeList+0xb0>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d00d      	beq.n	8006d2e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	441a      	add	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	e008      	b.n	8006d40 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d60 <prvInsertBlockIntoFreeList+0xb0>)
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	e003      	b.n	8006d40 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d002      	beq.n	8006d4e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006d4e:	bf00      	nop
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	20012e90 	.word	0x20012e90
 8006d60:	20012e98 	.word	0x20012e98

08006d64 <memset>:
 8006d64:	4402      	add	r2, r0
 8006d66:	4603      	mov	r3, r0
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d100      	bne.n	8006d6e <memset+0xa>
 8006d6c:	4770      	bx	lr
 8006d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d72:	e7f9      	b.n	8006d68 <memset+0x4>

08006d74 <__libc_init_array>:
 8006d74:	b570      	push	{r4, r5, r6, lr}
 8006d76:	4d0d      	ldr	r5, [pc, #52]	@ (8006dac <__libc_init_array+0x38>)
 8006d78:	4c0d      	ldr	r4, [pc, #52]	@ (8006db0 <__libc_init_array+0x3c>)
 8006d7a:	1b64      	subs	r4, r4, r5
 8006d7c:	10a4      	asrs	r4, r4, #2
 8006d7e:	2600      	movs	r6, #0
 8006d80:	42a6      	cmp	r6, r4
 8006d82:	d109      	bne.n	8006d98 <__libc_init_array+0x24>
 8006d84:	4d0b      	ldr	r5, [pc, #44]	@ (8006db4 <__libc_init_array+0x40>)
 8006d86:	4c0c      	ldr	r4, [pc, #48]	@ (8006db8 <__libc_init_array+0x44>)
 8006d88:	f000 f826 	bl	8006dd8 <_init>
 8006d8c:	1b64      	subs	r4, r4, r5
 8006d8e:	10a4      	asrs	r4, r4, #2
 8006d90:	2600      	movs	r6, #0
 8006d92:	42a6      	cmp	r6, r4
 8006d94:	d105      	bne.n	8006da2 <__libc_init_array+0x2e>
 8006d96:	bd70      	pop	{r4, r5, r6, pc}
 8006d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d9c:	4798      	blx	r3
 8006d9e:	3601      	adds	r6, #1
 8006da0:	e7ee      	b.n	8006d80 <__libc_init_array+0xc>
 8006da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006da6:	4798      	blx	r3
 8006da8:	3601      	adds	r6, #1
 8006daa:	e7f2      	b.n	8006d92 <__libc_init_array+0x1e>
 8006dac:	08006f38 	.word	0x08006f38
 8006db0:	08006f38 	.word	0x08006f38
 8006db4:	08006f38 	.word	0x08006f38
 8006db8:	08006f3c 	.word	0x08006f3c

08006dbc <memcpy>:
 8006dbc:	440a      	add	r2, r1
 8006dbe:	4291      	cmp	r1, r2
 8006dc0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006dc4:	d100      	bne.n	8006dc8 <memcpy+0xc>
 8006dc6:	4770      	bx	lr
 8006dc8:	b510      	push	{r4, lr}
 8006dca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dd2:	4291      	cmp	r1, r2
 8006dd4:	d1f9      	bne.n	8006dca <memcpy+0xe>
 8006dd6:	bd10      	pop	{r4, pc}

08006dd8 <_init>:
 8006dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dda:	bf00      	nop
 8006ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dde:	bc08      	pop	{r3}
 8006de0:	469e      	mov	lr, r3
 8006de2:	4770      	bx	lr

08006de4 <_fini>:
 8006de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de6:	bf00      	nop
 8006de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dea:	bc08      	pop	{r3}
 8006dec:	469e      	mov	lr, r3
 8006dee:	4770      	bx	lr
